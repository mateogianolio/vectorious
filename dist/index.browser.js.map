{
  "version": 3,
  "sources": ["../node_modules/util/support/isBufferBrowser.js", "../node_modules/util/node_modules/inherits/inherits_browser.js", "../node_modules/util/util.js", "../src/index.ts", "../src/util.ts", "../src/core/array.ts", "../src/iterators/single.ts", "../src/iterators/multi.ts", "../src/core/abs.ts", "../src/core/acos.ts", "../src/core/acosh.ts", "../src/blas.ts", "../src/core/add.ts", "../src/core/angle.ts", "../src/core/asin.ts", "../src/core/asinh.ts", "../src/core/atan.ts", "../src/core/atanh.ts", "../src/core/zeros.ts", "../src/core/augment.ts", "../src/core/binOp.ts", "../src/core/cbrt.ts", "../src/core/ceil.ts", "../src/core/check.ts", "../src/core/combine.ts", "../src/core/copy.ts", "../src/core/cos.ts", "../src/core/cosh.ts", "../src/core/cross.ts", "../src/core/det.ts", "../src/core/diagonal.ts", "../src/core/dot.ts", "../src/core/eye.ts", "../src/core/eig.ts", "../src/core/equals.ts", "../src/core/equidimensional.ts", "../src/core/equilateral.ts", "../src/core/exp.ts", "../src/core/expm1.ts", "../src/core/fill.ts", "../src/core/floor.ts", "../src/core/forEach.ts", "../src/core/fround.ts", "../src/core/gauss.ts", "../src/core/get.ts", "../src/lapack.ts", "../src/core/inv.ts", "../src/core/log.ts", "../src/core/log10.ts", "../src/core/log1p.ts", "../src/core/log2.ts", "../src/core/lu.ts", "../src/core/lu_factor.ts", "../src/core/map.ts", "../src/core/max.ts", "../src/core/mean.ts", "../src/core/min.ts", "../src/core/matrix.ts", "../src/core/multiply.ts", "../src/core/norm.ts", "../src/core/normalize.ts", "../src/core/pow.ts", "../src/core/prod.ts", "../src/core/product.ts", "../src/core/project.ts", "../src/core/push.ts", "../src/core/rank.ts", "../src/core/reciprocal.ts", "../src/core/reduce.ts", "../src/core/reshape.ts", "../src/core/round.ts", "../src/core/row_add.ts", "../src/core/scale.ts", "../src/core/set.ts", "../src/core/sign.ts", "../src/core/sin.ts", "../src/core/sinh.ts", "../src/core/slice.ts", "../src/core/solve.ts", "../src/core/sqrt.ts", "../src/core/square.ts", "../src/core/subtract.ts", "../src/core/sum.ts", "../src/core/swap.ts", "../src/core/tan.ts", "../src/core/tanh.ts", "../src/core/toArray.ts", "../src/core/toString.ts", "../src/core/trace.ts", "../src/core/transpose.ts", "../src/core/trunc.ts", "../src/core/magic.ts", "../src/core/ones.ts", "../src/core/random.ts", "../src/core/range.ts", "../src/core/index.ts"],
  "sourcesContent": ["module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}", "if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "/**\n * @module Globals\n */\nexport * from './core';\nexport * from './iterators';\n", "import { DType, TypedArray, TypedArrayConstructor } from './types';\n\nexport const V_MAXDIMS = 32;\n\nexport const flatten: (array: any[]) => number[] = (array: any[]): number[] =>\n  array.reduce(\n    (acc: any[], next: any): any[] => acc.concat(Array.isArray(next) ? flatten(next) : next),\n    []\n  );\n\nexport const is_typed_array: (array: any) => boolean = (array: any): boolean =>\n  ArrayBuffer.isView(array) && !(array instanceof DataView);\n\nexport const get_length: (shape: number[]) => number = (shape: number[]): number =>\n  shape.reduce((a: number, b: number): number => a * b, 1);\n\nexport const get_shape: (array: any) => number[] = (array: any): number[] =>\n  Array.isArray(array) || is_typed_array(array) ? [array.length].concat(get_shape(array[0])) : [];\n\nexport const get_strides: (shape: number[]) => number[] = (shape: number[]): number[] => [\n  ...shape\n    .slice(1)\n    .map((_: number, i: number): number =>\n      shape.slice(i + 1).reduce((a: number, b: number): number => a * b, 1)\n    ),\n  1,\n];\n\nexport const get_dtype: (array: TypedArray) => DType = (array: TypedArray): DType => {\n  const { constructor: { name = 'Float32Array' } = {} } = array || {};\n\n  switch (name) {\n    case 'Int8Array':\n      return 'int8';\n    case 'Uint8Array':\n      return 'uint8';\n    case 'Int16Array':\n      return 'int16';\n    case 'Uint16Array':\n      return 'uint16';\n    case 'Int32Array':\n      return 'int32';\n    case 'Uint32Array':\n      return 'uint32';\n    case 'Uint8ClampedArray':\n      return 'uint8c';\n    case 'Float32Array':\n      return 'float32';\n    case 'Float64Array':\n      return 'float64';\n    default:\n      return 'float64';\n  }\n};\n\nexport const get_type: (dtype: DType) => TypedArrayConstructor = (\n  dtype: DType\n): TypedArrayConstructor => {\n  switch (dtype) {\n    case 'int8':\n      return Int8Array;\n    case 'uint8':\n      return Uint8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'uint8c':\n      return Uint8ClampedArray;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      return Float64Array;\n  }\n};\n", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function array\n * @description `array(...args)` is an alias for `new v(...args)`\n * @param {} ...args\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]); // => array([1, 2, 3])\n */\nexport const array = (...args: any[]): NDArray => new NDArray(...args);\n", "import { NDArray } from '..';\nimport { array } from '../core/array';\nimport { V_MAXDIMS } from '../util';\n\n/**\n * @class NDIter\n * @description Constructs an NDIter instance.\n * @param {NDArray} x\n */\nexport class NDIter implements Iterator<number[]> {\n  /**\n   * @name x\n   * @memberof NDIter.prototype\n   * @type NDArray\n   */\n  public x: NDArray;\n\n  /**\n   * @name shape\n   * @memberof NDIter.prototype\n   * @type Number[]\n   */\n  public shape: number[];\n\n  /**\n   * @name shapem1\n   * @memberof NDIter.prototype\n   * @type Number[]\n   */\n  public shapem1: number[];\n\n  /**\n   * @name strides\n   * @memberof NDIter.prototype\n   * @type Number[]\n   */\n  public strides: number[];\n\n  /**\n   * @name backstrides\n   * @memberof NDIter.prototype\n   * @type Number[]\n   */\n  public backstrides: number[];\n\n  /**\n   * @name length\n   * @memberof NDIter.prototype\n   * @type Number\n   */\n  public length: number;\n\n  /**\n   * @name lengthm1\n   * @memberof NDIter.prototype\n   * @type Number\n   */\n  public lengthm1: number;\n\n  /**\n   * @name nd\n   * @memberof NDIter.prototype\n   * @type Number\n   */\n  public nd: number;\n\n  /**\n   * @name ndm1\n   * @memberof NDIter.prototype\n   * @type Number\n   */\n  public ndm1: number;\n\n  /**\n   * @name index\n   * @memberof NDIter.prototype\n   * @type Number\n   */\n  public index: number;\n\n  /**\n   * @name coords\n   * @memberof NDIter.prototype\n   * @type Number[]\n   */\n  public coords: number[];\n\n  /**\n   * @name pos\n   * @memberof NDIter.prototype\n   * @type Number\n   */\n  public pos: number;\n\n  /**\n   * @name factors\n   * @memberof NDIter.prototype\n   * @type Number[]\n   */\n  public factors: number[];\n\n  constructor(x: NDArray | ArrayLike<any>) {\n    this.x = array(x);\n    const { shape, strides, length } = this.x;\n\n    this.length = length;\n    this.lengthm1 = length - 1;\n    this.nd = shape.length;\n    this.ndm1 = this.nd - 1;\n\n    this.shape = Array(V_MAXDIMS).fill(0);\n    this.strides = Array(V_MAXDIMS).fill(0);\n    this.shapem1 = Array(V_MAXDIMS).fill(0);\n    this.coords = Array(V_MAXDIMS).fill(0);\n    this.backstrides = Array(V_MAXDIMS).fill(0);\n    this.factors = Array(V_MAXDIMS).fill(0);\n\n    if (this.nd !== 0) {\n      this.factors[this.nd - 1] = 1;\n    }\n\n    let i;\n    for (i = 0; i < this.nd; i += 1) {\n      this.shape[i] = shape[i];\n      this.shapem1[i] = shape[i] - 1;\n      this.strides[i] = strides[i];\n      this.backstrides[i] = strides[i] * this.shapem1[i];\n      this.coords[i] = 0;\n\n      if (i > 0) {\n        this.factors[this.ndm1 - i] = this.factors[this.nd - i] * shape[this.nd - i];\n      }\n    }\n\n    this.index = 0;\n    this.pos = 0;\n  }\n\n  /**\n   * @function done\n   * @memberof NDIter.prototype\n   * @description Returns true if the iterator is done, false otherwise\n   * @returns {Boolean}\n   * @example\n   * import { array } from 'vectorious/core/array';\n   * import { NDIter } from 'vectorious/iterator';\n   *\n   * const iter = new NDIter(array([1, 2, 3]));\n   * iter.done(); // false\n   */\n  done() {\n    return this.index > this.lengthm1;\n  }\n\n  /**\n   * @function current\n   * @memberof NDIter.prototype\n   * @description Returns the current element of the iterator\n   * @returns {Object} current\n   * @returns {Number} [current.value]\n   * @returns {Boolean} current.done\n   * @example\n   * import { array } from 'vectorious/core/array';\n   * import { NDIter } from 'vectorious/iterator';\n   *\n   * const iter = new NDIter(array([1, 2, 3]));\n   * iter.current(); // { value: 1, done: false }\n   */\n  current(): IteratorResult<number[] | any> {\n    const done = this.done();\n    return {\n      value: done ? undefined : this.pos,\n      done,\n    };\n  }\n\n  /**\n   * @function next\n   * @memberof NDIter.prototype\n   * @description\n   * Steps to the next position in the iterator.\n   * Returns the current index of the iterator, or undefined if done.\n   * @returns {Object}\n   * @example\n   * import { array } from 'vectorious/core/array';\n   * import { NDIter } from 'vectorious/iterator';\n   *\n   * const iter = new NDIter(array([1, 2, 3]));\n   * iter.next(); // { value: 2, done: false }\n   * iter.next(); // { value: 3, done: false }\n   * iter.next(); // { done: true }\n   */\n  next() {\n    const current = this.current();\n    if (current.done) {\n      return current;\n    }\n\n    const { ndm1, shapem1, strides, backstrides } = this;\n\n    let i;\n    for (i = ndm1; i >= 0; i -= 1) {\n      if (this.coords[i] < shapem1[i]) {\n        this.coords[i] += 1;\n        this.pos += strides[i];\n        break;\n      }\n\n      this.coords[i] = 0;\n      this.pos -= backstrides[i];\n    }\n\n    this.index += 1;\n    return current;\n  }\n\n  [Symbol.iterator]() {\n    return this;\n  }\n}\n", "import { NDArray } from '..';\nimport { NDIter } from './single';\n\n/**\n * @class NDMultiIter\n * @description Constructs an NDMultiIter instance.\n * @param {NDArray[]} ...args\n */\nexport class NDMultiIter implements Iterator<number[]> {\n  /**\n   * @name iters\n   * @memberof NDMultiIter.prototype\n   * @type NDIter[]\n   */\n  public iters: NDIter[];\n\n  /**\n   * @name shape\n   * @memberof NDMultiIter.prototype\n   * @type Number[]\n   */\n  public shape: number[];\n\n  /**\n   * @name nd\n   * @memberof NDMultiIter.prototype\n   * @type Number\n   */\n  public nd: number;\n\n  /**\n   * @name length\n   * @memberof NDMultiIter.prototype\n   * @type Number\n   */\n  public length: number;\n\n  /**\n   * @name lengthm1\n   * @memberof NDMultiIter.prototype\n   * @type Number\n   */\n  public lengthm1: number;\n\n  /**\n   * @name numiter\n   * @memberof NDMultiIter.prototype\n   * @type Number\n   */\n  public numiter: number;\n\n  /**\n   * @name index\n   * @memberof NDMultiIter.prototype\n   * @type Number\n   */\n  public index: number;\n\n  /**\n   * @name pos\n   * @memberof NDMultiIter.prototype\n   * @type Number[]\n   */\n  public pos: number[];\n\n  constructor(...args: (NDArray | ArrayLike<any>)[]) {\n    this.iters = args.map((arg) => new NDIter(arg));\n    this.numiter = args.length;\n\n    let i;\n    let nd;\n    for (i = 0, nd = 0; i < this.numiter; i += 1) {\n      nd = Math.max(nd, this.iters[i].x.shape.length);\n    }\n\n    this.nd = nd;\n    this.shape = Array(nd).fill(0);\n\n    let it;\n    let j;\n    let k;\n    let tmp;\n    for (i = 0; i < nd; i += 1) {\n      this.shape[i] = 1;\n      for (j = 0; j < this.numiter; j += 1) {\n        it = this.iters[j];\n        k = i + it.x.shape.length - nd;\n        if (k >= 0) {\n          tmp = it.x.shape[k];\n          if (tmp == 1) {\n            continue;\n          }\n          if (this.shape[i] == 1) {\n            this.shape[i] = tmp;\n          } else if (this.shape[i] !== tmp) {\n            throw new Error('shape mismatch');\n          }\n        }\n      }\n    }\n\n    tmp = this.shape.reduce((acc, dim) => acc * dim, 1);\n\n    this.length = tmp;\n    this.lengthm1 = tmp - 1;\n\n    for (i = 0; i < this.numiter; i += 1) {\n      it = this.iters[i];\n      it.nd = this.nd;\n      it.ndm1 = this.nd - 1;\n      it.length = tmp;\n      it.lengthm1 = tmp - 1;\n\n      nd = it.x.shape.length;\n      if (nd !== 0) {\n        it.factors[this.nd - 1] = 1;\n      }\n\n      for (j = 0; j < this.nd; j += 1) {\n        it.shape[j] = this.shape[j];\n        it.shapem1[j] = this.shape[j] - 1;\n        k = j + nd - this.nd;\n\n        if (k < 0 || it.x.shape[k] !== this.shape[j]) {\n          it.strides[j] = 0;\n        } else {\n          it.strides[j] = it.x.strides[k];\n        }\n\n        it.backstrides[j] = it.strides[j] * it.shapem1[j];\n\n        if (j > 0) {\n          it.factors[this.nd - j - 1] = it.factors[this.nd - j] * this.shape[this.nd - j];\n        }\n      }\n    }\n\n    this.index = 0;\n    this.pos = Array(this.numiter).fill(0);\n  }\n\n  /**\n   * @function done\n   * @memberof NDMultiIter\n   * @description Returns true if the iterator is done, false otherwise\n   * @returns {Boolean}\n   * @example\n   * import { array } from 'vectorious/core/array';\n   * import { NDMultiIter } from 'vectorious/iterator';\n   *\n   * const iter = new NDMultiIter(array([1, 2, 3]), array([4, 5, 6]));\n   * iter.done(); // false\n   */\n  done() {\n    return this.index > this.lengthm1;\n  }\n\n  /**\n   * @function current\n   * @memberof NDMultiIter\n   * @description Returns the current indices of the iterators\n   * @returns {Object} current\n   * @returns {Number[]} [current.value]\n   * @returns {Boolean} current.done\n   * @example\n   * import { array } from 'vectorious/core/array';\n   * import { NDMultiIter } from 'vectorious/iterator';\n   *\n   * const iter = new NDMultiIter(array([1, 2, 3]), array([4, 5, 6]));\n   * iter.current(); // { value: [0, 0], done: false }\n   */\n  current(): IteratorResult<number[] | any> {\n    const done = this.done();\n    return {\n      value: done ? undefined : this.pos,\n      done,\n    };\n  }\n\n  /**\n   * @function next\n   * @memberof NDMultiIter\n   * @description\n   * Steps to the next position in the iterator.\n   * Returns the current indices of the iterators, or undefined if done.\n   * @returns {Object} current\n   * @returns {Number[]} [current.value]\n   * @returns {Boolean} current.done\n   * @example\n   * import { array } from 'vectorious/core/array';\n   * import { NDMultiIter } from 'vectorious/iterator';\n   *\n   * const iter = new NDMultiIter(array([1, 2, 3]), array([4, 5, 6]));\n   * iter.next(); // { value: [0, 0], done: false }\n   * iter.next(); // { value: [1, 1], done: false }\n   * iter.next(); // { value: [2, 2], done: false },\n   * iter.next(); // { value: undefined, done: true },\n   */\n  next() {\n    const current = this.current();\n    if (current.done) {\n      return current;\n    }\n\n    this.index += 1;\n\n    const { numiter } = this;\n\n    let it;\n    let i;\n    for (i = 0; i < numiter; i += 1) {\n      it = this.iters[i];\n      this.pos[i] = it.pos;\n      it.next();\n    }\n\n    return current;\n  }\n\n  [Symbol.iterator]() {\n    return this;\n  }\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { abs: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function abs\n * @description Returns the absolute value of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { abs } from 'vectorious/core/abs';\n *\n * abs([-1, -2, -3]) // => array([1, 2, 3])\n */\nexport const abs = (x: NDArray | ArrayLike<any>): NDArray => array(x).abs();\n\n/**\n * @function abs\n * @memberof NDArray.prototype\n * @description Returns the absolute value of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([-1, -2, -3]).abs() // <=> array([1, 2, 3])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { acos: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function acos\n * @description Returns the arccosine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { acos } from 'vectorious/core/acos';\n *\n * acos([-1, 0, 1]); // => array([3.141592653589793, 1.5707963267948966, 0])\n */\nexport const acos = (x: NDArray | ArrayLike<any>): NDArray => array(x).acos();\n\n/**\n * @function acos\n * @memberof NDArray.prototype\n * @description Returns the arccosine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([-1, 0, 1]).acos(); // <=> array([3.141592653589793, 1.5707963267948966, 0])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { acosh: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function acosh\n * @description Returns the hyperbolic arccosine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { acosh } from 'vectorious/core/acosh';\n *\n * acosh([1, 2, 3]); // => array([0, 1.316957950592041, 1.7627471685409546])\n */\nexport const acosh = (x: NDArray | ArrayLike<any>): NDArray => array(x).acosh();\n\n/**\n * @function acosh\n * @memberof NDArray.prototype\n * @description Returns the hyperbolic arccosine of each element of current array.\n * @param {NDArray} x\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).acosh(); // <=> array([0, 1.316957950592041, 1.7627471685409546])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { TypedArray, DType } from './types';\n\nlet nblas: any;\ntry {\n  nblas = require('nblas');\n} catch (err) {}\n\nexport const NoTrans = nblas && nblas.NoTrans;\nexport const Trans = nblas && nblas.Trans;\n\nexport function axpy(\n  dtype: DType,\n  n: number,\n  alpha: number,\n  x: TypedArray,\n  inc_x: number,\n  y: TypedArray,\n  inc_y: number\n) {\n  if (x.length / inc_x !== n || y.length / inc_y !== n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nblas.daxpy(n, alpha, x, inc_x, y, inc_y);\n    case 'float32':\n      return nblas.saxpy(n, alpha, x, inc_x, y, inc_y);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function dot(\n  dtype: DType,\n  n: number,\n  x: TypedArray,\n  inc_x: number,\n  y: TypedArray,\n  inc_y: number\n) {\n  if (x.length / inc_x !== n || y.length / inc_y !== n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nblas.ddot(n, x, inc_x, y, inc_y);\n    case 'float32':\n      return nblas.sdot(n, x, inc_x, y, inc_y);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function iamax(dtype: DType, n: number, x: TypedArray, inc_x: number) {\n  if (x.length / inc_x !== n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nblas.idamax(n, x, inc_x);\n    case 'float32':\n      return nblas.isamax(n, x, inc_x);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function gemm(\n  dtype: DType,\n  transx: number,\n  transy: number,\n  m: number,\n  n: number,\n  k: number,\n  alpha: number,\n  x: TypedArray,\n  ldx: number,\n  y: TypedArray,\n  ldy: number,\n  beta: number,\n  z: TypedArray,\n  ldz: number\n) {\n  const { length: l1 } = x;\n  const { length: l2 } = y;\n  const { length: l3 } = z;\n\n  if ((transx === nblas.NoTrans && l1 !== ldx * m) || (transx === nblas.Trans && l1 !== ldx * k)) {\n    throw new Error('lengths do not match');\n  }\n\n  if ((transy === nblas.NoTrans && l2 !== ldy * k) || (transy === nblas.Trans && l2 !== ldy * n)) {\n    throw new Error('lengths do not match');\n  }\n\n  if (l3 !== ldz * m) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nblas.dgemm(transx, transy, m, n, k, alpha, x, ldx, y, ldy, beta, z, ldz);\n    case 'float32':\n      return nblas.sgemm(transx, transy, m, n, k, alpha, x, ldx, y, ldy, beta, z, ldz);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function nrm2(dtype: DType, n: number, x: TypedArray, inc_x: number) {\n  if (x.length / inc_x !== n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nblas.dnrm2(n, x, inc_x);\n    case 'float32':\n      return nblas.snrm2(n, x, inc_x);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function scal(dtype: DType, n: number, alpha: number, x: TypedArray, inc_x: number) {\n  if (x.length / inc_x !== n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nblas.dscal(n, alpha, x, inc_x);\n    case 'float32':\n      return nblas.sscal(n, alpha, x, inc_x);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n", "import { NDArray } from './';\nimport { NDMultiIter } from '../iterators';\nimport { array } from './array';\nimport * as blas from '../blas';\n\n/**\n * @static\n * @memberof module:Globals\n * @function add\n * @description\n * Adds `y` multiplied by `alpha` to `x`.\n * Accelerated with BLAS `?axpy`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @param {Number} [1] alpha\n * @returns {NDArray}\n * @example\n * import { add } from 'vectorious/core/add';\n *\n * add([1, 2, 3], [4, 5, 6]); // => array([5, 7, 9])\n */\nexport const add = (\n  x: NDArray | ArrayLike<any>,\n  y: NDArray | ArrayLike<any>,\n  alpha: number = 1\n): NDArray => array(x).add(array(y), alpha);\n\n/**\n * @function add\n * @memberof NDArray.prototype\n * @description\n * Adds `x` multiplied by `alpha` to the current array.\n * Accelerated with BLAS `?axpy`.\n * @param {NDArray} x\n * @param {Number} [1] alpha\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).add([4, 5, 6]); // <=> array([5, 7, 9])\n */\nexport default function (this: NDArray, x: NDArray | ArrayLike<any>, alpha: number = 1): NDArray {\n  const { data: d1, length: l1, strides: st1, dtype } = this;\n  const { data: d2, strides: st2 } = array(x);\n\n  try {\n    const inc_x = st2[st2.length - 1];\n    const inc_y = st1[st1.length - 1];\n\n    if (inc_x !== inc_y) {\n      throw new Error('inc_x and inc_y must be equal');\n    }\n\n    blas.axpy(dtype, l1, alpha, d2, inc_x, d1, inc_y);\n  } catch (err) {\n    const iter = new NDMultiIter(this, x);\n\n    for (const [i, j] of iter) {\n      d1[i] += alpha * d2[j];\n    }\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\nconst { acos: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function angle\n * @description Determines the angle between the `x` and `y`\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {number}\n * @example\n * import { angle } from 'vectorious/core/angle';\n *\n * angle([1, 2, 3], [4, 5, 6]); // => 0.22572622788897287\n */\nexport const angle = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): number =>\n  array(x).angle(array(y));\n\n/**\n * @function angle\n * @memberof NDArray.prototype\n * @description Determines the angle between the current vector and `x`.\n * @param {NDArray} x\n * @returns {number}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).angle([4, 5, 6]); // <=> 0.22572622788897287\n */\nexport default function (this: NDArray, x: NDArray | ArrayLike<any>): number {\n  return f(this.dot(array(x)) / this.norm() / array(x).norm());\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { asin: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function asin\n * @description Returns the arcsine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { asin } from 'vectorious/core/asin';\n *\n * asin([-1, 0, 1]) // => array([-1.5707963705062866, 0, 1.5707963705062866])\n */\nexport const asin = (x: NDArray | ArrayLike<any>): NDArray => array(x).asin();\n\n/**\n * @function asin\n * @memberof NDArray.prototype\n * @description Returns the arcsine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([-1, 0, 1]).asin() // <=> array([-1.5707963705062866, 0, 1.5707963705062866])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { asinh: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function asinh\n * @description Returns the hyperbolic arcsine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { asinh } from 'vectorious/core/asinh';\n *\n * asinh([0, 1, 2]) // => array([0, 0.8813735842704773, 1.4436354637145996])\n */\nexport const asinh = (x: NDArray | ArrayLike<any>): NDArray => array(x).asinh();\n\n/**\n * @function asinh\n * @memberof NDArray.prototype\n * @description Returns the hyperbolic arcsine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([0, 1, 2]).asinh() // <=> array([0, 0.8813735842704773, 1.4436354637145996])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { atan: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function atan\n * @description Returns the arctangent of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { atan } from 'vectorious/core/atan';\n *\n * atan([1, 2, 3]); // => array([0.7853981852531433, 1.1071487665176392, 1.249045729637146])\n */\nexport const atan = (x: NDArray | ArrayLike<any>): NDArray => array(x).atan();\n\n/**\n * @function atan\n * @memberof NDArray.prototype\n * @description Returns the arctangent of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).atan() // <=> array([0.7853981852531433, 1.1071487665176392, 1.249045729637146])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { atanh: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function atanh\n * @description Returns the hyperbolic arctangent of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { atanh } from 'vectorious/core/atanh';\n *\n * atanh([0, -0.5]); // => array([0, -0.5493061542510986])\n */\nexport const atanh = (x: NDArray | ArrayLike<any>): NDArray => array(x).atanh();\n\n/**\n * @function atanh\n * @memberof NDArray.prototype\n * @description Returns the hyperbolic arctangent of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([0, -0.5]).atanh(); // <=> array([0, -0.5493061542510986])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function zeros\n * @description Creates an array containing zeros (`0`) of shape `shape`\n * @param {Number[]} ...shape\n * @returns {NDArray}\n * @example\n * import { zeros } from 'vectorious/core/zeros';\n *\n * zeros(3); // => array([0, 0, 0])\n */\nexport const zeros = (...shape: number[]): NDArray =>\n  new NDArray(new Float64Array(shape.reduce((sum: number, dim: number) => sum * dim, 1)), {\n    shape,\n  }).fill(0);\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { zeros } from './zeros';\n\n/**\n * @static\n * @memberof module:Globals\n * @function augment\n * @description Augments `x` and `y`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { augment } from 'vectorious/core/augment';\n *\n * augment([[1, 2], [3, 4]], [[1], [2]]); // => array([[1, 2, 1], [3, 4, 2]])\n */\nexport const augment = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).augment(array(y));\n\n/**\n * @function augment\n * @memberof NDArray.prototype\n * @description Augments `x` with current matrix.\n * @param {NDArray} x\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([[1, 2], [3, 4]]).augment(array([[1], [2]])); // <=> array([[1, 2, 1], [3, 4, 2]])\n */\nexport default function (this: NDArray, x: NDArray | ArrayLike<any>): NDArray {\n  const [r1, c1] = this.shape;\n  const [r2, c2] = array(x).shape;\n  const { data: d1 } = this;\n  const { data: d2 } = array(x);\n\n  if (r2 === 0 || c2 === 0) {\n    return this;\n  }\n\n  if (r1 !== r2) {\n    throw new Error('rows do not match');\n  }\n\n  const y = zeros(r1, c1 + c2);\n  const { data: d3 } = y;\n\n  let i: number;\n  let j: number;\n  for (i = 0; i < r1; i += 1) {\n    for (j = 0; j < c1; j += 1) {\n      d3[i * (c1 + c2) + j] = d1[i * c1 + j];\n    }\n  }\n\n  for (i = 0; i < r2; i += 1) {\n    for (j = 0; j < c2; j += 1) {\n      d3[i * (c1 + c2) + (j + c1)] = d2[i * c2 + j];\n    }\n  }\n\n  return y;\n}\n", "import { NDArray } from './';\nimport { NDMultiIter } from '../iterators';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function binOp\n * @description Perform binary operation `f` on `y` in `x`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { binOp } from 'vectorious/core/binOp';\n *\n * binOp([1, 2, 3], [4, 5, 6], (a, b) => a + b); // => array([[5, 7, 9])\n */\nexport const binOp = (\n  x: NDArray | ArrayLike<any>,\n  y: NDArray | ArrayLike<any>,\n  f: (a: number, b: number, index: number) => number\n): NDArray => array(x).binOp(array(y), f);\n\n/**\n * @function binOp\n * @memberof NDArray.prototype\n * @description Perform binary operation `f` on `x` in the current array.\n * @param {NDArray} x\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).binOp([4, 5, 6], (a, b) => a + b); // => array([[5, 7, 9])\n */\nexport default function (\n  this: NDArray,\n  x: NDArray | ArrayLike<any>,\n  f: (a: number, b: number, index: number) => number\n): NDArray {\n  const { data: d1 } = this;\n  const { data: d2 } = array(x);\n\n  const iter = new NDMultiIter(this, x);\n  for (const [i, j] of iter) {\n    d1[i] = f(d1[i], d2[j], i);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { cbrt: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function cbrt\n * @description Returns the cube root of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { cbrt } from 'vectorious/core/cbrt';\n *\n * cbrt([1, 8, 27]); // => array([1, 2, 3])\n */\nexport const cbrt = (x: NDArray | ArrayLike<any>): NDArray => array(x).cbrt();\n\n/**\n * @function cbrt\n * @memberof NDArray.prototype\n * @description Returns the cube root of each element of current array.\n * @returns {this}\n * @example\n * import { cbrt } from 'vectorious/core/cbrt';\n *\n * cbrt([1, 8, 27]); // => array([1, 2, 3])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { ceil: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function ceil\n * @description Returns smallest integer greater than or equal to of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { ceil } from 'vectorious/core/ceil';\n *\n * ceil([0.5, 1.5, 2.5]); // => array([1, 2, 3])\n */\nexport const ceil = (x: NDArray | ArrayLike<any>): NDArray => array(x).ceil();\n\n/**\n * @function ceil\n * @memberof NDArray.prototype\n * @description Returns smallest integer greater than or equal to of each element of current array.\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([0.5, 1.5, 2.5]).ceil(); // <=> array([1, 2, 3])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function check\n * @description Asserts if indices `i, j, ..., n` are within the bounds of `x`\n * @param {NDArray} x\n * @param {Number[]} ...indices\n * @throws {Error} index out of bounds\n * @example\n * import { check } from 'vectorious/core/check';\n *\n * check([0.5, 1.5, 2.5], 3); // Error: index out of bounds\n */\nexport const check = (x: NDArray | ArrayLike<any>, ...indices: number[]): void => {\n  array(x).check(...indices);\n};\n\n/**\n * @function check\n * @memberof NDArray.prototype\n * @description Asserts if indices `i, j, ..., n` are within the bounds of current array\n * @param {Number[]} ...indices\n * @throws {Error} index out of bounds\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([0.5, 1.5, 2.5]).check(3); // Error: index out of bounds\n */\nexport default function (this: NDArray, ...indices: number[]): void {\n  const { shape: s1, length: l1 } = this;\n\n  if (indices.length === 1) {\n    const [i] = indices;\n    if (i < 0 || i > l1 - 1 || !Number.isFinite(i)) {\n      throw new Error('index out of bounds');\n    }\n  } else if (\n    !s1.every(\n      (dim: number, i: number) => dim > indices[i] && Number.isFinite(indices[i]) && indices[i] >= 0\n    )\n  ) {\n    throw new Error('index out of bounds');\n  }\n}\n", "import { TypedArray } from '../types';\nimport { get_type } from '../util';\n\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function combine\n * @description Combines the vector `x` with `y`\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { combine } from 'vectorious/core/combine';\n *\n * combine([1, 2, 3], [4, 5, 6]); // => array([1, 2, 3, 4, 5, 6])\n */\nexport const combine = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).combine(array(y));\n\n/**\n * @function combine\n * @memberof NDArray.prototype\n * @description Combines the current vector with `x`\n * @param {NDArray} x\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).combine([4, 5, 6]); // => array([1, 2, 3, 4, 5, 6])\n */\nexport default function (this: NDArray, x: NDArray): NDArray {\n  if (this.shape.length !== 1 && x.shape.length !== 1) {\n    throw new Error('combine operation not permitted for multidimensional arrays');\n  }\n\n  const { length: l1, data: d1 } = this;\n  const { length: l2, data: d2 } = x;\n\n  if (l2 === 0) {\n    return this;\n  }\n\n  if (l1 === 0) {\n    this.data = new (get_type(x.dtype))(d2);\n    this.length = l2;\n    this.dtype = x.dtype;\n\n    return this;\n  }\n\n  const l3: number = l1 + l2;\n  const d3: TypedArray = new (get_type(this.dtype))(l3);\n\n  d3.set(d1);\n  d3.set(d2, l1);\n\n  this.data = d3;\n  this.length = l3;\n  this.shape = [l3];\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { zeros } from './zeros';\nimport { NDMultiIter } from '../iterators';\n\n/**\n * @static\n * @memberof module:Globals\n * @function copy\n * @description Makes a copy of `x`\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { copy } from 'vectorious/core/copy';\n *\n * copy([1, 2, 3]); // => array([1, 2, 3])\n */\nexport const copy = (x: NDArray | ArrayLike<any>): NDArray => array(x).copy();\n\n/**\n * @function copy\n * @memberof NDArray.prototype\n * @description Makes a copy of the class and underlying data\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).copy(); // => array([1, 2, 3])\n */\nexport default function (this: NDArray): NDArray {\n  const x = zeros(...this.shape);\n\n  const { data: d1 } = this;\n  const { data: d2 } = x;\n\n  const iter = new NDMultiIter(this, x);\n  for (const [i, j] of iter) {\n    d2[j] = d1[i];\n  }\n\n  return x;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { cos: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function cos\n * @description Returns the cosine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { cos } from 'vectorious/core/cos';\n *\n * cos([0, Math.PI / 2, Math.PI]); // => array([1, 0, -1])\n */\nexport const cos = (x: NDArray | ArrayLike<any>): NDArray => array(x).cos();\n\n/**\n * @function cos\n * @memberof NDArray.prototype\n * @description Returns the cosine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([0, Math.PI / 2, Math.PI]).cos(); // => array([1, 0, -1])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { cosh: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function cosh\n * @description Returns the hyperbolic cosine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { cosh } from 'vectorious/core/cosh';\n *\n * cosh([0, 1, 2]); // => array([1, 1.5430806875228882, 3.762195587158203])\n */\nexport const cosh = (x: NDArray | ArrayLike<any>): NDArray => array(x).cosh();\n\n/**\n * @function cosh\n * @memberof NDArray.prototype\n * @description Returns the hyperbolic cosine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([0, 1, 2]).cosh(); // => array([1, 1.5430806875228882, 3.762195587158203])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function cross\n * @description\n * Computes the cross product of the `x` and the vector `y`\n * This operation can only calculated for vectors with three components.\n * Otherwise it throws an exception.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { cross } from 'vectorious/core/cross';\n *\n * cross([1, 2, 3], [4, 5, 6]); // => array([-3, 6, -3])\n */\nexport const cross = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).cross(array(y));\n\n/**\n * @function cross\n * @memberof NDArray.prototype\n * @description\n * Computes the cross product of the current vector and the vector `x`\n * This operation can only calculated for vectors with three components.\n * Otherwise it throws an exception.\n * @param {NDArray} x\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).cross([4, 5, 6]); // <=> array([-3, 6, -3])\n */\nexport default function (this: NDArray, x: NDArray): NDArray {\n  const { length: l1 } = this;\n  const { length: l2 } = x;\n\n  if (l1 !== 3 || l2 !== 3) {\n    throw new Error('vectors must have three components');\n  }\n\n  const c1: number = this.y * x.z - this.z * x.y;\n  const c2: number = this.z * x.x - this.x * x.z;\n  const c3: number = this.x * x.y - this.y * x.x;\n\n  this.x = c1;\n  this.y = c2;\n  this.z = c3;\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function det\n * @description Gets the determinant of `x`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { det } from 'vectorious/core/det';\n *\n * det([[0, 1], [2, 3]]); // => -2\n */\nexport const det = (x: NDArray | ArrayLike<any>): number => array(x).det();\n\n/**\n * @function det\n * @memberof NDArray.prototype\n * @description Gets the determinant of current matrix using LU factorization.\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([[0, 1], [2, 3]]).det(); // => -2\n */\nexport default function (this: NDArray): number {\n  this.square();\n\n  const [n] = this.shape;\n  const [LU, ipiv] = this.copy().lu_factor();\n  const { data: d1 } = LU;\n\n  let product: number = 1;\n  let sign: number = 1;\n\n  let i: number;\n  for (i = 0; i < n; i += 1) {\n    product *= d1[i * n + i];\n    if (i !== ipiv[i] - 1) {\n      sign *= -1;\n    }\n  }\n\n  return sign * product;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function diagonal\n * @description Gets the diagonal of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { diagonal } from 'vectorious/core/diagonal';\n *\n * diagonal([[1, 2], [3, 4]]); // => array([1, 4])\n */\nexport const diagonal = (x: NDArray | ArrayLike<any>): NDArray => array(x).diagonal();\n\n/**\n * @function diagonal\n * @memberof NDArray.prototype\n * @description Gets the diagonal of current matrix.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).diagonal(); // => array([1, 4])\n */\nexport default function (this: NDArray): NDArray {\n  this.square();\n\n  const { length: l1 } = this;\n  const [r, c] = this.shape;\n  const l2: number = Math.min(r, c);\n\n  return this.reshape(l1).slice(0, l1, l2 + 1);\n}\n", "import { NDArray } from './';\nimport { NDMultiIter } from '../iterators';\nimport { array } from './array';\nimport * as blas from '../blas';\n\n/**\n * @static\n * @memberof module:Globals\n * @function dot\n * @description\n * Performs dot multiplication with `x` and `y`.\n * Accelerated with BLAS `?dot`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {Number}\n * @example\n * import { dot } from 'vectorious/core/dot';\n *\n * dot([1, 2, 3], [4, 5, 6]); // => 32\n */\nexport const dot = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): number =>\n  array(x).dot(array(y));\n\n/**\n * @function dot\n * @memberof NDArray.prototype\n * @description\n * Performs dot multiplication with `x` and current array\n * Accelerated with BLAS `?dot`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).dot([4, 5, 6]); // => 32\n */\nexport default function (this: NDArray, x: NDArray): number {\n  const { data: d1, length: l1, strides: st1, dtype } = this;\n  const { data: d2, strides: st2 } = x;\n\n  let result: number = 0;\n  try {\n    const inc_x = st2[st2.length - 1];\n    const inc_y = st1[st1.length - 1];\n\n    if (inc_x !== inc_y) {\n      throw new Error('inc_x and inc_y must be equal');\n    }\n\n    result = blas.dot(dtype, l1, d2, inc_x, d1, inc_y);\n  } catch (err) {\n    const iter = new NDMultiIter(this, x);\n\n    for (const [i, j] of iter) {\n      result += d1[i] * d2[j];\n    }\n  }\n\n  return result;\n}\n", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function eye\n * @description Creates an identity matrix of size `n` and type `type`.\n * @param {Number} n\n * @returns {NDArray}\n * @example\n * import { eye } from 'vectorious/core/eye';\n *\n * eye(2); // => array([[1, 0], [0, 1]])\n */\nexport const eye = (n: number): NDArray => {\n  const x = new NDArray(new Float64Array(n * n), { shape: [n, n] });\n  const { data: d1 } = x;\n\n  let i: number;\n  for (i = 0; i < n; i += 1) {\n    d1[i * n + i] = 1;\n  }\n\n  return x;\n};\n", "import { get_type } from '../util';\n\nimport { NDArray } from './';\nimport { array } from './array';\nimport { zeros } from './zeros';\nimport { eye } from './eye';\n\nlet nlapack: any;\ntry {\n  nlapack = require('nlapack');\n} catch (err) {}\n\n/**\n * @ignore\n *  \u250C   \u2510    \u250C     \u2510\u250C   \u2510\n *  \u2502Skl\u2502    \u2502c  \u2212s\u2502\u2502Skl\u2502\n *  \u2502   \u2502 := \u2502     \u2502\u2502   \u2502\n *  \u2502Sij\u2502    \u2502s   c\u2502\u2502Sij\u2502\n *  \u2514   \u2518    \u2514     \u2518\u2514   \u2518\n */\nconst rotate: (\n  x: NDArray,\n  c: number,\n  s: number,\n  k: number,\n  l: number,\n  i: number,\n  j: number\n) => void = (\n  x: NDArray,\n  c: number,\n  s: number,\n  k: number,\n  l: number,\n  i: number,\n  j: number\n): void => {\n  const [n] = x.shape;\n  const { data: d1 } = x;\n  const temp: number = d1[k * n + l];\n  const tau: number = 1 / (c + s);\n\n  d1[k * n + l] = temp - s * (d1[i * n + j] + tau * temp);\n  d1[i * n + j] += s * (temp - tau * d1[i * n + j]);\n};\n\n/**\n * @static\n * @memberof module:Globals\n * @function eig\n * @description\n * Gets eigenvalues and eigenvectors of `x` using the Jacobi method.\n * Accelerated with LAPACK `?geev`.\n * @param {NDArray} x\n * @returns {Array<NDArray>}\n * @example\n * import { eig } from 'vectorious/core/eig';\n *\n * eig([[1, 0, 0], [0, 2, 0], [0, 0, 3]]); // => [array([1, 2, 3]), array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])]\n */\nexport const eig = (x: NDArray | ArrayLike<any>): [NDArray, NDArray] => array(x).eig();\n\n/**\n * @function eig\n * @memberof NDArray.prototype\n * @description\n * Gets eigenvalues and eigenvectors of the current matrix using the Jacobi method.\n * Accelerated with LAPACK `?geev`.\n * @returns {Array<NDArray>}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([[1, 0, 0], [0, 2, 0], [0, 0, 3]]).eig(); // => [array([1, 2, 3]), array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])]\n */\nexport default function (this: NDArray): [NDArray, NDArray] {\n  this.square();\n\n  const [n] = this.shape;\n\n  try {\n    if (!['float32', 'float64'].includes(this.dtype)) {\n      this.dtype = 'float32';\n      this.data = get_type(this.dtype).from(this.data);\n    }\n\n    const jobvl: typeof nlapack.NDArrayEigenvector = nlapack.NoEigenvector;\n    const jobvr: typeof nlapack.NDArrayEigenvector = nlapack.Eigenvector;\n\n    const wr = zeros(n);\n    const wi = zeros(n);\n\n    const vl = zeros(n, n);\n    const vr = zeros(n, n);\n\n    const { data: d1 } = this;\n    const { data: d2 } = wr;\n    const { data: d3 } = wi;\n    const { data: d4 } = vl;\n    const { data: d5 } = vr;\n    if (this.dtype === 'float64') {\n      nlapack.dgeev(jobvl, jobvr, n, d1, n, d2, d3, d4, n, d5, n);\n    }\n\n    if (this.dtype === 'float32') {\n      nlapack.sgeev(jobvl, jobvr, n, d1, n, d2, d3, d4, n, d5, n);\n    }\n\n    return [wr, vr];\n  } catch (err) {\n    const { data: d1 } = this;\n    const p = eye(n);\n\n    let max = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n\n    do {\n      // Find maximum off-diagonal element\n      for (i = 0; i < n; i += 1) {\n        for (j = i + 1; j < n; j += 1) {\n          if (Math.abs(d1[i * n + j]) >= max) {\n            max = Math.abs(d1[i * n + j]);\n            k = i;\n            l = j;\n          }\n        }\n      }\n\n      // Find c and s\n      let t;\n      if (Math.abs(d1[k * n + l]) < Math.abs(d1[l * n + l]) * 1e-36) {\n        t = d1[k * n + l] / d1[l * n + l];\n      } else {\n        const phi = (d1[l * n + l] / 2) * d1[k * n + l];\n        t = 1 / (Math.abs(phi) + Math.sqrt(phi * phi + 1));\n      }\n\n      const c = 1 / Math.sqrt(t * t + 1);\n      const s = t * c;\n\n      const e = d1[k * n + l];\n      d1[k * n + l] = 0;\n      d1[k * n + k] -= t * e;\n      d1[l * n + l] += t * e;\n\n      // Rotate rows and columns k and l\n      for (i = 0; i < k; i += 1) {\n        rotate(this, c, s, i, k, i, l);\n      }\n\n      for (i = k + 1; i < l; i += 1) {\n        rotate(this, c, s, k, i, i, l);\n      }\n\n      for (i = l + 1; i < n; i += 1) {\n        rotate(this, c, s, k, i, l, i);\n      }\n\n      // Rotate eigenvectors\n      for (i = 0; i < n; i += 1) {\n        rotate(p, c, s, i, k, i, l);\n      }\n    } while (max >= 1e-9);\n\n    return [this.diagonal(), p];\n  }\n}\n", "import { NDArray } from './';\nimport { NDMultiIter } from '../iterators';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function equals\n * @description Checks if `x` and `y` are equal.\n * @param {NDArray} x\n * @param {NDArray} y\n * @param {Number} tolerance\n * @returns {Boolean}\n * @example\n * import { equals } from 'vectorious/core/equals';\n *\n * equals([1, 2, 3], [1, 2, 3]); // => true\n */\nexport const equals = (\n  x: NDArray | ArrayLike<any>,\n  y: NDArray | ArrayLike<any>,\n  tolerance: number = 1e-6\n): boolean => array(x).equals(array(y), tolerance);\n\n/**\n * @function equals\n * @memberof NDArray.prototype\n * @description Checks if current array and `x` are equal.\n * @param {NDArray} x\n * @param {Number} tolerance\n * @returns {Boolean}\n * @example\n * import { equals } from 'vectorious/core/equals';\n *\n * array([1, 2, 3]).equals([1, 2, 3]); // => true\n */\nexport default function (this: NDArray, x: NDArray, tolerance: number = 1e-6): boolean {\n  const { data: d1 } = this;\n  const { data: d2 } = x;\n\n  const iter = new NDMultiIter(this, x);\n\n  for (const [i, j] of iter) {\n    if (Math.abs(d1[i] - d2[j]) > tolerance) {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @deprecated\n * @static\n * @memberof module:Globals\n * @function equidimensional\n * @description Asserts if `x` and `y` have the same shape\n * @param {NDArray} x\n * @param {NDArray} y\n * @throws {Error} shapes x and y do not match\n * @example\n * import { equidimensional } from 'vectorious/core/equidimensional';\n *\n * equidimensional([1, 2, 3], [1, 2]); // Error: shapes 3 and 2 do not match\n */\nexport const equidimensional = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): void => {\n  array(x).equidimensional(array(y));\n};\n\n/**\n * @deprecated\n * @function equidimensional\n * @memberof NDArray.prototype\n * @description Asserts if current array and `x` have the same shape\n * @param {NDArray} x\n * @throws {Error} shapes x and y do not match\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).equidimensional([1, 2]); // Error: shapes 3 and 2 do not match\n */\nexport default function (this: NDArray, x: NDArray): void {\n  const { shape: s1 } = this;\n  const { shape: s2 } = x;\n\n  if (!s1.every((dim: number, i: number) => dim === s2[i])) {\n    throw new Error(`shapes ${s1} and ${s2} do not match`);\n  }\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @deprecated\n * @static\n * @memberof module:Globals\n * @function equilateral\n * @description Asserts if `x` and `y` have the same length\n * @param {NDArray} x\n * @param {NDArray} y\n * @throws {Error} lengths x and y do not match\n * @example\n * import { equilateral } from 'vectorious/core/equilateral';\n *\n * equilateral([1, 2, 3], [1, 2]); // Error: lengths 3 and 2 do not match\n */\nexport const equilateral = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): void => {\n  array(x).equilateral(array(y));\n};\n\n/**\n * @deprecated\n * @function equilateral\n * @memberof NDArray.prototype\n * @description Asserts if current array and `x` have the same length\n * @param {NDArray} x\n * @throws {Error} lengths x and y do not match\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).equilateral([1, 2]); // Error: lengths 3 and 2 do not match\n */\nexport default function (this: NDArray, x: NDArray): void {\n  const { length: l1 } = this;\n  const { length: l2 } = x;\n\n  if (l1 !== l2) {\n    throw new Error(`lengths ${l1} and ${l2} do not match`);\n  }\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { exp: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function exp\n * @description\n * Returns e^x of each element of `x`, where x is the argument,\n * and e is Euler's constant (2.718\u2026), the base of the natural logarithm.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { exp } from 'vectorious/core/exp';\n *\n * exp([1, 2, 3]); // => array([2.7182817459106445, 7.389056205749512, 20.08553695678711])\n */\nexport const exp = (x: NDArray | ArrayLike<any>): NDArray => array(x).exp();\n\n/**\n * @function exp\n * @memberof NDArray.prototype\n * @description\n * Returns e^x of each element of current array, where x is the argument,\n * and e is Euler's constant (2.718\u2026), the base of the natural logarithm.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).exp(); // <=> array([2.7182817459106445, 7.389056205749512, 20.08553695678711])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { expm1: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function expm1\n * @description Returns subtracting 1 from exp(x) of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { expm1 } from 'vectorious/core/expm1';\n *\n * expm1([1, 2, 3]); // => array([1.7182817459106445, 6.389056205749512, 19.08553695678711])\n */\nexport const expm1 = (x: NDArray | ArrayLike<any>): NDArray => array(x).expm1();\n\n/**\n * @function expm1\n * @memberof NDArray.prototype\n * @description Returns subtracting 1 from exp(x) of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).expm1(); // <=> array([1.7182817459106445, 6.389056205749512, 19.08553695678711])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\n/**\n * @static\n * @memberof module:Globals\n * @function fill\n * @description Fills `x` with a scalar value\n * @param {NDArray} x\n * @param {Number} value\n * @returns {NDArray}\n * @example\n * import { fill } from 'vectorious/core/fill';\n *\n * fill([1, 2, 3], 0); // => array([0, 0, 0])\n */\nexport const fill = (\n  x: NDArray | ArrayLike<any>,\n  value: number | ((index: number) => number) = 0\n): NDArray => array(x).fill(value);\n\n/**\n * @function fill\n * @memberof NDArray.prototype\n * @description Fills the current array with a scalar value\n * @param {Number} value\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).fill(0); // <=> array([0, 0, 0])\n */\nexport default function (this: NDArray, value: number | ((index: number) => number) = 0): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = value instanceof Function ? value(i) : value;\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { floor: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function floor\n * @description Returns the largest integer less than or equal to a number of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { floor } from 'vectorious/core/floor';\n *\n * floor([1.5, 2.5, 3.5]); // => array([1, 2, 3])\n */\nexport const floor = (x: NDArray | ArrayLike<any>): NDArray => array(x).floor();\n\n/**\n * @function floor\n * @memberof NDArray.prototype\n * @description Returns the largest integer less than or equal to a number of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1.5, 2.5, 3.5]).floor(); // <=> array([1, 2, 3])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { TypedArray } from '../types';\n\nimport { NDArray } from './';\nimport { NDIter } from '../iterators';\n\n/**\n * @static\n * @memberof module:Globals\n * @function forEach\n * @description Equivalent to `TypedArray.prototype.forEach`.\n * @param {NDArray} x\n * @param {Function} f\n * @example\n * import { forEach } from 'vectorious/core/forEach';\n *\n * forEach([1, 2, 3], console.log);\n * // 1 0 [ 1, 2, 3 ]\n * // 2 1 [ 1, 2, 3 ]\n * // 3 2 [ 1, 2, 3 ]\n */\nexport const forEach = (\n  x: NDArray,\n  f: (value: number, i: number, src: TypedArray) => void\n): void => {\n  x.forEach(f);\n};\n\n/**\n * @function forEach\n * @memberof NDArray.prototype\n * @description Equivalent to `TypedArray.prototype.forEach`.\n * @param {Function} f\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).forEach(console.log);\n * // 1 0 [ 1, 2, 3 ]\n * // 2 1 [ 1, 2, 3 ]\n * // 3 2 [ 1, 2, 3 ]\n */\nexport default function (\n  this: NDArray,\n  f: (value: number, i: number, src: TypedArray) => void\n): void {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    f.call(this, d1[i], i, d1);\n  }\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { fround: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function fround\n * @description Returns the nearest single precision float representation of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { fround } from 'vectorious/core/fround';\n *\n * fround([-5.05, 5.05]); // => array([-5.050000190734863, 5.050000190734863])\n */\nexport const fround = (x: NDArray | ArrayLike<any>): NDArray => array(x).fround();\n\n/**\n * @function fround\n * @memberof NDArray.prototype\n * @description Returns the nearest single precision float representation of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([-5.05, 5.05]).fround(); // <=> array([-5.050000190734863, 5.050000190734863])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function gauss\n * @description\n * Gauss-Jordan elimination (i.e. returns the reduced row echelon form) of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { gauss } from 'vectorious/core/gauss';\n *\n * gauss([[1, 2, 3], [4, 5, 6]]); // => array([[1, 0, -1], [-0, 1, 2]])\n */\nexport const gauss = (x: NDArray | ArrayLike<any>): NDArray => array(x).gauss();\n\n/**\n * @function gauss\n * @memberof NDArray.prototype\n * @description\n * Gauss-Jordan elimination (i.e. returns the reduced row echelon form) of the current matrix.\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([[1, 2, 3], [4, 5, 6]]).gauss(); // <=> array([[1, 0, -1], [-0, 1, 2]])\n */\nexport default function (this: NDArray): NDArray {\n  const {\n    shape: [r, c],\n    data: d1,\n  } = this;\n\n  let lead: number = 0;\n  let leadValue: number;\n  let pivot: number;\n\n  let i: number;\n  let j: number;\n  let k: number;\n  for (i = 0; i < r; i += 1) {\n    if (c <= lead) {\n      return this;\n    }\n\n    j = i;\n    while (d1[j * c + lead] === 0) {\n      j += 1;\n      if (r === j) {\n        j = i;\n        lead += 1;\n\n        if (c === lead) {\n          return this;\n        }\n      }\n    }\n\n    if (i !== j) {\n      this.swap(i, j);\n    }\n\n    pivot = d1[i * c + lead];\n    if (pivot !== 0) {\n      for (k = 0; k < c; k += 1) {\n        d1[i * c + k] /= pivot;\n      }\n    }\n\n    for (j = 0; j < r; j += 1) {\n      leadValue = d1[j * c + lead];\n      if (j !== i) {\n        for (k = 0; k < c; k += 1) {\n          d1[j * c + k] -= d1[i * c + k] * leadValue;\n        }\n      }\n    }\n\n    lead += 1;\n  }\n\n  for (i = 0; i < r; i += 1) {\n    pivot = 0;\n    for (j = 0; j < c; j += 1) {\n      if (pivot === 0) {\n        pivot = d1[i * c + j];\n      }\n    }\n\n    if (pivot !== 0) {\n      for (k = 0; k < c; k += 1) {\n        d1[i * c + k] /= pivot;\n      }\n    }\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function get\n * @description Gets the element at `i, j, ..., n` from `x`\n * @param {NDArray} x\n * @param {Number[]} ...indices\n * @returns {Number}\n * @example\n * import { get } from 'vectorious/core/get';\n *\n * get([1, 2, 3], 2); // 3\n */\nexport const get = (x: NDArray | ArrayLike<any>, ...indices: number[]): number =>\n  array(x).get(...indices);\n\n/**\n * @function get\n * @memberof NDArray.prototype\n * @description Gets the element at `i, j, ..., n` from current vector.\n * @param {Number[]} ...indices\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).get(2); // 3\n */\nexport default function (this: NDArray, ...indices: number[]): number {\n  this.check(...indices);\n\n  const { data: d1, shape: s1 } = this;\n  const { length: ndim } = s1;\n  let index = 0;\n\n  let i: number;\n  for (i = 0; i < ndim; i += 1) {\n    index *= s1[i];\n    index += indices[i];\n  }\n\n  return d1[index];\n}\n", "import { TypedArray, DType } from './types';\n\nlet nlapack: any;\ntry {\n  nlapack = require('nlapack');\n} catch (err) {}\n\nexport function getrf(\n  dtype: DType,\n  m: number,\n  n: number,\n  x: TypedArray,\n  ldx: number,\n  ipiv: Int32Array\n) {\n  if (x.length !== m * n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nlapack.dgetrf(m, n, x, ldx, ipiv);\n    case 'float32':\n      return nlapack.sgetrf(m, n, x, ldx, ipiv);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function getri(dtype: DType, n: number, x: TypedArray, ldx: number, ipiv: Int32Array) {\n  if (x.length !== n * n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nlapack.dgetri(n, x, ldx, ipiv);\n    case 'float32':\n      return nlapack.sgetri(n, x, ldx, ipiv);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function gesv(\n  dtype: DType,\n  n: number,\n  nrhs: number,\n  x: TypedArray,\n  ldx: number,\n  ipiv: Int32Array,\n  y: TypedArray,\n  ldy: number\n) {\n  if (x.length !== ldx * n || y.length !== ldy * nrhs) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nlapack.dgesv(n, nrhs, x, ldx, ipiv, y, ldy);\n    case 'float32':\n      return nlapack.sgesv(n, nrhs, x, ldx, ipiv, y, ldy);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n", "import { NDArray } from './';\nimport { NDIter } from '../iterators';\nimport { array } from './array';\nimport { eye } from './eye';\nimport { augment } from './augment';\nimport { zeros } from './zeros';\nimport * as lapack from '../lapack';\n\n/**\n * @static\n * @memberof module:Globals\n * @function inv\n * @description\n * Determines the inverse of `x`.\n * Accelerated with LAPACK `?getrf` and `?getri`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { inv } from 'vectorious/core/inv';\n *\n * inv([[2, -1, 0], [-1, 2, -1], [0, -1, 2]]); // => array([[0.75, 0.5, 0.25], [0.5, 1, 0.5], [0.25, 0.5, 0.75]])\n */\nexport const inv = (x: NDArray | ArrayLike<any>): NDArray => array(x).inv();\n\n/**\n * @function inv\n * @memberof NDArray.prototype\n * @description\n * Determines the inverse of current matrix using Gaussian elimination.\n * Accelerated with LAPACK `?getri`.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([[2, -1, 0], [-1, 2, -1], [0, -1, 2]]).inv(); // <=> array([[0.75, 0.5, 0.25], [0.5, 1, 0.5], [0.25, 0.5, 0.75]])\n */\nexport default function (this: NDArray): NDArray {\n  this.square();\n\n  const {\n    shape: [n],\n    dtype,\n  } = this;\n\n  try {\n    const { data: d1 } = this;\n    const ipiv = new Int32Array(n);\n\n    lapack.getrf(dtype, n, n, d1, n, ipiv);\n    lapack.getri(dtype, n, d1, n, ipiv);\n\n    return this;\n  } catch (err) {\n    const identity = eye(n);\n    const rref = augment(this, identity).gauss();\n    const left = zeros(n, n);\n    const right = zeros(n, n);\n\n    const { data: d1 } = rref;\n    const { data: d2 } = left;\n    const { data: d3 } = right;\n\n    const iter = new NDIter(rref);\n    let [ci, cj] = iter.coords;\n    for (const i of iter) {\n      if (cj < n) {\n        d2[ci * n + cj] = d1[i];\n      } else {\n        d3[ci * n + (cj - n)] = d1[i];\n      }\n\n      [ci, cj] = iter.coords;\n    }\n\n    if (!left.equals(identity)) {\n      throw new Error('matrix is not invertible');\n    }\n\n    return right;\n  }\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { log: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function log\n * @description Returns the natural logarithm (log_e, also ln) of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { log } from 'vectorious/core/log';\n *\n * log([1, 2, 3]); // => array([0, 0.6931471824645996, 1.0986123085021973])\n */\nexport const log = (x: NDArray | ArrayLike<any>): NDArray => array(x).log();\n\n/**\n * @function log\n * @memberof NDArray.prototype\n * @description Returns the natural logarithm (log_e, also ln) of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).log(); // <=> array([0, 0.6931471824645996, 1.0986123085021973])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { log10: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function log10\n * @description Returns the base 10 logarithm of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { log10 } from 'vectorious/core/log10';\n *\n * log10([10, 100, 1000]); // => array([1, 2, 3])\n */\nexport const log10 = (x: NDArray | ArrayLike<any>): NDArray => array(x).log10();\n\n/**\n * @function log10\n * @memberof NDArray.prototype\n * @description Returns the base 10 logarithm of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([10, 100, 1000]).log10(); // <=> array([1, 2, 3])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { log1p: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function log1p\n * @description Returns the natural logarithm (log_e, also ln) of 1 + x for each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { log1p } from 'vectorious/core/log1p';\n *\n * log1p([1, 2, 3]); // => array([0.6931471824645996, 1.0986123085021973, 1.3862943649291992])\n */\nexport const log1p = (x: NDArray | ArrayLike<any>): NDArray => array(x).log1p();\n\n/**\n * @function log1p\n * @memberof NDArray.prototype\n * @description Returns the natural logarithm (log_e, also ln) of 1 + x for each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]); // <=> array([0.6931471824645996, 1.0986123085021973, 1.3862943649291992])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { log2: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function log2\n * @description Returns the base 2 logarithm of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { log2 } from 'vectorious/core/log2';\n *\n * log2([1, 2, 4]); // => array([0, 1, 2])\n */\nexport const log2 = (x: NDArray | ArrayLike<any>): NDArray => array(x).log2();\n\n/**\n * @function log2\n * @memberof NDArray.prototype\n * @description Returns the base 2 logarithm of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 4]).log2(); // => array([0, 1, 2])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { NDIter } from '../iterators';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function lu\n * @description\n * Performs full LU decomposition on `x`.\n * Accelerated with LAPACK `?getrf`.\n * @param {NDArray} x\n * @returns {Array<NDArray, Int32Array>}\n * @example\n * import { lu } from 'vectorious/core/lu';\n *\n * lu([[1, 3, 5], [2, 4, 7], [1, 1, 0]]); // => [array([[1, 0, 0], [0.5, 1, 0], [0.5, -1, 1]]), array([[2, 4, 7], [0, 1, 1.5], [0, 0, -2]]), Int32Array([2, 2, 3])]\n */\nexport const lu = (x: NDArray | ArrayLike<any>): [NDArray, NDArray, Int32Array] => array(x).lu();\n\n/**\n * @function lu\n * @memberof NDArray.prototype\n * @description\n * Performs full LU decomposition on current matrix.\n * Accelerated with LAPACK `?getrf`.\n * @returns {Array<NDArray|Int32Array>}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([[1, 3, 5], [2, 4, 7], [1, 1, 0]]).lu(); // => [array([[1, 0, 0], [0.5, 1, 0], [0.5, -1, 1]]), array([[2, 4, 7], [0, 1, 1.5], [0, 0, -2]]), Int32Array([2, 2, 3])]\n */\nexport default function (this: NDArray): [NDArray, NDArray, Int32Array] {\n  const [LU, ipiv] = this.copy().lu_factor();\n  const L = LU.copy();\n  const U = LU.copy();\n  const { data: d1 } = L;\n  const { data: d2 } = U;\n\n  const iter = new NDIter(LU);\n\n  let [ci, cj] = iter.coords;\n  for (const i of iter) {\n    if (cj < ci) {\n      d2[i] = 0;\n    } else {\n      d1[i] = ci === cj ? 1 : 0;\n    }\n\n    [ci, cj] = iter.coords;\n  }\n\n  return [L, U, ipiv];\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport * as lapack from '../lapack';\n\n/**\n * @static\n * @memberof module:Globals\n * @function lu_factor\n * @description\n * Performs LU factorization on `x`.\n * Accelerated with LAPACK `?getrf`.\n * @param {NDArray} x\n * @returns {Array<NDArray|Int32Array>}\n * @example\n * import { lu_factor } from 'vectorious/core/lu_factor';\n *\n * lu_factor([[1, 3, 5], [2, 4, 7], [1, 1, 0]]); // => [array([[2, 4, 7], [0.5, 1, 1.5], [0.5, -1, -2]]), Int32Array([2, 2, 3])]\n */\nexport const lu_factor = (x: NDArray | ArrayLike<any>): [NDArray, Int32Array] =>\n  array(x).lu_factor();\n\n/**\n * @function lu_factor\n * @memberof NDArray.prototype\n * @description\n * Performs LU factorization on current matrix.\n * Accelerated with LAPACK `?getrf`.\n * @returns {Array<NDArray|Int32Array>}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([[1, 3, 5], [2, 4, 7], [1, 1, 0]]).lu_factor(); // <=> [array([[2, 4, 7], [0.5, 1, 1.5], [0.5, -1, -2]]), Int32Array([2, 2, 3])]\n */\nexport default function (this: NDArray): [NDArray, Int32Array] {\n  const {\n    data: d1,\n    shape: [n],\n    dtype,\n  } = this;\n  const ipiv: Int32Array = new Int32Array(n);\n\n  try {\n    lapack.getrf(dtype, n, n, d1, n, ipiv);\n  } catch (err) {\n    let max: number;\n    let abs: number;\n    let diag: number;\n    let p: number;\n\n    let i: number;\n    let j: number;\n    let k: number;\n    for (k = 0; k < n; k += 1) {\n      p = k;\n      max = Math.abs(d1[k * n + k]);\n      for (j = k + 1; j < n; j += 1) {\n        abs = Math.abs(d1[j * n + k]);\n        if (max < abs) {\n          max = abs;\n          p = j;\n        }\n      }\n\n      ipiv[k] = p + 1;\n\n      if (p !== k) {\n        this.swap(k, p);\n      }\n\n      diag = d1[k * n + k];\n      for (i = k + 1; i < n; i += 1) {\n        d1[i * n + k] /= diag;\n      }\n\n      for (i = k + 1; i < n; i += 1) {\n        for (j = k + 1; j < n - 1; j += 2) {\n          d1[i * n + j] -= d1[i * n + k] * d1[k * n + j];\n          d1[i * n + j + 1] -= d1[i * n + k] * d1[k * n + j + 1];\n        }\n\n        if (j === n - 1) {\n          d1[i * n + j] -= d1[i * n + k] * d1[k * n + j];\n        }\n      }\n    }\n  }\n\n  return [this, ipiv];\n}\n", "import { TypedArray } from '../types';\n\nimport { NDArray } from './';\nimport { NDIter } from '../iterators';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function map\n * @description Equivalent to `TypedArray.prototype.map`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { map } from 'vectorious/core/map';\n *\n * map([1, 2, 3], value => -value); // => array([-1, -2, -3])\n */\nexport const map = (\n  x: NDArray | ArrayLike<any>,\n  f: (value: number, i: number, src: TypedArray) => number\n): NDArray => array(x).map(f);\n\n/**\n * @function map\n * @memberof NDArray.prototype\n * @description Equivalent to `TypedArray.prototype.map`.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).map(value => -value); // => array([-1, -2, -3])\n */\nexport default function (\n  this: NDArray,\n  f: (value: number, i: number, src: TypedArray) => number\n): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n  const map = f.bind(this);\n\n  const copy = this.copy();\n  const { data: d2 } = copy;\n\n  for (const i of iter) {\n    d2[i] = map(d1[i], i, d1);\n  }\n\n  return copy;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\nimport * as blas from '../blas';\n\n/**\n * @static\n * @memberof module:Globals\n * @function max\n * @description\n * Gets the maximum value (largest) element of `x`.\n * Accelerated with BLAS `i?amax`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { max } from 'vectorious/core/max';\n *\n * max([1, 2, 3]); // => 3\n */\nexport const max = (x: NDArray | ArrayLike<any>): number => array(x).max();\n\n/**\n * @function max\n * @memberof NDArray.prototype\n * @description\n * Gets the maximum value (smallest) element of current array.\n * Accelerated with BLAS `i?amax`.\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).max(); // => 3\n */\nexport default function (this: NDArray): number {\n  const { data: d1, length: l1, strides: st1, dtype } = this;\n  let max: number = Number.NEGATIVE_INFINITY;\n\n  try {\n    const inc_x = st1[st1.length - 1];\n\n    max = d1[blas.iamax(dtype, l1, d1, inc_x)];\n  } catch (err) {\n    const iter = new NDIter(this);\n\n    for (const i of iter) {\n      const value = d1[i];\n      if (max < value) {\n        max = value;\n      }\n    }\n  }\n\n  return max;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\n/**\n * @static\n * @memberof module:Globals\n * @function mean\n * @description Gets the arithmetic mean of `x`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { mean } from 'vectorious/core/mean';\n *\n * mean([1, 2, 3]); // => 2\n */\nexport const mean = (x: NDArray | ArrayLike<any>): number => array(x).mean();\n\n/**\n * @function mean\n * @memberof NDArray.prototype\n * @description Gets the arithmetic mean of current array.\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).mean(); // => 2\n */\nexport default function (this: NDArray): number {\n  const { data: d1, length: l1 } = this;\n  const iter = new NDIter(this);\n\n  let mean: number = 0;\n  for (const i of iter) {\n    mean += d1[i];\n  }\n\n  return mean / l1;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\n/**\n * @static\n * @memberof module:Globals\n * @function min\n * @description Gets the minimum value (smallest) element of `x`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { min } from 'vectorious/core/min';\n *\n * min([1, 2, 3]); // => 1\n */\nexport const min = (x: NDArray | ArrayLike<any>): number => array(x).min();\n\n/**\n * @function min\n * @memberof NDArray.prototype\n * @description Gets the minimum value (smallest) element of current array.\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).min(); // 1\n */\nexport default function (this: NDArray): number {\n  const { data: d1 } = this;\n\n  const iter = new NDIter(this);\n\n  let min: number = Number.POSITIVE_INFINITY;\n  for (const i of iter) {\n    const value = d1[i];\n    if (min > value) {\n      min = value;\n    }\n  }\n\n  return min;\n}\n", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function matrix\n * @description Creates a matrix of `r` rows and `c` columns.\n * @param {Number} r\n * @param {Number} c\n * @returns {NDArray}\n * @example\n * import { matrix } from 'vectorious/core/matrix';\n *\n * matrix(2, 2); // => array([[0, 0], [0, 0]])\n */\nexport const matrix = (r: number, c: number): NDArray =>\n  new NDArray(new Float64Array(r * c), { shape: [r, c] });\n", "import { NDArray } from './';\nimport { NDIter } from '../iterators';\nimport { array } from './array';\nimport { matrix } from './matrix';\nimport * as blas from '../blas';\n\n/**\n * @static\n * @memberof module:Globals\n * @function multiply\n * @description\n * Multiplies two matrices `x` and `y` of matching dimensions.\n * Accelerated with BLAS `?gemm`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { multiply } from 'vectorious/core/multiply';\n *\n * multiply([[1, 2]], [[1], [2]]); // => array([[5]])\n */\nexport const multiply = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).multiply(array(y));\n\n/**\n * @function multiply\n * @memberof NDArray.prototype\n * @description\n * Multiplies current matrix with `x`.\n * Accelerated with BLAS `?gemm`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([[1, 2]]).multiply([[1], [2]]); // <=> array([[5]])\n */\nexport default function (this: NDArray, x: NDArray): NDArray {\n  // TODO: compare strides instead of blind copy\n  const {\n    shape: [r1, c1],\n    data: d1,\n    dtype,\n  } = this.copy();\n  const {\n    shape: [r2, c2],\n    data: d2,\n  } = x.copy();\n\n  if (c1 !== r2) {\n    throw new Error('sizes do not match');\n  }\n\n  const y = matrix(r1, c2);\n  const { data: d3 } = y;\n\n  try {\n    blas.gemm(dtype, blas.NoTrans, blas.NoTrans, r1, c2, c1, 1, d1, c1, d2, c2, 0, d3, c2);\n  } catch (err) {\n    const iter = new NDIter(y);\n\n    let k;\n    let [ci, cj] = iter.coords;\n    for (const i of iter) {\n      let sum = 0;\n      for (k = 0; k < c1; k += 1) {\n        sum += d1[ci * c1 + k] * d2[k * c2 + cj];\n      }\n\n      d3[i] = sum;\n      [ci, cj] = iter.coords;\n    }\n  }\n\n  return y;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport * as blas from '../blas';\n\nconst { sqrt: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function norm\n * @description\n * Calculates the norm of current array (also called L2 norm or Euclidean length).\n * Accelerated with BLAS `?nrm2`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { norm } from 'vectorious/core/norm';\n *\n * norm([1, 2, 3]); // => 3.7416574954986572\n */\nexport const norm = (x: NDArray | ArrayLike<any>): number => array(x).norm();\n\n/**\n * @function norm\n * @memberof NDArray.prototype\n * @description\n * Calculates the norm of current array (also called L2 norm or Euclidean length).\n * Accelerated with BLAS `?nrm2`.\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).norm(); // => 3.7416574954986572\n */\nexport default function (this: NDArray): number {\n  const { data: d1, length: l1, strides: st1, dtype } = this;\n  let result: number = 0;\n\n  try {\n    const inc_x = st1[st1.length - 1];\n\n    result = blas.nrm2(dtype, l1, d1, inc_x);\n  } catch (err) {\n    result = f(this.dot(this));\n  }\n\n  return result;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function normalize\n * @description Normalizes `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { normalize } from 'vectorious/core/normalize';\n *\n * normalize([1, 2, 3]); // => array([0.26726123690605164, 0.5345224738121033, 0.8017836809158325])\n */\nexport const normalize = (x: NDArray | ArrayLike<any>): NDArray => array(x).normalize();\n\n/**\n * @function normalize\n * @memberof NDArray.prototype\n * @description Normalizes current vector.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).normalize(); // => array([0.26726123690605164, 0.5345224738121033, 0.8017836809158325])\n */\nexport default function (this: NDArray): NDArray {\n  return this.scale(1 / this.norm());\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { pow: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function pow\n * @description Returns each element of `x` to the exponent power, that is, element^exponent.\n * @param {NDArray} x\n * @param {Number} exponent\n * @returns {NDArray}\n * @example\n * import { pow } from 'vectorious/core/pow';\n *\n * pow([1, 2, 3], 2); // => array([1, 4, 9])\n */\nexport const pow = (x: NDArray | ArrayLike<any>, exponent: number): NDArray =>\n  array(x).pow(exponent);\n\n/**\n * @function pow\n * @memberof NDArray.prototype\n * @description Returns each element of current array to the exponent power, that is, element^exponent.\n * @param {Number} exponent\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).pow(2); // <=> array([1, 4, 9])\n */\nexport default function (this: NDArray, exponent: number): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i], exponent);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\n/**\n * @static\n * @memberof module:Globals\n * @function prod\n * @description Product of all elements of `x`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { prod } from 'vectorious/core/prod';\n *\n * prod([1, 2, 3]); // => 6\n */\nexport const prod = (x: NDArray | ArrayLike<any>): number => array(x).prod();\n\n/**\n * @function prod\n * @memberof NDArray.prototype\n * @description Product of all elements of current array\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).prod(); // => 6\n */\nexport default function (this: NDArray): number {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  let prod: number = 1;\n  for (const i of iter) {\n    prod *= d1[i];\n  }\n\n  return prod;\n}\n", "import { NDArray } from './';\nimport { NDMultiIter } from '../iterators';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function product\n * @description Hadamard product of `x` and `y`\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { product } from 'vectorious/core/product';\n *\n * product([1, 2, 3], [4, 5, 6]); // => array([4, 10, 18])\n */\nexport const product = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).product(array(y));\n\n/**\n * @function product\n * @memberof NDArray.prototype\n * @description Hadamard product of current matrix and `x`\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).product([4, 5, 6]); // <=> array([4, 10, 18])\n */\nexport default function (this: NDArray, x: NDArray): NDArray {\n  const { data: d1 } = this;\n  const { data: d2 } = x;\n\n  const iter = new NDMultiIter(this, x);\n  for (const [i, j] of iter) {\n    d1[i] *= d2[j!];\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function project\n * @description Projects the `y` onto `x` using the projection formula `(y * (x * y / y * y))`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { project } from 'vectorious/core/project';\n *\n * project([1, 2, 3], [4, 5, 6]); // => array([1.6623376607894897, 2.0779221057891846, 2.49350643157959])\n */\nexport const project = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).project(array(y));\n\n/**\n * @function project\n * @memberof NDArray.prototype\n * @description Projects the current vector onto `x` using the projection formula `(y * (x * y / y * y))`.\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).project([4, 5, 6]); // <=> array([1.6623376607894897, 2.0779221057891846, 2.49350643157959])\n */\nexport default function (this: NDArray, x: NDArray): NDArray {\n  return x.scale(this.dot(x) / x.dot(x));\n}\n", "import { TypedArray } from '../types';\nimport { get_type } from '../util';\n\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function push\n * @description Pushes a new `value` into `x`.\n * @param {NDArray} x\n * @param {Number} value\n * @returns {NDArray}\n * @example\n * import { push } from 'vectorious/core/push';\n *\n * push([1, 2, 3], 4); // => array([1, 2, 3, 4])\n */\nexport const push = (x: NDArray | ArrayLike<any>, value: number): NDArray => array(x).push(value);\n\n/**\n * @function push\n * @memberof NDArray.prototype\n * @description Pushes a new `value` into current vector.\n * @param {Number} value\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).push(4); // => array([1, 2, 3, 4])\n */\nexport default function (this: NDArray, value: number): NDArray {\n  if (this.shape.length !== 1) {\n    throw new Error('push operation not permitted for multidimensional arrays');\n  }\n\n  const { data: d1, length: l1 } = this;\n  const l2: number = l1 + 1;\n  const d2: TypedArray = new (get_type(this.dtype))(l2);\n\n  d2.set(d1);\n  d2[l1] = value;\n\n  this.data = d2;\n  this.length = l2;\n  this.shape = [l2];\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { NDIter } from '../iterators';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function rank\n * @description Finds the rank of `x` using gaussian elimination.\n * @param {NDArray} x\n * @param {Number} tolerance\n * @returns {Number}\n * @example\n * import { rank } from 'vectorious/core/rank';\n *\n * rank([[1, 1, 1], [2, 2, 2], [3, 3, 3]]); // => 1\n */\nexport const rank = (x: NDArray | ArrayLike<any>, tolerance: number = 1e-6): number =>\n  array(x).rank(tolerance);\n\n/**\n * @function rank\n * @memberof NDArray.prototype\n * @description Finds the rank of current matrix using gaussian elimination.\n * @param {Number} tolerance\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([[1, 1, 1], [2, 2, 2], [3, 3, 3]]).rank(); // => 1\n * @todo Switch to SVD algorithm\n */\nexport default function (this: NDArray, tolerance: number = 1e-6): number {\n  const { data: d1 } = this.copy().gauss();\n\n  const iter = new NDIter(this);\n\n  let rk: number = 0;\n  let [ci, cj] = iter.coords;\n  for (const i of iter) {\n    if (rk <= ci && cj >= ci && Math.abs(d1[i]) > tolerance) {\n      rk += 1;\n    }\n\n    [ci, cj] = iter.coords;\n  }\n\n  return rk;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\n/**\n * @static\n * @memberof module:Globals\n * @function reciprocal\n * @description Gets the element-wise reciprocal of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { reciprocal } from 'vectorious/core/reciprocal';\n *\n * reciprocal([1, 2, 3]); // => array([1, 0.5, 0.3333333432674408])\n */\nexport const reciprocal = (x: NDArray | ArrayLike<any>): NDArray => array(x).reciprocal();\n\n/**\n * @function reciprocal\n * @memberof NDArray.prototype\n * @description Gets the element-wise reciprocal of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]); // => array([1, 0.5, 0.3333333432674408])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = 1 / d1[i];\n  }\n\n  return this;\n}\n", "import { TypedArray } from '../types';\n\nimport { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\n/**\n * @static\n * @memberof module:Globals\n * @function reduce\n * @description Equivalent to `TypedArray.prototype.reduce`.\n * @param {NDArray} x\n * @param {Function} f\n * @param {Number} initialValue\n * @returns {Number}\n * @example\n * import { reduce } from 'vectorious/core/reduce';\n *\n * reduce([1, 2, 3], (a, b) => a + b, 0); // => 6\n */\nexport const reduce = (\n  x: NDArray,\n  f: (acc: number, value: number, i: number, src: TypedArray) => number,\n  initialValue?: number\n): number => array(x).reduce(f, initialValue);\n\n/**\n * @function reduce\n * @memberof NDArray.prototype\n * @description Equivalent to `TypedArray.prototype.reduce`.\n * @param {Function} f\n * @param {Number} initialValue\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).reduce((a, b) => a + b, 0); // => 6\n */\nexport default function (\n  this: NDArray,\n  f: (acc: number, value: number, i: number, src: TypedArray) => number,\n  initialValue?: number\n): number {\n  const { data: d1, length: l1 } = this;\n  if (l1 === 0 && typeof initialValue === 'undefined') {\n    throw new Error('Reduce of empty array with no initial value.');\n  }\n\n  const iter = new NDIter(this);\n  const reduce = f.bind(this);\n\n  let value: number;\n\n  if (typeof initialValue === 'undefined') {\n    value = d1[0];\n    iter.next();\n  } else {\n    value = initialValue;\n  }\n\n  for (const i of iter) {\n    value = reduce(value, d1[i], i, d1);\n  }\n\n  return value;\n}\n", "import { get_strides } from '../util';\n\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function reshape\n * @description Reshapes `x`\n * @param {NDArray} x\n * @param {Number[]} ...shape\n * @returns {NDArray}\n * @example\n * import { reshape } from 'vectorious/core/reshape';\n *\n * reshape([1, 2, 3, 4], 2, 2); // => array([[1, 2], [3, 4]])\n */\nexport const reshape = (x: NDArray | ArrayLike<any>, ...shape: number[]): NDArray =>\n  array(x).reshape(...shape);\n\n/**\n * @function reshape\n * @memberof NDArray.prototype\n * @description Reshapes current array\n * @param {Number[]} ...shape\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3, 4]).reshape(2, 2); // <=> array([[1, 2], [3, 4]])\n */\nexport default function (this: NDArray, ...shape: number[]): NDArray {\n  const { length } = this;\n  if (shape.reduce((sum: number, dim: number) => sum * dim, 1) !== length) {\n    throw new Error(`shape ${shape} does not match length ${length}`);\n  }\n\n  this.shape = shape;\n  this.strides = get_strides(shape);\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { round: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function round\n * @description Returns the value of each element of `x` rounded to the nearest integer.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { round } from 'vectorious/core/round';\n *\n * round([1.2, 2.8, 3.5]); // => array([1, 3, 4])\n */\nexport const round = (x: NDArray | ArrayLike<any>): NDArray => array(x).round();\n\n/**\n * @function round\n * @memberof NDArray.prototype\n * @description Returns the value of each element of current array rounded to the nearest integer.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1.2, 2.8, 3.5]).round(); // <=> array([1, 3, 4])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function row_add\n * @description Adds a multiple of one row multiplied by `scalar` to another inside `x`.\n * @param {NDArray} x\n * @param {Number} dest\n * @param {Number} source\n * @param {Number} scalar\n * @returns {NDArray}\n * @example\n * import { row_add } from 'vectorious/core/row_add';\n *\n * row_add([[1, 2], [3, 4]], 1, 0, 2); // => array([[1, 2], [5, 8]])\n */\nexport const row_add = (\n  x: NDArray | ArrayLike<any>,\n  dest: number,\n  source: number,\n  scalar: number = 1\n): NDArray => array(x).row_add(dest, source, scalar);\n\n/**\n * @function row_add\n * @memberof NDArray.prototype\n * @description Adds a multiple of one row multiplied by `scalar` to another inside current matrix.\n * @param {Number} dest\n * @param {Number} source\n * @param {Number} scalar\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([[1, 2], [3, 4]]).row_add(1, 0, 2); // <=> array([[1, 2], [5, 8]])\n */\nexport default function (this: NDArray, dest: number, source: number, scalar: number = 1): NDArray {\n  this.check(dest, 0);\n  this.check(source, 0);\n\n  const [, c] = this.shape;\n  const { data: d1 } = this;\n\n  let j: number;\n  for (j = 0; j < c; j += 1) {\n    d1[dest * c + j] += d1[source * c + j] * scalar;\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\nimport * as blas from '../blas';\n\n/**\n * @static\n * @memberof module:Globals\n * @function scale\n * @description\n * Multiplies all elements of `x` with a specified `scalar`.\n * Accelerated with BLAS `?scal`.\n * @param {NDArray} x\n * @param {Number} scalar\n * @returns {NDArray}\n * @example\n * import { scale } from 'vectorious/core/scale';\n *\n * scale([1, 2, 3], 2); // => array([2, 4, 6])\n */\nexport const scale = (x: NDArray | ArrayLike<any>, scalar: number): NDArray =>\n  array(x).scale(scalar);\n\n/**\n * @function scale\n * @memberof NDArray.prototype\n * @description\n * Multiplies all elements of current array with a specified `scalar`.\n * Accelerated with BLAS `?scal`.\n * @param {Number} scalar\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).scale(2); // <=> array([2, 4, 6])\n */\nexport default function (this: NDArray, scalar: number): NDArray {\n  const { data: d1, length: l1, strides: st1, dtype } = this;\n\n  try {\n    const inc_x = st1[st1.length - 1];\n\n    blas.scal(dtype, l1, scalar, d1, inc_x);\n  } catch (err) {\n    const iter = new NDIter(this);\n\n    for (const i of iter) {\n      d1[i] *= scalar;\n    }\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function set\n * @description Sets the element at `i, j, ..., n` to `value`.\n * @param {NDArray} x\n * @param {Number[]} ...indices\n * @param {Number} value\n * @returns {NDArray}\n * @example\n * import { set } from 'vectorious/core/set';\n *\n * set([1, 2, 3], 1, 0); // => array([1, 0, 3])\n */\nexport const set = (x: NDArray, ...args: number[]): void => {\n  x.set(...args);\n};\n\n/**\n * @function set\n * @memberof NDArray.prototype\n * @description Sets the element at `i, j, ..., n` to `value`.\n * @param {Number[]} ...indices\n * @param {Number} value\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).set(1, 0); // <=> array([1, 0, 3])\n */\nexport default function (this: NDArray, ...args: number[]): void {\n  const indices: number[] = args.slice(0, -1);\n  const value: number = args[args.length - 1];\n\n  this.check(...indices);\n\n  const { shape: s1 } = this;\n  let index: number = 0;\n\n  let i: number;\n  for (i = 0; i < indices.length; i += 1) {\n    index *= s1[i];\n    index += indices[i];\n  }\n\n  this.data[index] = value;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { sign: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function sign\n * @description\n * Returns the sign of each element of `x`, indicating\n * whether it is positive, negative or zero.\n * @param {Number} x\n * @returns {NDArray}\n * @example\n * import { sign } from 'vectorious/core/sign';\n *\n * sign([1, 2, 3]); // => array([1, 1, 1])\n */\nexport const sign = (x: NDArray | ArrayLike<any>): NDArray => array(x).sign();\n\n/**\n * @function sign\n * @memberof NDArray.prototype\n * @description\n * Returns the sign of each element of current array, indicating\n * whether it is positive, negative or zero.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).sign(); // <=> array([1, 1, 1])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { sin: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function sin\n * @description Returns the sine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { sin } from 'vectorious/core/sin';\n *\n * sin([0, Math.PI / 2, Math.PI]); // => array([0, 1, 0])\n */\nexport const sin = (x: NDArray | ArrayLike<any>): NDArray => array(x).sin();\n\n/**\n * @function sin\n * @memberof NDArray.prototype\n * @description Returns the sine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([0, Math.PI / 2, Math.PI]).sin(); // <=> array([0, 1, 0])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { sinh: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function sinh\n * @description Returns the hyperbolic sine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { sinh } from 'vectorious/core/sinh';\n *\n * sinh([1, 2, 3]); // => array([1.175201177597046, 3.6268603801727295, 10.017874717712402])\n */\nexport const sinh = (x: NDArray | ArrayLike<any>): NDArray => array(x).sinh();\n\n/**\n * @function sinh\n * @memberof NDArray.prototype\n * @description Returns the hyperbolic sine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).sinh(); // <=> array([1.175201177597046, 3.6268603801727295, 10.017874717712402])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { TypedArray } from '../types';\nimport { get_length, get_strides } from '../util';\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function slice\n * @description Slices `x` in the corresponding dimension\n * @param {NDArray} x\n * @param {Number} begin\n * @param {Number} end\n * @param {Number} step\n * @returns {NDArray}\n * @example\n * import { slice } from 'vectorious/core/slice';\n *\n * slice([1, 2, 3, 4], 0, 4, 2); // => array([1, 3])\n */\nexport const slice = (\n  x: NDArray | ArrayLike<any>,\n  begin?: number,\n  end?: number,\n  step?: number\n): NDArray => array(x).slice(begin, end, step);\n\n/**\n * @function slice\n * @memberof NDArray.prototype\n * @description Slices the current array along the leading dimension\n * @param {Number} begin\n * @param {Number} end\n * @param {Number} step\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3, 4]).slice(0, 4, 2); // => array([1, 3])\n */\nexport default function (\n  this: NDArray,\n  begin: number = 0,\n  end: number = this.shape[0],\n  step: number = 1\n): NDArray {\n  const { data: d1, shape: s1 } = this;\n  const nd = s1.length;\n\n  if (begin < 0 || end < 0) {\n    return this.slice(\n      begin < 0 ? s1[s1.length - 1] + begin : begin,\n      end < 0 ? s1[s1.length - 1] + end : end\n    );\n  }\n\n  if (begin > end) {\n    return this.slice(end, begin, step);\n  }\n\n  if (step <= 0) {\n    throw new Error('step argument has to be a positive integer');\n  }\n\n  const s2: number[] = [Math.ceil((end - begin) / Math.abs(step)), ...s1.slice(1)];\n  const l2: number = get_length(s2);\n  const st2: number[] = get_strides(s2);\n  const d2: TypedArray =\n    nd > 1\n      ? d1.subarray(begin * s2[s2.length - 1], end * s2[s2.length - 1])\n      : d1.subarray(begin, end);\n\n  st2[0] *= step;\n\n  return new NDArray(d2, {\n    shape: s2,\n    length: l2,\n    strides: st2,\n  });\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport * as lapack from '../lapack';\n\n/**\n * @static\n * @memberof module:Globals\n * @function solve\n * @description\n * Solves the equation AX = B (where A is `x` and B is `y`).\n * Accelerated with LAPACK `?gesv`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { solve } from 'vectorious/core/solve';\n *\n * solve([[1, 3, 5], [2, 4, 7], [1, 1, 0]], [[1], [3], [5]]); // => array([[3.25], [1.75], [-1.5]])\n */\nexport const solve = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).solve(array(y));\n\n/**\n * @function solve\n * @memberof NDArray.prototype\n * @description\n * Solves the equation AX = B (where A is current matrix and B is `x`).\n * Accelerated with LAPACK `?gesv`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([[1, 3, 5], [2, 4, 7], [1, 1, 0]]).solve([[1], [3], [5]]); // => array([[3.25], [1.75], [-1.5]])\n */\nexport default function (this: NDArray, x: NDArray): NDArray {\n  const { data: d1, dtype } = this;\n  const {\n    data: d2,\n    shape: [n, nrhs],\n  } = x;\n\n  try {\n    const ipiv: Int32Array = new Int32Array(n);\n    lapack.gesv(dtype, n, nrhs, d1, n, ipiv, d2, nrhs);\n  } catch (err) {\n    const [LU, ipiv] = this.lu_factor();\n    const { data: d1 } = LU;\n    const { data: d2 } = x;\n\n    let i: number;\n    let j: number;\n    let k: number;\n\n    for (i = 0; i < ipiv.length; i += 1) {\n      if (i !== ipiv[i] - 1) {\n        x.swap(i, ipiv[i] - 1);\n      }\n    }\n\n    for (k = 0; k < nrhs; k += 1) {\n      for (i = 0; i < n; i += 1) {\n        for (j = 0; j < i; j += 1) {\n          d2[i * nrhs + k] -= d1[i * n + j] * d2[j * nrhs + k];\n        }\n      }\n\n      for (i = n - 1; i >= 0; i -= 1) {\n        for (j = i + 1; j < n; j += 1) {\n          d2[i * nrhs + k] -= d1[i * n + j] * d2[j * nrhs + k];\n        }\n\n        d2[i * nrhs + k] /= d1[i * n + i];\n      }\n    }\n  }\n\n  return x;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { sqrt: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function sqrt\n * @description Returns the positive square root of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { sqrt } from 'vectorious/core/sqrt';\n *\n * sqrt([1, 4, 9]); // => array([1, 2, 3])\n */\nexport const sqrt = (x: NDArray | ArrayLike<any>): NDArray => array(x).sqrt();\n\n/**\n * @function sqrt\n * @memberof NDArray.prototype\n * @description Returns the positive square root of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 4, 9]); // <=> array([1, 2, 3])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function square\n * @description Asserts if `x` is square.\n * @param {NDArray} x\n * @throws {Error} matrix is not square\n * @example\n * import { square } from 'vectorious/core/square';\n *\n * square([1, 2, 3]); // Error: matrix is not square\n */\nexport const square = (x: NDArray | ArrayLike<any>): void => {\n  array(x).square();\n};\n\n/**\n * @function square\n * @memberof NDArray.prototype\n * @description Asserts if current matrix is square.\n * @throws {Error} matrix is not square\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).square(); // Error: matrix is not square\n */\nexport default function (this: NDArray): void {\n  const { length } = this.shape;\n  const [r, c] = this.shape;\n\n  if (length !== 2 || r !== c) {\n    throw new Error('matrix is not square');\n  }\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function subtract\n * @description\n * Subtracts `y` from `x`.\n * Accelerated with BLAS `?axpy`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { subtract } from 'vectorious/core/subtract';\n *\n * subtract([1, 2, 3], [1, 1, 1]); // => array([0, 1, 2])\n */\nexport const subtract = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).subtract(array(y));\n\n/**\n * @function subtract\n * @memberof NDArray.prototype\n * @description\n * Subtracts `x` from the current array.\n * Accelerated with BLAS `?axpy`.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).subtract([1, 1, 1]); // <=> array([0, 1, 2])\n */\nexport default function (this: NDArray, x: NDArray): NDArray {\n  return this.add(x, -1);\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\n/**\n * @static\n * @memberof module:Globals\n * @function sum\n * @description Sum of `x`\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { sum } from 'vectorious/core/sum';\n *\n * sum([1, 2, 3]); // => 6\n */\nexport const sum = (x: NDArray | ArrayLike<any>): number => array(x).sum();\n\n/**\n * @function sum\n * @memberof NDArray.prototype\n * @description Sum of array elements\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).sum(); // => 6\n */\nexport default function (this: NDArray): number {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  let sum: number = 0;\n  for (const i of iter) {\n    sum += d1[i];\n  }\n\n  return sum;\n}\n", "import { TypedArray } from '../types';\n\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function swap\n * @description Swaps two rows `i` and `j` in `x`.\n * @param {NDArray} x\n * @param {Number} i\n * @param {Number} j\n * @returns {NDArray}\n * @example\n * import { swap } from 'vectorious/core/swap';\n *\n * swap([[1, 2], [3, 4]], 0, 1); // => array([[3, 4], [1, 2]])\n */\nexport const swap = (x: NDArray | ArrayLike<any>, i: number, j: number): NDArray =>\n  array(x).swap(i, j);\n\n/**\n * @function swap\n * @memberof NDArray.prototype\n * @description Swaps two rows `i` and `j` in current matrix\n * @param {Number} i\n * @param {Number} j\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([[1, 2], [3, 4]]); // <=> array([[3, 4], [1, 2]])\n */\nexport default function (this: NDArray, i: number, j: number): NDArray {\n  this.check(i, 0);\n  this.check(j, 0);\n\n  const { data: d1 } = this;\n  const [, c] = this.shape;\n  const d2: TypedArray = d1.slice(i * c, (i + 1) * c);\n\n  d1.copyWithin(i * c, j * c, (j + 1) * c);\n  d1.set(d2, j * c);\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { tan: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function tan\n * @description Returns the tangent of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { tan } from 'vectorious/core/tan';\n *\n * tan([1, 2, 3]); // => array([1.5574077367782593, -2.185039758682251, -0.14254654943943024])\n */\nexport const tan = (x: NDArray | ArrayLike<any>): NDArray => array(x).tan();\n\n/**\n * @function tan\n * @memberof NDArray.prototype\n * @description Returns the tangent of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).tan(); // <=> array([1.5574077367782593, -2.185039758682251, -0.14254654943943024])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { tanh: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function tanh\n * @description Returns the hyperbolic tangent of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { tanh } from 'vectorious/core/tanh';\n *\n * tanh([1, 2, 3]); // => array([0.7615941762924194, 0.9640275835990906, 0.9950547814369202])\n */\nexport const tanh = (x: NDArray | ArrayLike<any>): NDArray => array(x).tanh();\n\n/**\n * @function tanh\n * @memberof NDArray.prototype\n * @description Returns the hyperbolic tangent of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).tanh(); // <=> array([0.7615941762924194, 0.9640275835990906, 0.9950547814369202])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function toArray\n * @description Converts `x` into a JavaScript array.\n * @param {NDArray} x\n * @returns {Array}\n * @example\n * import { toArray } from 'vectorious/core/toArray';\n *\n * toArray([1, 2, 3]); // => [1, 2, 3]\n */\nexport const toArray = (x: NDArray | ArrayLike<any>): any => array(x).toArray();\n\n/**\n * @function toArray\n * @memberof NDArray.prototype\n * @description Converts current vector into a JavaScript array.\n * @param {Number} index\n * @param {Number} dim\n * @returns {Array}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).toArray(); // => [1, 2, 3]\n */\nexport default function (this: NDArray, index: number = 0, dim = 0): any {\n  const { data: d1, shape: s1, strides: st1 } = this;\n  const { length: ndim } = s1;\n\n  if (dim >= ndim) {\n    return d1[index];\n  }\n\n  const n = s1[dim];\n  const stride = st1[dim];\n  const list = [];\n\n  for (let i = 0; i < n; i++) {\n    const item = this.toArray(index, dim + 1);\n    if (item === null) {\n      return null;\n    }\n\n    list[i] = item;\n    index += stride;\n  }\n\n  return list;\n}\n", "import { inspect } from 'util';\n\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function toString\n * @description Converts `x` into a readable formatted string.\n * @param {NDArray} x\n * @returns {String}\n * @example\n * import { toString } from 'vectorious/core/toString';\n *\n * toString([1, 2, 3]); // => '1,2,3'\n */\nexport const toString = (x: NDArray | ArrayLike<any>): string => array(x).toString();\n\n/**\n * @function toString\n * @memberof NDArray.prototype\n * @description Converts current vector into a readable formatted string.\n * @returns {String}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).toString(); // => '1,2,3'\n */\nexport default function (this: NDArray): string {\n  return `array(${inspect(this.toArray(), { depth: 10, breakLength: 40 })}, dtype=${this.dtype})`;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function trace\n * @description Gets the trace of `x` (the sum of all diagonal elements).\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { trace } from 'vectorious/core/trace';\n *\n * trace([[1, 2], [3, 4]]); // => 5\n */\nexport const trace = (x: NDArray | ArrayLike<any>): number => array(x).trace();\n\n/**\n * @function trace\n * @memberof NDArray.prototype\n * @description Gets the trace of the matrix (the sum of all diagonal elements).\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1, 2, 3]).trace(); // => 5\n */\nexport default function (this: NDArray): number {\n  const [r, c] = this.shape;\n  const { data: d1 } = this;\n  const n: number = Math.min(r, c);\n\n  let result: number = 0;\n\n  let j: number;\n  for (j = 0; j < n; j += 1) {\n    result += d1[j * c + j];\n  }\n\n  return result;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function transpose\n * @description Transposes `x` (mirror across the diagonal).\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { transpose } from 'vectorious/core/transpose';\n *\n * transpose([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); // => array([[1, 4, 7], [2, 5, 8], [3, 6, 9]])\n */\nexport const transpose = (x: NDArray | ArrayLike<any>): NDArray => array(x).transpose();\n\n/**\n * @function transpose\n * @memberof NDArray.prototype\n * @description Transposes current matrix (mirror across the diagonal).\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); // <=> array([[1, 4, 7], [2, 5, 8], [3, 6, 9]])\n */\nexport default function (this: NDArray): NDArray {\n  if (this.shape.length < 2) {\n    return this;\n  }\n\n  let tmp = this.shape[0];\n  this.shape[0] = this.shape[1];\n  this.shape[1] = tmp;\n\n  tmp = this.strides[0];\n  this.strides[0] = this.strides[1];\n  this.strides[1] = tmp;\n\n  return this;\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterators';\n\nconst { trunc: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function trunc\n * @description\n * Returns the integer part of each element of `x`,\n * removing any fractional digits.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { trunc } from 'vectorious/core/trunc';\n *\n * trunc([1.2, 2.8, 3.5]); // => array([1, 2, 3])\n */\nexport const trunc = (x: NDArray | ArrayLike<any>): NDArray => array(x).trunc();\n\n/**\n * @function trunc\n * @memberof NDArray.prototype\n * @description\n * Returns the integer part of each element of current array,\n * removing any fractional digits.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n *\n * array([1.2, 2.8, 3.5]).trunc(); // => array([1, 2, 3])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i] = f(d1[i]);\n  }\n\n  return this;\n}\n", "import { TypedArray } from '../types';\n\nimport { NDArray } from './';\nimport { NDIter } from '../iterators';\n\n/**\n * @static\n * @memberof module:Globals\n * @function magic\n * @description Creates a magic square matrix of size `n`\n * @param {Number} n\n * @returns {NDArray}\n * @example\n * import { magic } from 'vectorious/core/magic';\n *\n * magic(3); // => array([[8, 1, 6], [3, 5, 7], [4, 9, 2]])\n */\nexport const magic = (n: number): NDArray => {\n  if (n < 0) {\n    throw new Error('invalid n');\n  }\n\n  const d1: TypedArray = new Float64Array(n * n);\n  const magic = new NDArray(d1, { shape: [n, n] });\n  const iter = new NDIter(magic);\n\n  let [ci, cj] = iter.coords;\n  for (const i of iter) {\n    const a = n - ci - 1;\n    const b = n - cj - 1;\n\n    d1[i] = ((cj + a * 2 + 1) % n) * n + ((b + a * 2 + 1) % n) + 1;\n    [ci, cj] = iter.coords;\n  }\n\n  return magic;\n};\n", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function ones\n * @description Creates an array containing ones (`1`) of shape `shape`\n * @param {Number[]} ...shape\n * @returns {NDArray}\n * @example\n * import { ones } from 'vectorious/core/ones';\n *\n * ones(3); // => array([1, 1, 1])\n */\nexport const ones = (...shape: number[]): NDArray =>\n  new NDArray(new Float64Array(shape.reduce((sum: number, dim: number) => sum * dim, 1)), {\n    shape,\n  }).fill(1);\n", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function random\n * @description Creates a vector containing random samples from a uniform distribution over `[0, 1)` of shape `shape`\n * @param {Number[]} ...shape\n * @returns {NDArray}\n * @example\n * import { random } from 'vectorious/core/random';\n *\n * random(3); // => array([0.27496153116226196, 0.7581521272659302, 0.3682245910167694])\n */\nexport const random = (...shape: number[]): NDArray =>\n  new NDArray(new Float64Array(shape.reduce((sum: number, dim: number) => sum * dim, 1)), {\n    shape,\n  }).map(() => Math.random());\n", "import { TypedArray, TypedArrayConstructor } from '../types';\n\nimport { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function range\n * @description\n * Creates an array containing a range (can be either ascending or descending)\n * of numbers specified by the arguments provided (e.g. `NDArray.range(0, .5, 2)`\n * gives an array containing all numbers in the interval `[0, 2)` separated by\n * steps of `0.5`)\n * @param {Number} start\n * @param {Number} step\n * @param {Number} stop\n * @returns {NDArray}\n * @example\n * import { range } from 'vectorious/core/range';\n *\n * range(1, 2, 9); // => array([1, 3, 5, 7])\n */\nexport const range = (...args: number[]): NDArray => {\n  const type: TypedArrayConstructor = Float64Array;\n  let backwards: boolean = false;\n  let start: number;\n  let step: number;\n  let end: number;\n\n  switch (args.length) {\n    case 2:\n      end = args.pop() as number;\n      step = 1;\n      start = args.pop() as number;\n      break;\n    case 3:\n      end = args.pop() as number;\n      step = args.pop() as number;\n      start = args.pop() as number;\n      break;\n    default:\n      throw new Error('invalid range');\n  }\n\n  if (end - start < 0) {\n    const copy: number = end;\n    end = start;\n    start = copy;\n    backwards = true;\n  }\n\n  if (step > end - start) {\n    throw new Error('invalid range');\n  }\n\n  const data: TypedArray = new type(Math.ceil((end - start) / step));\n\n  let i: number = start;\n  let j: number = 0;\n\n  if (backwards) {\n    for (; i < end; i += step, j += 1) {\n      data[j] = end - i + start;\n    }\n  } else {\n    for (; i < end; i += step, j += 1) {\n      data[j] = i;\n    }\n  }\n\n  return new NDArray(data);\n};\n", "import { DType, INDArray, TypedArray } from '../types';\nimport {\n  flatten,\n  get_dtype,\n  get_length,\n  get_shape,\n  get_strides,\n  get_type,\n  is_typed_array,\n} from '../util';\nimport { NDIter } from '../iterators';\n\nimport { default as abs } from './abs';\nimport { default as acos } from './acos';\nimport { default as acosh } from './acosh';\nimport { default as add } from './add';\nimport { default as angle } from './angle';\nimport { default as asin } from './asin';\nimport { default as asinh } from './asinh';\nimport { default as atan } from './atan';\nimport { default as atanh } from './atanh';\nimport { default as augment } from './augment';\nimport { default as binOp } from './binOp';\nimport { default as cbrt } from './cbrt';\nimport { default as ceil } from './ceil';\nimport { default as check } from './check';\nimport { default as combine } from './combine';\nimport { default as copy } from './copy';\nimport { default as cos } from './cos';\nimport { default as cosh } from './cosh';\nimport { default as cross } from './cross';\nimport { default as det } from './det';\nimport { default as diagonal } from './diagonal';\nimport { default as dot } from './dot';\nimport { default as eig } from './eig';\nimport { default as equals } from './equals';\nimport { default as equidimensional } from './equidimensional';\nimport { default as equilateral } from './equilateral';\nimport { default as exp } from './exp';\nimport { default as expm1 } from './expm1';\nimport { default as fill } from './fill';\nimport { default as floor } from './floor';\nimport { default as forEach } from './forEach';\nimport { default as fround } from './fround';\nimport { default as gauss } from './gauss';\nimport { default as get } from './get';\nimport { default as inv } from './inv';\nimport { default as log } from './log';\nimport { default as log10 } from './log10';\nimport { default as log1p } from './log1p';\nimport { default as log2 } from './log2';\nimport { default as lu } from './lu';\nimport { default as lu_factor } from './lu_factor';\nimport { default as map } from './map';\nimport { default as max } from './max';\nimport { default as mean } from './mean';\nimport { default as min } from './min';\nimport { default as multiply } from './multiply';\nimport { default as norm } from './norm';\nimport { default as normalize } from './normalize';\nimport { default as pow } from './pow';\nimport { default as prod } from './prod';\nimport { default as product } from './product';\nimport { default as project } from './project';\nimport { default as push } from './push';\nimport { default as rank } from './rank';\nimport { default as reciprocal } from './reciprocal';\nimport { default as reduce } from './reduce';\nimport { default as reshape } from './reshape';\nimport { default as round } from './round';\nimport { default as row_add } from './row_add';\nimport { default as scale } from './scale';\nimport { default as set } from './set';\nimport { default as sign } from './sign';\nimport { default as sin } from './sin';\nimport { default as sinh } from './sinh';\nimport { default as slice } from './slice';\nimport { default as solve } from './solve';\nimport { default as sqrt } from './sqrt';\nimport { default as square } from './square';\nimport { default as subtract } from './subtract';\nimport { default as sum } from './sum';\nimport { default as swap } from './swap';\nimport { default as tan } from './tan';\nimport { default as tanh } from './tanh';\nimport { default as toArray } from './toArray';\nimport { default as toString } from './toString';\nimport { default as trace } from './trace';\nimport { default as transpose } from './transpose';\nimport { default as trunc } from './trunc';\n\nconst inspectSymbol: unique symbol = Symbol.for('nodejs.util.inspect.custom');\n\n/**\n * @class NDArray\n * @description Constructs or copies an NDArray instance.\n * @param data\n * @param {Object} [options]\n * @param {Number[]} [options.shape]\n * @param {Number} [options.length]\n * @param {Number[]} [options.strides]\n * @param {string} [options.dtype]\n * @example\n * import { NDArray } from 'vectorious';\n *\n * new NDArray() // => array([], dtype=float64)\n * new NDArray([]) // => array([], dtype=float64)\n * new NDArray([1, 2, 3]) // => array([1, 2, 3], dtype=float64)\n * new NDArray([[1, 2], [3, 4]]) // => array([ [ 1, 2 ], [ 3, 4 ] ], dtype=float64)\n * new NDArray(new Int32Array([1, 2, 3])) // => array([ 1, 2, 3 ], dtype=int32)\n * new NDArray([1, 2, 3, 4], {\n *   shape: [2, 2],\n *   dtype: 'uint32'\n * }) // => array([ [ 1, 2 ], [ 3, 4 ] ], dtype=uint32)\n */\nexport class NDArray implements INDArray {\n  /**\n   * @name data\n   * @memberof NDArray.prototype\n   * @type TypedArray\n   * @default new Float64Array(0)\n   */\n  public data: TypedArray = new Float64Array(0);\n\n  /**\n   * @name dtype\n   * @memberof NDArray.prototype\n   * @type String\n   * @default 'float64'\n   */\n  public dtype: DType = 'float64';\n\n  /**\n   * @name length\n   * @memberof NDArray.prototype\n   * @type Number\n   * @default 0\n   */\n  public length: number = 0;\n\n  /**\n   * @name shape\n   * @memberof NDArray.prototype\n   * @type Number[]\n   * @default [0]\n   */\n  public shape: number[] = [0];\n\n  /**\n   * @name strides\n   * @memberof NDArray.prototype\n   * @type Number[]\n   * @default [0]\n   */\n  public strides: number[] = [0];\n\n  public [inspectSymbol]: () => string = toString;\n  public abs = abs;\n  public acos = acos;\n  public acosh = acosh;\n  public add = add;\n  public angle = angle;\n  public asin = asin;\n  public asinh = asinh;\n  public atan = atan;\n  public atanh = atanh;\n  public augment = augment;\n  public binOp = binOp;\n  public cbrt = cbrt;\n  public ceil = ceil;\n  public check = check;\n  public combine = combine;\n  public copy = copy;\n  public cos = cos;\n  public cosh = cosh;\n  public cross = cross;\n  public det = det;\n  public diagonal = diagonal;\n  public dot = dot;\n  public eig = eig;\n  public equals = equals;\n  public equidimensional = equidimensional;\n  public equilateral = equilateral;\n  public exp = exp;\n  public expm1 = expm1;\n  public fill = fill;\n  public floor = floor;\n  public forEach = forEach;\n  public fround = fround;\n  public gauss = gauss;\n  public get = get;\n  public inv = inv;\n  public log = log;\n  public log10 = log10;\n  public log1p = log1p;\n  public log2 = log2;\n  public lu = lu;\n  public lu_factor = lu_factor;\n  public map = map;\n  public max = max;\n  public mean = mean;\n  public min = min;\n  public multiply = multiply;\n  public norm = norm;\n  public normalize = normalize;\n  public pow = pow;\n  public prod = prod;\n  public product = product;\n  public project = project;\n  public push = push;\n  public rank = rank;\n  public reciprocal = reciprocal;\n  public reduce = reduce;\n  public reshape = reshape;\n  public round = round;\n  public row_add = row_add;\n  public scale = scale;\n  public set = set;\n  public sign = sign;\n  public sin = sin;\n  public sinh = sinh;\n  public slice = slice;\n  public solve = solve;\n  public sqrt = sqrt;\n  public square = square;\n  public subtract = subtract;\n  public sum = sum;\n  public swap = swap;\n  public tan = tan;\n  public tanh = tanh;\n  public toArray = toArray;\n  public toString = toString;\n  public trace = trace;\n  public transpose = transpose;\n  public trunc = trunc;\n\n  public constructor(\n    data?: any,\n    options?: {\n      shape?: number[];\n      length?: number;\n      strides?: number[];\n      dtype?: DType;\n    }\n  ) {\n    if (!data) {\n      return;\n    }\n\n    if (data instanceof NDArray) {\n      return data;\n    }\n\n    if (data instanceof NDIter) {\n      if (!options || !options.dtype) {\n        throw new Error('dtype is missing');\n      }\n\n      if (data.shape) {\n        options.shape = data.shape;\n      }\n\n      const length = data.length;\n      data = new (get_type(options.dtype))(length);\n    }\n\n    const {\n      shape = get_shape(data),\n      length = get_length(shape),\n      strides = get_strides(shape),\n      dtype = get_dtype(data),\n    } = options || {};\n\n    this.data = is_typed_array(data) ? data : new (get_type(dtype))(flatten(data));\n    this.shape = shape;\n    this.length = length;\n    this.dtype = dtype;\n    this.strides = strides;\n  }\n\n  /**\n   * @name x\n   * @memberof NDArray.prototype\n   * @description Gets or sets the value at index 0\n   * @type Number\n   */\n  public get x(): number {\n    return this.get(0);\n  }\n\n  public set x(value: number) {\n    this.set(0, value);\n  }\n\n  /**\n   * @name y\n   * @memberof NDArray.prototype\n   * @description Gets or sets the value at index 1\n   * @type Number\n   */\n  public get y(): number {\n    return this.get(1);\n  }\n\n  public set y(value: number) {\n    this.set(1, value);\n  }\n\n  /**\n   * @name z\n   * @memberof NDArray.prototype\n   * @description Gets or sets the value at index 2\n   * @type Number\n   */\n  public get z(): number {\n    return this.get(2);\n  }\n\n  public set z(value: number) {\n    this.set(2, value);\n  }\n\n  /**\n   * @name w\n   * @memberof NDArray.prototype\n   * @description Gets or sets the value at index 3\n   * @type Number\n   */\n  public get w(): number {\n    return this.get(3);\n  }\n\n  public set w(value: number) {\n    this.set(3, value);\n  }\n\n  /**\n   * @name T\n   * @memberof NDArray.prototype\n   * @description Short for `this.copy().transpose()`\n   * @type NDArray\n   */\n  public get T() {\n    return this.copy().transpose();\n  }\n}\n\nexport { abs } from './abs';\nexport { acos } from './acos';\nexport { acosh } from './acosh';\nexport { add } from './add';\nexport { angle } from './angle';\nexport { array } from './array';\nexport { asin } from './asin';\nexport { asinh } from './asinh';\nexport { atan } from './atan';\nexport { atanh } from './atanh';\nexport { augment } from './augment';\nexport { binOp } from './binOp';\nexport { cbrt } from './cbrt';\nexport { ceil } from './ceil';\nexport { check } from './check';\nexport { combine } from './combine';\nexport { copy } from './copy';\nexport { cos } from './cos';\nexport { cosh } from './cosh';\nexport { cross } from './cross';\nexport { det } from './det';\nexport { diagonal } from './diagonal';\nexport { dot } from './dot';\nexport { eig } from './eig';\nexport { equals } from './equals';\nexport { equidimensional } from './equidimensional';\nexport { equilateral } from './equilateral';\nexport { exp } from './exp';\nexport { expm1 } from './expm1';\nexport { eye } from './eye';\nexport { fill } from './fill';\nexport { floor } from './floor';\nexport { forEach } from './forEach';\nexport { fround } from './fround';\nexport { gauss } from './gauss';\nexport { get } from './get';\nexport { inv } from './inv';\nexport { log } from './log';\nexport { log10 } from './log10';\nexport { log1p } from './log1p';\nexport { log2 } from './log2';\nexport { lu } from './lu';\nexport { lu_factor } from './lu_factor';\nexport { magic } from './magic';\nexport { map } from './map';\nexport { matrix } from './matrix';\nexport { max } from './max';\nexport { mean } from './mean';\nexport { min } from './min';\nexport { multiply } from './multiply';\nexport { norm } from './norm';\nexport { normalize } from './normalize';\nexport { ones } from './ones';\nexport { pow } from './pow';\nexport { prod } from './prod';\nexport { product } from './product';\nexport { project } from './project';\nexport { push } from './push';\nexport { random } from './random';\nexport { range } from './range';\nexport { rank } from './rank';\nexport { reciprocal } from './reciprocal';\nexport { reduce } from './reduce';\nexport { reshape } from './reshape';\nexport { round } from './round';\nexport { row_add } from './row_add';\nexport { scale } from './scale';\nexport { set } from './set';\nexport { sign } from './sign';\nexport { sin } from './sin';\nexport { sinh } from './sinh';\nexport { slice } from './slice';\nexport { solve } from './solve';\nexport { sqrt } from './sqrt';\nexport { square } from './square';\nexport { subtract } from './subtract';\nexport { sum } from './sum';\nexport { swap } from './swap';\nexport { tan } from './tan';\nexport { tanh } from './tanh';\nexport { toArray } from './toArray';\nexport { toString } from './toString';\nexport { trace } from './trace';\nexport { transpose } from './transpose';\nexport { trunc } from './trunc';\nexport { zeros } from './zeros';\n\ntry {\n  (window as any).v = NDArray;\n} catch (error) {}\n"],
  "mappings": "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",
  "names": ["require_isBufferBrowser", "__commonJSMin", "exports", "module", "arg", "require_inherits_browser", "__commonJSMin", "exports", "module", "ctor", "superCtor", "TempCtor", "require_util", "__commonJSMin", "exports", "formatRegExp", "f", "isString", "objects", "i", "inspect", "args", "len", "str", "x", "isNull", "isObject", "fn", "msg", "isUndefined", "warned", "deprecated", "debugs", "debugEnviron", "set", "pid", "obj", "opts", "ctx", "stylizeNoColor", "isBoolean", "stylizeWithColor", "formatValue", "styleType", "style", "arrayToHash", "array", "hash", "val", "idx", "value", "recurseTimes", "isFunction", "ret", "primitive", "formatPrimitive", "keys", "visibleKeys", "isError", "formatError", "name", "isRegExp", "isDate", "base", "braces", "isArray", "n", "output", "formatArray", "key", "formatProperty", "reduceToSingleString", "simple", "isNumber", "l", "hasOwnProperty", "desc", "line", "numLinesEst", "length", "prev", "cur", "ar", "arg", "isNullOrUndefined", "isSymbol", "re", "objectToString", "d", "e", "isPrimitive", "o", "pad", "months", "timestamp", "time", "origin", "add", "prop", "src_exports", "__export", "NDArray", "NDIter", "NDMultiIter", "abs", "acos", "acosh", "add", "angle", "array", "asin", "asinh", "atan", "atanh", "augment", "binOp", "cbrt", "ceil", "check", "combine", "copy", "cos", "cosh", "cross", "det", "diagonal", "dot", "eig", "equals", "equidimensional", "equilateral", "exp", "expm1", "eye", "fill", "floor", "forEach", "fround", "gauss", "get", "inv", "log", "log10", "log1p", "log2", "lu", "lu_factor", "magic", "map", "matrix", "max", "mean", "min", "multiply", "norm", "normalize", "ones", "pow", "prod", "product", "project", "push", "random", "range", "rank", "reciprocal", "reduce", "reshape", "round", "row_add", "scale", "set", "sign", "sin", "sinh", "slice", "solve", "sqrt", "square", "subtract", "sum", "swap", "tan", "tanh", "toArray", "toString", "trace", "transpose", "trunc", "zeros", "V_MAXDIMS", "flatten", "array", "acc", "next", "is_typed_array", "get_length", "shape", "a", "b", "get_shape", "get_strides", "_", "i", "get_dtype", "name", "get_type", "dtype", "array", "args", "NDArray", "NDIter", "x", "array", "shape", "strides", "length", "V_MAXDIMS", "i", "done", "current", "ndm1", "shapem1", "backstrides", "NDMultiIter", "args", "arg", "NDIter", "i", "nd", "it", "j", "k", "tmp", "acc", "dim", "done", "current", "numiter", "f", "abs", "x", "array", "abs_default", "d1", "iter", "NDIter", "i", "f", "acos", "x", "array", "acos_default", "d1", "iter", "NDIter", "i", "f", "acosh", "x", "array", "acosh_default", "d1", "iter", "NDIter", "i", "nblas", "NoTrans", "Trans", "axpy", "dtype", "n", "alpha", "x", "inc_x", "y", "inc_y", "dot", "iamax", "gemm", "transx", "transy", "m", "k", "ldx", "ldy", "beta", "z", "ldz", "l1", "l2", "l3", "nrm2", "scal", "add", "x", "y", "alpha", "array", "add_default", "d1", "l1", "st1", "dtype", "d2", "st2", "inc_x", "inc_y", "axpy", "iter", "NDMultiIter", "i", "j", "f", "angle", "x", "y", "array", "angle_default", "f", "asin", "x", "array", "asin_default", "d1", "iter", "NDIter", "i", "f", "asinh", "x", "array", "asinh_default", "d1", "iter", "NDIter", "i", "f", "atan", "x", "array", "atan_default", "d1", "iter", "NDIter", "i", "f", "atanh", "x", "array", "atanh_default", "d1", "iter", "NDIter", "i", "zeros", "shape", "NDArray", "sum", "dim", "augment", "x", "y", "array", "augment_default", "r1", "c1", "r2", "c2", "d1", "d2", "zeros", "d3", "i", "j", "binOp", "x", "y", "f", "array", "binOp_default", "d1", "d2", "iter", "NDMultiIter", "i", "j", "f", "cbrt", "x", "array", "cbrt_default", "d1", "iter", "NDIter", "i", "f", "ceil", "x", "array", "ceil_default", "d1", "iter", "NDIter", "i", "check", "x", "indices", "array", "check_default", "s1", "l1", "i", "dim", "combine", "x", "y", "array", "combine_default", "l1", "d1", "l2", "d2", "get_type", "l3", "d3", "copy", "x", "array", "copy_default", "zeros", "d1", "d2", "iter", "NDMultiIter", "i", "j", "f", "cos", "x", "array", "cos_default", "d1", "iter", "NDIter", "i", "f", "cosh", "x", "array", "cosh_default", "d1", "iter", "NDIter", "i", "cross", "x", "y", "array", "cross_default", "l1", "l2", "c1", "c2", "c3", "det", "x", "array", "det_default", "n", "LU", "ipiv", "d1", "product", "sign", "i", "diagonal", "x", "array", "diagonal_default", "l1", "r", "c", "l2", "dot", "x", "y", "array", "dot_default", "d1", "l1", "st1", "dtype", "d2", "st2", "result", "inc_x", "inc_y", "iter", "NDMultiIter", "i", "j", "eye", "n", "x", "NDArray", "d1", "i", "nlapack", "rotate", "x", "c", "s", "k", "l", "i", "j", "n", "d1", "temp", "tau", "eig", "array", "eig_default", "get_type", "jobvl", "jobvr", "wr", "zeros", "wi", "vl", "vr", "d2", "d3", "d4", "d5", "p", "eye", "max", "t", "phi", "e", "equals", "x", "y", "tolerance", "array", "equals_default", "d1", "d2", "iter", "NDMultiIter", "i", "j", "equidimensional", "x", "y", "array", "equidimensional_default", "s1", "s2", "dim", "i", "equilateral", "x", "y", "array", "equilateral_default", "l1", "l2", "f", "exp", "x", "array", "exp_default", "d1", "iter", "NDIter", "i", "f", "expm1", "x", "array", "expm1_default", "d1", "iter", "NDIter", "i", "fill", "x", "value", "array", "fill_default", "d1", "iter", "NDIter", "i", "f", "floor", "x", "array", "floor_default", "d1", "iter", "NDIter", "i", "forEach", "x", "f", "forEach_default", "d1", "iter", "NDIter", "i", "f", "fround", "x", "array", "fround_default", "d1", "iter", "NDIter", "i", "gauss", "x", "array", "gauss_default", "c", "d1", "lead", "leadValue", "pivot", "i", "j", "k", "get", "x", "indices", "array", "get_default", "d1", "s1", "ndim", "index", "i", "nlapack", "getrf", "dtype", "m", "n", "x", "ldx", "ipiv", "getri", "gesv", "nrhs", "y", "ldy", "inv", "x", "array", "inv_default", "n", "dtype", "d1", "ipiv", "getrf", "getri", "identity", "eye", "rref", "augment", "left", "zeros", "right", "d2", "d3", "iter", "NDIter", "ci", "cj", "i", "f", "log", "x", "array", "log_default", "d1", "iter", "NDIter", "i", "f", "log10", "x", "array", "log10_default", "d1", "iter", "NDIter", "i", "f", "log1p", "x", "array", "log1p_default", "d1", "iter", "NDIter", "i", "f", "log2", "x", "array", "log2_default", "d1", "iter", "NDIter", "i", "lu", "x", "array", "lu_default", "LU", "ipiv", "L", "U", "d1", "d2", "iter", "NDIter", "ci", "cj", "i", "lu_factor", "x", "array", "lu_factor_default", "d1", "n", "dtype", "ipiv", "getrf", "max", "abs", "diag", "p", "i", "j", "k", "map", "x", "f", "array", "map_default", "d1", "iter", "NDIter", "copy", "d2", "i", "max", "x", "array", "max_default", "d1", "l1", "st1", "dtype", "inc_x", "iamax", "iter", "NDIter", "i", "value", "mean", "x", "array", "mean_default", "d1", "l1", "iter", "NDIter", "i", "min", "x", "array", "min_default", "d1", "iter", "NDIter", "i", "value", "matrix", "c", "NDArray", "multiply", "x", "y", "array", "multiply_default", "r1", "c1", "d1", "dtype", "r2", "c2", "d2", "matrix", "d3", "gemm", "NoTrans", "iter", "NDIter", "k", "ci", "cj", "i", "sum", "f", "norm", "x", "array", "norm_default", "d1", "l1", "st1", "dtype", "result", "inc_x", "nrm2", "normalize", "x", "array", "normalize_default", "f", "pow", "x", "exponent", "array", "pow_default", "d1", "iter", "NDIter", "i", "prod", "x", "array", "prod_default", "d1", "iter", "NDIter", "i", "product", "x", "y", "array", "product_default", "d1", "d2", "iter", "NDMultiIter", "i", "j", "project", "x", "y", "array", "project_default", "push", "x", "value", "array", "push_default", "d1", "l1", "l2", "d2", "get_type", "rank", "x", "tolerance", "array", "rank_default", "d1", "iter", "NDIter", "rk", "ci", "cj", "i", "reciprocal", "x", "array", "reciprocal_default", "d1", "iter", "NDIter", "i", "reduce", "x", "f", "initialValue", "array", "reduce_default", "d1", "l1", "iter", "NDIter", "value", "i", "reshape", "x", "shape", "array", "reshape_default", "length", "sum", "dim", "get_strides", "f", "round", "x", "array", "round_default", "d1", "iter", "NDIter", "i", "row_add", "x", "dest", "source", "scalar", "array", "row_add_default", "c", "d1", "j", "scale", "x", "scalar", "array", "scale_default", "d1", "l1", "st1", "dtype", "inc_x", "scal", "iter", "NDIter", "i", "set", "x", "args", "set_default", "indices", "value", "s1", "index", "i", "f", "sign", "x", "array", "sign_default", "d1", "iter", "NDIter", "i", "f", "sin", "x", "array", "sin_default", "d1", "iter", "NDIter", "i", "f", "sinh", "x", "array", "sinh_default", "d1", "iter", "NDIter", "i", "slice", "x", "begin", "end", "step", "array", "slice_default", "d1", "s1", "nd", "s2", "l2", "get_length", "st2", "get_strides", "d2", "NDArray", "solve", "x", "y", "array", "solve_default", "d1", "dtype", "d2", "nrhs", "ipiv", "gesv", "LU", "i", "j", "k", "f", "sqrt", "x", "array", "sqrt_default", "d1", "iter", "NDIter", "i", "square", "x", "array", "square_default", "length", "r", "c", "subtract", "x", "y", "array", "subtract_default", "sum", "x", "array", "sum_default", "d1", "iter", "NDIter", "i", "swap", "x", "i", "j", "array", "swap_default", "d1", "c", "d2", "f", "tan", "x", "array", "tan_default", "d1", "iter", "NDIter", "i", "f", "tanh", "x", "array", "tanh_default", "d1", "iter", "NDIter", "i", "toArray", "x", "array", "toArray_default", "index", "dim", "d1", "s1", "st1", "ndim", "n", "stride", "list", "i", "item", "import_util", "toString", "x", "array", "toString_default", "trace", "x", "array", "trace_default", "c", "d1", "n", "result", "j", "transpose", "x", "array", "transpose_default", "tmp", "f", "trunc", "x", "array", "trunc_default", "d1", "iter", "NDIter", "i", "magic", "n", "d1", "NDArray", "iter", "NDIter", "ci", "cj", "i", "a", "b", "ones", "shape", "NDArray", "sum", "dim", "random", "shape", "NDArray", "sum", "dim", "range", "args", "type", "backwards", "start", "step", "end", "copy", "data", "i", "j", "NDArray", "inspectSymbol", "NDArray", "toString_default", "abs_default", "acos_default", "acosh_default", "add_default", "angle_default", "asin_default", "asinh_default", "atan_default", "atanh_default", "augment_default", "binOp_default", "cbrt_default", "ceil_default", "check_default", "combine_default", "copy_default", "cos_default", "cosh_default", "cross_default", "det_default", "diagonal_default", "dot_default", "eig_default", "equals_default", "equidimensional_default", "equilateral_default", "exp_default", "expm1_default", "fill_default", "floor_default", "forEach_default", "fround_default", "gauss_default", "get_default", "inv_default", "log_default", "log10_default", "log1p_default", "log2_default", "lu_default", "lu_factor_default", "map_default", "max_default", "mean_default", "min_default", "multiply_default", "norm_default", "normalize_default", "pow_default", "prod_default", "product_default", "project_default", "push_default", "rank_default", "reciprocal_default", "reduce_default", "reshape_default", "round_default", "row_add_default", "scale_default", "set_default", "sign_default", "sin_default", "sinh_default", "slice_default", "solve_default", "sqrt_default", "square_default", "subtract_default", "sum_default", "swap_default", "tan_default", "tanh_default", "toArray_default", "trace_default", "transpose_default", "trunc_default", "data", "options", "NDIter", "length", "get_type", "shape", "get_shape", "get_length", "strides", "get_strides", "dtype", "get_dtype", "is_typed_array", "flatten", "value"]
}
