{
  "version": 3,
  "sources": ["node_modules/util/support/isBufferBrowser.js", "node_modules/inherits/inherits_browser.js", "node_modules/util/util.js", "src/index.ts", "src/util.ts", "src/core/array.ts", "src/iterator/index.ts", "src/core/abs.ts", "src/core/acos.ts", "src/core/acosh.ts", "src/blas.ts", "src/core/add.ts", "src/core/angle.ts", "src/core/asin.ts", "src/core/asinh.ts", "src/core/atan.ts", "src/core/atanh.ts", "src/core/zeros.ts", "src/core/augment.ts", "src/core/binOp.ts", "src/core/cbrt.ts", "src/core/ceil.ts", "src/core/check.ts", "src/core/combine.ts", "src/core/copy.ts", "src/core/cos.ts", "src/core/cosh.ts", "src/core/cross.ts", "src/core/det.ts", "src/core/diagonal.ts", "src/core/dot.ts", "src/core/eye.ts", "src/core/eig.ts", "src/core/equals.ts", "src/core/equidimensional.ts", "src/core/equilateral.ts", "src/core/exp.ts", "src/core/expm1.ts", "src/core/fill.ts", "src/core/floor.ts", "src/core/forEach.ts", "src/core/fround.ts", "src/lapack.ts", "src/core/gauss.ts", "src/core/get.ts", "src/core/inv.ts", "src/core/log.ts", "src/core/log10.ts", "src/core/log1p.ts", "src/core/log2.ts", "src/core/lu.ts", "src/core/lu_factor.ts", "src/core/map.ts", "src/core/max.ts", "src/core/mean.ts", "src/core/min.ts", "src/core/matrix.ts", "src/core/multiply.ts", "src/core/norm.ts", "src/core/normalize.ts", "src/core/pow.ts", "src/core/prod.ts", "src/core/product.ts", "src/core/project.ts", "src/core/push.ts", "src/core/rank.ts", "src/core/reciprocal.ts", "src/core/reduce.ts", "src/core/reshape.ts", "src/core/round.ts", "src/core/row_add.ts", "src/core/scale.ts", "src/core/set.ts", "src/core/sign.ts", "src/core/sin.ts", "src/core/sinh.ts", "src/core/slice.ts", "src/core/solve.ts", "src/core/sqrt.ts", "src/core/square.ts", "src/core/subtract.ts", "src/core/sum.ts", "src/core/swap.ts", "src/core/tan.ts", "src/core/tanh.ts", "src/core/toArray.ts", "src/core/toString.ts", "src/core/toString.ts", "src/core/trace.ts", "src/core/transpose.ts", "src/core/trunc.ts", "src/core/magic.ts", "src/core/ones.ts", "src/core/random.ts", "src/core/range.ts", "src/core/index.ts"],
  "sourcesContent": ["module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}", "if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "/**\n * @module Globals\n */\nexport * from './core';\nexport * from './iterator';\n", "import {\n  DType,\n  TypedArray,\n  TypedArrayConstructor,\n} from './types';\n\nexport const flatten: (array: any[]) => number[] = (array: any[]): number[] =>\n  array.reduce(\n    (acc: any[], next: any): any[] => acc.concat(Array.isArray(next) ? flatten(next) : next),\n    []\n  );\n\nexport const is_typed_array: (array: any) => boolean = (array: any): boolean =>\n  ArrayBuffer.isView(array) && !(array instanceof DataView);\n\nexport const get_length: (shape: number[]) => number = (shape: number[]): number =>\n  shape.reduce((a: number, b: number): number => a * b, 1);\n\nexport const get_shape: (array: any) => number[] = (array: any): number[] => Array.isArray(array) || is_typed_array(array)\n  ? [array.length].concat(get_shape(array[0]))\n  : [];\n\nexport const get_strides: (shape: number[]) => number[] = (shape: number[]): number[] =>\n  [\n    ...shape\n      .slice(1)\n      .map((_: number, i: number): number => shape\n        .slice(i + 1)\n        .reduce((a: number, b: number): number => a * b, 1)\n      ),\n    1,\n];\n\nexport const get_dtype: (array: TypedArray) => DType = (array: TypedArray): DType => {\n  const {\n    constructor: {\n      name = 'Float32Array',\n    } = {},\n  } = array || {};\n\n  switch (name) {\n    case 'Int8Array': return 'int8';\n    case 'Uint8Array': return 'uint8';\n    case 'Int16Array': return 'int16';\n    case 'Uint16Array': return 'uint16';\n    case 'Int32Array': return 'int32';\n    case 'Uint32Array': return 'uint32';\n    case 'Uint8ClampedArray': return 'uint8c';\n    case 'Float32Array': return 'float32';\n    case 'Float64Array': return 'float64';\n    default: return 'float64';\n  }\n};\n\nexport const get_type: (dtype: DType) => TypedArrayConstructor = (dtype: DType): TypedArrayConstructor => {\n  switch (dtype) {\n    case 'int8': return Int8Array;\n    case 'uint8': return Uint8Array;\n    case 'int16': return Int16Array;\n    case 'uint16': return Uint16Array;\n    case 'int32': return Int32Array;\n    case 'uint32': return Uint32Array;\n    case 'uint8c': return Uint8ClampedArray;\n    case 'float32': return Float32Array;\n    case 'float64': return Float64Array;\n    default: return Float64Array;\n  }\n};", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function array\n * @description `array(...args)` is an alias for `new v(...args)`\n * @param {} ...args\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]); // => array([1, 2, 3])\n */\nexport const array = (...args: any[]): NDArray => new NDArray(...args);\n", "import { NDArray } from '../';\nimport { array } from '../core/array';\n\nexport const V_MAXDIMS = 32;\n\n/**\n * @class NDIter\n * @description Constructs an NDIter instance.\n * @param {NDArray} x\n */\nexport class NDIter implements Iterator<number[]> {\n  /**\n   * @name x\n   * @memberof NDIter.prototype\n   * @type NDArray\n   */\n  public x: NDArray;\n\n  /**\n   * @name shape\n   * @memberof NDIter.prototype\n   * @type Number[]\n   */\n  public shape: number[];\n\n  /**\n   * @name shapem1\n   * @memberof NDIter.prototype\n   * @type Number[]\n   */\n  public shapem1: number[];\n\n  /**\n   * @name strides\n   * @memberof NDIter.prototype\n   * @type Number[]\n   */\n  public strides: number[];\n\n  /**\n   * @name backstrides\n   * @memberof NDIter.prototype\n   * @type Number[]\n   */\n  public backstrides: number[];\n\n  /**\n   * @name length\n   * @memberof NDIter.prototype\n   * @type Number\n   */\n  public length: number;\n\n  /**\n   * @name lengthm1\n   * @memberof NDIter.prototype\n   * @type Number\n   */\n  public lengthm1: number;\n\n  /**\n   * @name nd\n   * @memberof NDIter.prototype\n   * @type Number\n   */\n  public nd: number;\n\n  /**\n   * @name ndm1\n   * @memberof NDIter.prototype\n   * @type Number\n   */\n  public ndm1: number;\n\n  /**\n   * @name index\n   * @memberof NDIter.prototype\n   * @type Number\n   */\n  public index: number;\n\n  /**\n   * @name coords\n   * @memberof NDIter.prototype\n   * @type Number[]\n   */\n  public coords: number[];\n\n  /**\n   * @name pos\n   * @memberof NDIter.prototype\n   * @type Number\n   */\n  public pos: number;\n\n  /**\n   * @name factors\n   * @memberof NDIter.prototype\n   * @type Number[]\n   */\n  public factors: number[];\n\n  /**\n   * @name contiguous\n   * @memberof NDIter.prototype\n   * @type Boolean\n   */\n  public contiguous: boolean;\n\n  constructor(x: NDArray | ArrayLike<any>) {\n    const {\n      shape,\n      strides,\n      length,\n    } = array(x);\n\n    this.x = array(x);\n    this.length = length;\n    this.lengthm1 = length - 1;\n    this.nd = shape.length;\n    this.ndm1 = this.nd - 1;\n\n    this.shape = Array(V_MAXDIMS).fill(0);\n    this.strides = Array(V_MAXDIMS).fill(0);\n    this.shapem1 = Array(V_MAXDIMS).fill(0);\n    this.coords = Array(V_MAXDIMS).fill(0);\n    this.backstrides = Array(V_MAXDIMS).fill(0);\n    this.factors = Array(V_MAXDIMS).fill(0);\n\n    if (this.nd !== 0) {\n      this.factors[this.nd - 1] = 1;\n    }\n\n    this.contiguous = true;\n\n    let stride = 1;\n    let i;\n    for (i = 0; i < this.nd; i += 1) {\n      this.shape[i] = shape[i];\n      this.shapem1[i] = shape[i] - 1;\n      this.strides[i] = strides[i];\n      this.backstrides[i] = strides[i] * this.shapem1[i];\n      this.coords[i] = 0;\n\n      // Check if C-contiguous\n      if (shape[this.nd - i - 1] !== 1) {\n        if (strides[i] !== stride) {\n          this.contiguous = false;\n        }\n\n        stride *= shape[this.nd - i - 1];\n      }\n\n      if (i > 0) {\n        this.factors[this.nd - i - 1] = this.factors[this.nd - i] * shape[this.nd - i];\n      }\n    }\n\n    this.index = 0;\n    this.pos = 0;\n  }\n\n  /**\n   * @function done\n   * @memberof NDIter.prototype\n   * @description Returns true if the iterator is done, false otherwise\n   * @returns {Boolean}\n   * @example\n   * import { array } from 'vectorious/core/array';\n   * import { NDIter } from 'vectorious/iterator';\n   * \n   * const iter = new NDIter(array([1, 2, 3]));\n   * iter.done(); // false\n   */\n  done() {\n    return this.index > this.lengthm1;\n  }\n\n  /**\n   * @function current\n   * @memberof NDIter.prototype\n   * @description Returns the current element of the iterator\n   * @returns {Object} current\n   * @returns {Number} [current.value]\n   * @returns {Boolean} current.done\n   * @example\n   * import { array } from 'vectorious/core/array';\n   * import { NDIter } from 'vectorious/iterator';\n   * \n   * const iter = new NDIter(array([1, 2, 3]));\n   * iter.current(); // { value: 1, done: false }\n   */\n  current(): IteratorResult<number[] | any> {\n    const done = this.done();\n    return {\n      value: done ? undefined : this.pos,\n      done,\n    }\n  }\n\n  /**\n   * @function next1d\n   * @memberof NDIter.prototype\n   * @description Steps to the next position in the iterator, assuming it is 1 dimensional.\n   */\n  next1d() {\n    const {\n      strides,\n    } = this;\n\n    this.pos += strides[0];\n    this.coords[0] += 1;\n  }\n\n  /**\n   * @function nextcontiguous\n   * @memberof NDIter.prototype\n   * @description Steps to the next position in the iterator, assuming its data is contiguous.\n   */\n  nextcontiguous() {\n    this.pos += 1;\n  }\n\n  /**\n   * @function next2d\n   * @memberof NDIter.prototype\n   * @description Steps to the next position in the iterator, assuming it is 2 dimensional.\n   */\n  next2d() {\n    const {\n      strides,\n      shapem1,\n      backstrides,\n    } = this;\n\n    if (this.coords[1] < shapem1[1]) {\n      this.coords[1] += 1;\n      this.pos += strides[1];\n    } else {\n      this.coords[1] = 0;\n      this.coords[0] += 1;\n      this.pos += strides[0] - backstrides[1];\n    }\n  }\n\n  /**\n   * @function next2d\n   * @memberof NDIter.prototype\n   * @description Steps to the next position in the iterator\n   */\n  nextnd() {\n    const {\n      ndm1,\n      shapem1,\n      strides,\n      backstrides,\n    } = this;\n\n    let i;\n    for (i = ndm1; i >= 0; i -= 1) {\n      if (this.coords[i] < shapem1[i]) {\n        this.coords[i] += 1;\n        this.pos += strides[i];\n        break;\n      } else {\n        this.coords[i] = 0;\n        this.pos -= backstrides[i];\n      }\n    }\n  }\n\n  /**\n   * @function next\n   * @memberof NDIter.prototype\n   * @description\n   * Steps to the next position in the iterator.\n   * Returns the current index of the iterator, or undefined if done.\n   * @returns {Object}\n   * @example\n   * import { array } from 'vectorious/core/array';\n   * import { NDIter } from 'vectorious/iterator';\n   * \n   * const iter = new NDIter(array([1, 2, 3]));\n   * iter.next(); // { value: 2, done: false }\n   * iter.next(); // { value: 3, done: false }\n   * iter.next(); // { done: true }\n   */\n  next() {\n    const current = this.current();\n\n    this.index += 1;\n\n    const {\n      ndm1,\n      contiguous,\n    } = this;\n\n    if (ndm1 === 0) {\n      this.next1d();\n    } else if (contiguous) {\n      this.nextcontiguous();\n    } else if (ndm1 === 1) {\n      this.next2d();\n    } else {\n      this.nextnd();\n    }\n\n    return current;\n  }\n\n  [Symbol.iterator]() {\n    return this;\n  }\n}\n\n/**\n * @class NDMultiIter\n * @description Constructs an NDMultiIter instance.\n * @param {NDArray[]} ...args\n */\nexport class NDMultiIter implements Iterator<number[]> {\n  /**\n   * @name iters\n   * @memberof NDMultiIter.prototype\n   * @type NDIter[]\n   */\n  public iters: NDIter[];\n\n  /**\n   * @name shape\n   * @memberof NDMultiIter.prototype\n   * @type Number[]\n   */\n  public shape: number[];\n\n  /**\n   * @name nd\n   * @memberof NDMultiIter.prototype\n   * @type Number\n   */\n  public nd: number;\n\n  /**\n   * @name length\n   * @memberof NDMultiIter.prototype\n   * @type Number\n   */\n  public length: number;\n\n  /**\n   * @name lengthm1\n   * @memberof NDMultiIter.prototype\n   * @type Number\n   */\n  public lengthm1: number;\n\n  /**\n   * @name numiter\n   * @memberof NDMultiIter.prototype\n   * @type Number\n   */\n  public numiter: number;\n\n  /**\n   * @name index\n   * @memberof NDMultiIter.prototype\n   * @type Number\n   */\n  public index: number;\n\n  /**\n   * @name pos\n   * @memberof NDMultiIter.prototype\n   * @type Number[]\n   */\n  public pos: number[];\n\n  constructor(...args: (NDArray | ArrayLike<any>)[]) {\n    this.iters = args.map(arg => new NDIter(arg));\n    this.numiter = args.length;\n\n    let i;\n    let nd;\n    for (i = 0, nd = 0; i < this.numiter; i += 1) {\n      nd = Math.max(nd, this.iters[i].x.shape.length);\n    }\n\n    this.nd = nd;\n    this.shape = Array(nd).fill(0);\n\n    let it;\n    let j;\n    let k;\n    let tmp;\n    for (i = 0; i < nd; i += 1) {\n      this.shape[i] = 1;\n      for (j = 0; j < this.numiter; j += 1) {\n        it = this.iters[j];\n        k = i + it.x.shape.length - nd;\n        if (k >= 0) {\n          tmp = it.x.shape[k];\n          if (tmp == 1) {\n            continue;\n          }\n          if (this.shape[i] == 1) {\n            this.shape[i] = tmp;\n\n          } else if (this.shape[i] !== tmp) {\n            throw new Error('shape mismatch');\n          }\n        }\n      }\n    }\n\n    tmp = this.shape.reduce((acc, dim) => acc * dim, 1);\n\n    this.length = tmp;\n    this.lengthm1 = tmp - 1;\n\n    for (i = 0; i < this.numiter; i += 1) {\n      it = this.iters[i];\n      it.nd = this.nd;\n      it.ndm1 = this.nd - 1;\n      it.length = tmp;\n      it.lengthm1 = tmp - 1;\n\n      nd = it.x.shape.length;\n      if (nd !== 0) {\n        it.factors[this.nd - 1] = 1;\n      }\n\n      for (j = 0; j < this.nd; j += 1) {\n        it.shape[j] = this.shape[j];\n        it.shapem1[j] = this.shape[j] - 1;\n        k = j + nd - this.nd;\n\n        if ((k < 0) || it.x.shape[k] !== this.shape[j]) {\n          it.contiguous = false;\n          it.strides[j] = 0;\n        } else {\n          it.strides[j] = it.x.strides[k];\n        }\n\n        it.backstrides[j] = it.strides[j] * it.shapem1[j];\n\n        if (j > 0) {\n          it.factors[this.nd - j - 1] = it.factors[this.nd - j] * this.shape[this.nd - j]\n        }\n      }\n    }\n\n    this.index = 0;\n    this.pos = Array(this.numiter).fill(0);\n  }\n\n  /**\n   * @function done\n   * @memberof NDMultiIter\n   * @description Returns true if the iterator is done, false otherwise\n   * @returns {Boolean}\n   * @example\n   * import { array } from 'vectorious/core/array';\n   * import { NDMultiIter } from 'vectorious/iterator';\n   * \n   * const iter = new NDMultiIter(array([1, 2, 3]), array([4, 5, 6]));\n   * iter.done(); // false\n   */\n  done() {\n    return this.index > this.lengthm1;\n  }\n\n  /**\n   * @function current\n   * @memberof NDMultiIter\n   * @description Returns the current indices of the iterators\n   * @returns {Object} current\n   * @returns {Number[]} [current.value]\n   * @returns {Boolean} current.done\n   * @example\n   * import { array } from 'vectorious/core/array';\n   * import { NDMultiIter } from 'vectorious/iterator';\n   * \n   * const iter = new NDMultiIter(array([1, 2, 3]), array([4, 5, 6]));\n   * iter.current(); // { value: [0, 0], done: false }\n   */\n  current(): IteratorResult<number[] | any> {\n    const done = this.done();\n    return {\n      value: done ? undefined : this.pos,\n      done,\n    }\n  }\n\n  /**\n   * @function next\n   * @memberof NDMultiIter\n   * @description\n   * Steps to the next position in the iterator.\n   * Returns the current indices of the iterators, or undefined if done.\n   * @returns {Object} current\n   * @returns {Number[]} [current.value]\n   * @returns {Boolean} current.done\n   * @example\n   * import { array } from 'vectorious/core/array';\n   * import { NDMultiIter } from 'vectorious/iterator';\n   * \n   * const iter = new NDMultiIter(array([1, 2, 3]), array([4, 5, 6]));\n   * iter.next(); // { value: [0, 0], done: false }\n   * iter.next(); // { value: [1, 1], done: false }\n   * iter.next(); // { value: [2, 2], done: false },\n   * iter.next(); // { value: undefined, done: true },\n   */\n  next() {\n    const current = this.current();\n\n    this.index += 1;\n\n    const {\n      numiter,\n    } = this;\n\n    let it;\n    let i;\n    for (i = 0; i < numiter; i += 1) {\n      it = this.iters[i];\n      this.pos[i] = it.pos;\n      it.next();\n    }\n\n    return current;\n  }\n\n  [Symbol.iterator]() {\n    return this;\n  }\n}\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { abs: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function abs\n * @description Returns the absolute value of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { abs } from 'vectorious/core/abs';\n * \n * abs([-1, -2, -3]) // => array([1, 2, 3])\n */\nexport const abs = (x: NDArray | ArrayLike<any>): NDArray => array(x).abs();\n\n/**\n * @function abs\n * @memberof NDArray.prototype\n * @description Returns the absolute value of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([-1, -2, -3]).abs() // <=> array([1, 2, 3])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { acos: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function acos\n * @description Returns the arccosine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { acos } from 'vectorious/core/acos';\n * \n * acos([-1, 0, 1]); // => array([3.141592653589793, 1.5707963267948966, 0])\n */\nexport const acos = (x: NDArray | ArrayLike<any>): NDArray => array(x).acos();\n\n/**\n * @function acos\n * @memberof NDArray.prototype\n * @description Returns the arccosine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([-1, 0, 1]).acos(); // <=> array([3.141592653589793, 1.5707963267948966, 0])\n */\nexport default function (this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { acosh: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function acosh\n * @description Returns the hyperbolic arccosine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { acosh } from 'vectorious/core/acosh';\n * \n * acosh([1, 2, 3]); // => array([0, 1.316957950592041, 1.7627471685409546])\n */\nexport const acosh = (x: NDArray | ArrayLike<any>): NDArray => array(x).acosh();\n\n/**\n * @function acosh\n * @memberof NDArray.prototype\n * @description Returns the hyperbolic arccosine of each element of current array.\n * @param {NDArray} x\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).acosh(); // <=> array([0, 1.316957950592041, 1.7627471685409546])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import {\n  TypedArray,\n  DType,\n} from './types';\n\nlet nblas: any;\ntry {\n  nblas = require('nblas');\n} catch (err) {}\n\nexport const NoTrans = nblas && nblas.NoTrans;\nexport const Trans = nblas && nblas.Trans;\n\nexport function axpy(dtype: DType, n: number, alpha: number, x: TypedArray, inc_x: number, y: TypedArray, inc_y: number) {\n  if (x.length / inc_x !== n || y.length / inc_y !== n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nblas.daxpy(n, alpha, x, inc_x, y, inc_y);\n    case 'float32':\n      return nblas.saxpy(n, alpha, x, inc_x, y, inc_y);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function dot(dtype: DType, n: number, x: TypedArray, inc_x: number, y: TypedArray, inc_y: number) {\n  if (x.length / inc_x !== n || y.length / inc_y !== n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nblas.ddot(n, x, inc_x, y, inc_y);\n    case 'float32':\n      return nblas.sdot(n, x, inc_x, y, inc_y);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function iamax(dtype: DType, n: number, x: TypedArray, inc_x: number) {\n  if (x.length / inc_x !== n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nblas.idamax(n, x, inc_x);\n    case 'float32':\n      return nblas.isamax(n, x, inc_x);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function gemm(dtype: DType, transx: number, transy: number, m: number, n: number, k: number, alpha: number, x: TypedArray, ldx: number, y: TypedArray, ldy: number, beta: number, z: TypedArray, ldz: number) {\n  const { length: l1 } = x;\n  const { length: l2 } = y;\n  const { length: l3 } = z;\n\n  if ((transx === nblas.NoTrans && l1 !== ldx * m) || (transx === nblas.Trans && l1 !== ldx * k)) {\n    throw new Error('lengths do not match');\n  }\n\n  if ((transy === nblas.NoTrans && l2 !== ldy * k) || (transy === nblas.Trans && l2 !== ldy * n)) {\n    throw new Error('lengths do not match');\n  }\n\n  if (l3 !== ldz * m) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nblas.dgemm(transx, transy, m, n, k, alpha, x, ldx, y, ldy, beta, z, ldz);\n    case 'float32':\n      return nblas.sgemm(transx, transy, m, n, k, alpha, x, ldx, y, ldy, beta, z, ldz);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function nrm2(dtype: DType, n: number, x: TypedArray, inc_x: number) {\n  if (x.length / inc_x !== n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nblas.dnrm2(n, x, inc_x);\n    case 'float32':\n      return nblas.snrm2(n, x, inc_x);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function scal(dtype: DType, n: number, alpha: number, x: TypedArray, inc_x: number) {\n  if (x.length / inc_x !== n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nblas.dscal(n, alpha, x, inc_x);\n    case 'float32':\n      return nblas.sscal(n, alpha, x, inc_x);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n", "import { NDArray } from './';\nimport { NDMultiIter } from '../iterator';\nimport { array } from './array';\nimport * as blas from '../blas';\n\n/**\n * @static\n * @memberof module:Globals\n * @function add\n * @description\n * Adds `y` multiplied by `alpha` to `x`.\n * Accelerated with BLAS `?axpy`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { add } from 'vectorious/core/add';\n * \n * add([1, 2, 3], [4, 5, 6]); // => array([5, 7, 9])\n */\nexport const add = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>, alpha: number = 1): NDArray =>\n  array(x).add(array(y), alpha);\n\n/**\n * @function add\n * @memberof NDArray.prototype\n * @description\n * Adds `x` multiplied by `alpha` to the current array.\n * Accelerated with BLAS `?axpy`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).add([4, 5, 6]); // <=> array([5, 7, 9])\n */\nexport default function (this: NDArray, x: NDArray | ArrayLike<any>, alpha: number = 1): NDArray {\n  const { data: d1, length: l1, dtype } = this;\n  const { data: d2 } = array(x);\n\n  try {\n    blas.axpy(dtype, l1, alpha, d2, 1, d1, 1);\n  } catch (err) {\n    const iter = new NDMultiIter(this, x);\n\n    for (const [i, j] of iter) {\n      d1[i] += alpha * d2[j];\n    }\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\nconst { acos: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function angle\n * @description Determines the angle between the `x` and `y`\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {number}\n * @example\n * import { angle } from 'vectorious/core/angle';\n * \n * angle([1, 2, 3], [4, 5, 6]); // => 0.22572622788897287\n */\nexport const angle = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): number =>\n  array(x).angle(array(y));\n\n/**\n * @function angle\n * @memberof NDArray.prototype\n * @description Determines the angle between the current vector and `x`.\n * @param {NDArray} x\n * @returns {number}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).angle([4, 5, 6]); // <=> 0.22572622788897287\n */\nexport default function(this: NDArray, x: NDArray | ArrayLike<any>): number {\n  return f(this.dot(array(x)) / this.norm() / array(x).norm());\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { asin: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function asin\n * @description Returns the arcsine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { asin } from 'vectorious/core/asin';\n * \n * asin([-1, 0, 1]) // => array([-1.5707963705062866, 0, 1.5707963705062866])\n */\nexport const asin = (x: NDArray | ArrayLike<any>): NDArray => array(x).asin();\n\n/**\n * @function asin\n * @memberof NDArray.prototype\n * @description Returns the arcsine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([-1, 0, 1]).asin() // <=> array([-1.5707963705062866, 0, 1.5707963705062866])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { asinh: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function asinh\n * @description Returns the hyperbolic arcsine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { asinh } from 'vectorious/core/asinh';\n * \n * asinh([0, 1, 2]) // => array([0, 0.8813735842704773, 1.4436354637145996])\n */\nexport const asinh = (x: NDArray | ArrayLike<any>): NDArray => array(x).asinh();\n\n/**\n * @function asinh\n * @memberof NDArray.prototype\n * @description Returns the hyperbolic arcsine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([0, 1, 2]).asinh() // <=> array([0, 0.8813735842704773, 1.4436354637145996])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { atan: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function atan\n * @description Returns the arctangent of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { atan } from 'vectorious/core/atan';\n * \n * atan([1, 2, 3]); // => array([0.7853981852531433, 1.1071487665176392, 1.249045729637146])\n */\nexport const atan = (x: NDArray | ArrayLike<any>): NDArray => array(x).atan();\n\n/**\n * @function atan\n * @memberof NDArray.prototype\n * @description Returns the arctangent of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).atan() // <=> array([0.7853981852531433, 1.1071487665176392, 1.249045729637146])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { atanh: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function atanh\n * @description Returns the hyperbolic arctangent of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { atanh } from 'vectorious/core/atanh';\n * \n * atanh([0, -0.5]); // => array([0, -0.5493061542510986])\n */\nexport const atanh = (x: NDArray | ArrayLike<any>): NDArray => array(x).atanh();\n\n/**\n * @function atanh\n * @memberof NDArray.prototype\n * @description Returns the hyperbolic arctangent of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([0, -0.5]).atanh(); // <=> array([0, -0.5493061542510986])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function zeros\n * @description Creates an array containing zeros (`0`) of shape `shape`\n * @param {Number[]} ...shape\n * @returns {NDArray}\n * @example\n * import { zeros } from 'vectorious/core/zeros';\n * \n * zeros(3); // => array([0, 0, 0])\n */\nexport const zeros = (...shape: number[]): NDArray =>\n  new NDArray(\n    new Float64Array(shape.reduce((sum: number, dim: number) => sum * dim, 1)),\n    { shape }\n  ).fill(0);\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { zeros } from './zeros';\n\n/**\n * @static\n * @memberof module:Globals\n * @function augment\n * @description Augments `x` and `y`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { augment } from 'vectorious/core/augment';\n * \n * augment([[1, 2], [3, 4]], [[1], [2]]); // => array([[1, 2, 1], [3, 4, 2]])\n */\nexport const augment = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).augment(array(y));\n\n/**\n * @function augment\n * @memberof NDArray.prototype\n * @description Augments `x` with current matrix.\n * @param {NDArray} x\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([[1, 2], [3, 4]]).augment(array([[1], [2]])); // <=> array([[1, 2, 1], [3, 4, 2]])\n */\nexport default function(this: NDArray, x: NDArray | ArrayLike<any>): NDArray {\n  const [r1, c1] = this.shape;\n  const [r2, c2] = array(x).shape;\n  const { data: d1 } = this;\n  const { data: d2 } = array(x);\n\n  if (r2 === 0 || c2 === 0) {\n    return this;\n  }\n\n  if (r1 !== r2) {\n    throw new Error('rows do not match');\n  }\n\n  const y = zeros(r1, c1 + c2);\n  const { data: d3 } = y;\n\n  let i: number;\n  let j: number;\n  for (i = 0; i < r1; i += 1) {\n    for (j = 0; j < c1; j += 1) {\n      d3[i * (c1 + c2) + j] = d1[i * c1 + j];\n    }\n  }\n\n  for (i = 0; i < r2; i += 1) {\n    for (j = 0; j < c2; j += 1) {\n      d3[i * (c1 + c2) + (j + c1)] = d2[i * c2 + j];\n    }\n  }\n\n  return y;\n};\n", "\nimport { NDArray } from './';\nimport { NDMultiIter } from '../iterator';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function binOp\n * @description Perform binary operation `f` on `y` in `x`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { binOp } from 'vectorious/core/binOp';\n * \n * binOp([1, 2, 3], [4, 5, 6], (a, b) => a + b); // => array([[5, 7, 9])\n */\nexport const binOp = (\n  x: NDArray | ArrayLike<any>,\n  y: NDArray | ArrayLike<any>,\n  f: (\n    a: number,\n    b: number,\n    index: number\n  ) => number\n): NDArray => array(x).binOp(array(y), f);\n\n/**\n * @function binOp\n * @memberof NDArray.prototype\n * @description Perform binary operation `f` on `x` in the current array.\n * @param {NDArray} x\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).binOp([4, 5, 6], (a, b) => a + b); // => array([[5, 7, 9])\n */\nexport default function(\n  this: NDArray,\n  x: NDArray | ArrayLike<any>,\n  f: (\n    a: number,\n    b: number,\n    index: number\n  ) => number\n): NDArray {\n  const { data: d1 } = this;\n  const { data: d2 } = array(x);\n\n  const iter = new NDMultiIter(this, x);\n  for (const [i, j] of iter) {\n    d1[i] = f(d1[i], d2[j], i);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { cbrt: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function cbrt\n * @description Returns the cube root of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { cbrt } from 'vectorious/core/cbrt';\n * \n * cbrt([1, 8, 27]); // => array([1, 2, 3])\n */\nexport const cbrt = (x: NDArray | ArrayLike<any>): NDArray => array(x).cbrt();\n\n/**\n * @function cbrt\n * @memberof NDArray.prototype\n * @description Returns the cube root of each element of current array.\n * @returns {this}\n * @example\n * import { cbrt } from 'vectorious/core/cbrt';\n * \n * cbrt([1, 8, 27]); // => array([1, 2, 3])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { ceil: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function ceil\n * @description Returns smallest integer greater than or equal to of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { ceil } from 'vectorious/core/ceil';\n * \n * ceil([0.5, 1.5, 2.5]); // => array([1, 2, 3])\n */\nexport const ceil = (x: NDArray | ArrayLike<any>): NDArray => array(x).ceil();\n\n/**\n * @function ceil\n * @memberof NDArray.prototype\n * @description Returns smallest integer greater than or equal to of each element of current array.\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([0.5, 1.5, 2.5]).ceil(); // <=> array([1, 2, 3])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function check\n * @description Asserts if indices `i, j, ..., n` are within the bounds of `x`\n * @param {NDArray} x\n * @param {Number[]} ...indices\n * @throws {Error} index out of bounds\n * @example\n * import { check } from 'vectorious/core/check';\n * \n * check([0.5, 1.5, 2.5], 3); // Error: index out of bounds\n */\nexport const check = (x: NDArray | ArrayLike<any>, ...indices: number[]): void => {\n  array(x).check(...indices);\n};\n\n/**\n * @function check\n * @memberof NDArray.prototype\n * @description Asserts if indices `i, j, ..., n` are within the bounds of current array\n * @param {Number[]} ...indices\n * @throws {Error} index out of bounds\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([0.5, 1.5, 2.5]).check(3); // Error: index out of bounds\n */\nexport default function(this: NDArray, ...indices: number[]): void {\n  const { shape: s1, length: l1 } = this;\n\n  if (indices.length === 1) {\n    const [i] = indices;\n    if (i < 0 || i > l1 - 1 || !Number.isFinite(i)) {\n      throw new Error('index out of bounds');\n    }\n  } else if (!s1.every((dim: number, i: number) =>\n    dim > indices[i]\n    && Number.isFinite(indices[i])\n    && indices[i] >= 0\n  )) {\n    throw new Error('index out of bounds');\n  }\n};\n", "import { TypedArray } from '../types';\nimport { get_type } from '../util';\n\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function combine\n * @description Combines the vector `x` with `y`\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { combine } from 'vectorious/core/combine';\n * \n * combine([1, 2, 3], [4, 5, 6]); // => array([1, 2, 3, 4, 5, 6])\n */\nexport const combine = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).combine(array(y));\n\n/**\n * @function combine\n * @memberof NDArray.prototype\n * @description Combines the current vector with `x`\n * @param {NDArray} x\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).combine([4, 5, 6]); // => array([1, 2, 3, 4, 5, 6])\n */\nexport default function(this: NDArray, x: NDArray): NDArray {\n  if (this.shape.length !== 1 && x.shape.length !== 1) {\n    throw new Error('combine operation not permitted for multidimensional arrays');\n  }\n\n  const { length: l1, data: d1 } = this;\n  const { length: l2, data: d2 } = x;\n\n  if (l2 === 0) {\n    return this;\n  }\n\n  if (l1 === 0) {\n    this.data = new (get_type(x.dtype))(d2);\n    this.length = l2;\n    this.dtype = x.dtype;\n\n    return this;\n  }\n\n  const l3: number = l1 + l2;\n  const d3: TypedArray = new (get_type(this.dtype))(l3);\n\n  d3.set(d1);\n  d3.set(d2, l1);\n\n  this.data = d3;\n  this.length = l3;\n  this.shape = [l3];\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { zeros } from './zeros';\nimport { NDMultiIter } from '../iterator';\n\n/**\n * @static\n * @memberof module:Globals\n * @function copy\n * @description Makes a copy of `x`\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { copy } from 'vectorious/core/copy';\n * \n * copy([1, 2, 3]); // => array([1, 2, 3])\n */\nexport const copy = (x: NDArray | ArrayLike<any>): NDArray => array(x).copy();\n\n/**\n * @function copy\n * @memberof NDArray.prototype\n * @description Makes a copy of the class and underlying data\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).copy(); // => array([1, 2, 3])\n */\nexport default function(this: NDArray): NDArray {\n  const x = zeros(...this.shape);\n\n  const { data: d1 } = this;\n  const { data: d2 } = x;\n\n  const iter = new NDMultiIter(this, x);\n  for (const [i, j] of iter) {\n    d2[j] = d1[i];\n  }\n\n  return x;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { cos: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function cos\n * @description Returns the cosine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { cos } from 'vectorious/core/cos';\n * \n * cos([0, Math.PI / 2, Math.PI]); // => array([1, 0, -1])\n */\nexport const cos = (x: NDArray | ArrayLike<any>): NDArray => array(x).cos();\n\n/**\n * @function cos\n * @memberof NDArray.prototype\n * @description Returns the cosine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([0, Math.PI / 2, Math.PI]).cos(); // => array([1, 0, -1])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { cosh: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function cosh\n * @description Returns the hyperbolic cosine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { cosh } from 'vectorious/core/cosh';\n * \n * cosh([0, 1, 2]); // => array([1, 1.5430806875228882, 3.762195587158203])\n */\nexport const cosh = (x: NDArray | ArrayLike<any>): NDArray => array(x).cosh();\n\n/**\n * @function cosh\n * @memberof NDArray.prototype\n * @description Returns the hyperbolic cosine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([0, 1, 2]).cosh(); // => array([1, 1.5430806875228882, 3.762195587158203])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function cross\n * @description\n * Computes the cross product of the `x` and the vector `y`\n * This operation can only calculated for vectors with three components.\n * Otherwise it throws an exception.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { cross } from 'vectorious/core/cross';\n * \n * cross([1, 2, 3], [4, 5, 6]); // => array([-3, 6, -3])\n */\nexport const cross = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).cross(array(y));\n\n/**\n * @function cross\n * @memberof NDArray.prototype\n * @description\n * Computes the cross product of the current vector and the vector `x`\n * This operation can only calculated for vectors with three components.\n * Otherwise it throws an exception.\n * @param {NDArray} x\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).cross([4, 5, 6]); // <=> array([-3, 6, -3])\n */\nexport default function(this: NDArray, x: NDArray): NDArray {\n  const { length: l1 } = this;\n  const { length: l2 } = x;\n\n  if (l1 !== 3 || l2 !== 3) {\n    throw new Error('vectors must have three components');\n  }\n\n  const c1: number = this.y * x.z - this.z * x.y;\n  const c2: number = this.z * x.x - this.x * x.z;\n  const c3: number = this.x * x.y - this.y * x.x;\n\n  this.x = c1;\n  this.y = c2;\n  this.z = c3;\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function det\n * @description Gets the determinant of `x`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { det } from 'vectorious/core/det';\n * \n * det([[0, 1], [2, 3]]); // => -2\n */\nexport const det = (x: NDArray | ArrayLike<any>): number => array(x).det();\n\n/**\n * @function det\n * @memberof NDArray.prototype\n * @description Gets the determinant of current matrix using LU factorization.\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([[0, 1], [2, 3]]).det(); // => -2\n */\nexport default function(this: NDArray): number {\n  this.square();\n\n  const [n] = this.shape;\n  const [LU, ipiv] = this.copy().lu_factor();\n  const { data: d1 } = LU;\n\n  let product: number = 1;\n  let sign: number = 1;\n\n  let i: number;\n  for (i = 0; i < n; i += 1) {\n    product *= d1[i * n + i];\n    if (i !== ipiv[i] - 1) {\n      sign *= -1;\n    }\n  }\n\n  return sign * product;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function diagonal\n * @description Gets the diagonal of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { diagonal } from 'vectorious/core/diagonal';\n * \n * diagonal([[1, 2], [3, 4]]); // => array([1, 4])\n */\nexport const diagonal = (x: NDArray | ArrayLike<any>): NDArray =>\n  array(x).diagonal();\n\n/**\n * @function diagonal\n * @memberof NDArray.prototype\n * @description Gets the diagonal of current matrix.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).diagonal(); // => array([1, 4])\n */\nexport default function(this: NDArray): NDArray {\n  this.square();\n\n  const { length: l1 } = this;\n  const [r, c] = this.shape;\n  const l2: number = Math.min(r, c);\n\n  return this.reshape(l1).slice(0, l1, l2 + 1);\n};\n", "import { NDArray } from './';\nimport { NDMultiIter } from '../iterator';\nimport { array } from './array';\nimport * as blas from '../blas';\n\n/**\n * @static\n * @memberof module:Globals\n * @function dot\n * @description\n * Performs dot multiplication with `x` and `y`.\n * Accelerated with BLAS `?dot`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {Number}\n * @example\n * import { dot } from 'vectorious/core/dot';\n * \n * dot([1, 2, 3], [4, 5, 6]); // => 32\n */\nexport const dot = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): number =>\n  array(x).dot(array(y));\n\n/**\n * @function dot\n * @memberof NDArray.prototype\n * @description\n * Performs dot multiplication with `x` and current array\n * Accelerated with BLAS `?dot`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).dot([4, 5, 6]); // => 32\n */\nexport default function(this: NDArray, x: NDArray): number {\n  const { data: d1, length: l1, dtype } = this;\n  const { data: d2 } = x;\n\n  let result: number = 0;\n  try {\n    result = blas.dot(dtype, l1, d2, 1, d1, 1);\n  } catch (err) {\n    const iter = new NDMultiIter(this, x);\n\n    for (const [i, j] of iter) {\n      result += d1[i] * d2[j];\n    }\n  }\n\n  return result;\n};\n", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function eye\n * @description Creates an identity matrix of size `n` and type `type`.\n * @param {Number} n\n * @returns {NDArray}\n * @example\n * import { eye } from 'vectorious/core/eye';\n * \n * eye(2); // => array([[1, 0], [0, 1]])\n */\nexport const eye = (n: number): NDArray => {\n  const x = new NDArray(new Float64Array(n * n), { shape: [n, n] });\n  const { data: d1 } = x;\n\n  let i: number;\n  for (i = 0; i < n; i += 1) {\n    d1[i * n + i] = 1;\n  }\n\n  return x;\n};\n", "import { get_type } from '../util';\n\nimport { NDArray } from './';\nimport { array } from './array';\nimport { zeros } from './zeros';\nimport { eye } from './eye';\n\nlet nlapack: any;\ntry {\n  nlapack = require('nlapack');\n} catch (err) {}\n\n/**\n * @ignore\n *  \u250C   \u2510    \u250C     \u2510\u250C   \u2510\n *  \u2502Skl\u2502    \u2502c  \u2212s\u2502\u2502Skl\u2502\n *  \u2502   \u2502 := \u2502     \u2502\u2502   \u2502\n *  \u2502Sij\u2502    \u2502s   c\u2502\u2502Sij\u2502\n *  \u2514   \u2518    \u2514     \u2518\u2514   \u2518\n */\nconst rotate:\n  (x: NDArray, c: number, s: number, k: number, l: number, i: number, j: number) => void =\n  (x: NDArray, c: number, s: number, k: number, l: number, i: number, j: number): void => {\n    const [n] = x.shape;\n    const { data: d1 } = x;\n    const temp: number = d1[k * n + l];\n    const tau: number = 1 / (c + s);\n\n    d1[k * n + l] = temp - s * (d1[i * n + j] + tau * temp);\n    d1[i * n + j] += s * (temp - tau * d1[i * n + j]);\n  };\n\n/**\n * @static\n * @memberof module:Globals\n * @function eig\n * @description\n * Gets eigenvalues and eigenvectors of `x` using the Jacobi method.\n * Accelerated with LAPACK `?geev`.\n * @param {NDArray} x\n * @returns {Array<NDArray>}\n * @example\n * import { eig } from 'vectorious/core/eig';\n * \n * eig([[1, 0, 0], [0, 2, 0], [0, 0, 3]]); // => [array([1, 2, 3]), array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])]\n */\nexport const eig = (x: NDArray | ArrayLike<any>): [NDArray, NDArray] => array(x).eig();\n\n/**\n * @function eig\n * @memberof NDArray.prototype\n * @description\n * Gets eigenvalues and eigenvectors of the current matrix using the Jacobi method.\n * Accelerated with LAPACK `?geev`.\n * @returns {Array<NDArray>}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([[1, 0, 0], [0, 2, 0], [0, 0, 3]]).eig(); // => [array([1, 2, 3]), array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])]\n */\nexport default function(this: NDArray): [NDArray, NDArray] {\n  this.square();\n\n  const [n] = this.shape;\n\n  try {\n    if (!['float32', 'float64'].includes(this.dtype)) {\n      this.dtype = 'float32';\n      this.data = get_type(this.dtype).from(this.data);\n    }\n\n    const jobvl: typeof nlapack.NDArrayEigenvector = nlapack.NoEigenvector;\n    const jobvr: typeof nlapack.NDArrayEigenvector = nlapack.Eigenvector;\n\n    const wr = zeros(n);\n    const wi = zeros(n);\n\n    const vl = zeros(n, n);\n    const vr = zeros(n, n);\n\n    const { data: d1 } = this;\n    const { data: d2 } = wr;\n    const { data: d3 } = wi;\n    const { data: d4 } = vl;\n    const { data: d5 } = vr;\n    if (this.dtype === 'float64') {\n      nlapack.dgeev(jobvl, jobvr, n, d1, n, d2, d3, d4, n, d5, n);\n    }\n\n    if (this.dtype === 'float32') {\n      nlapack.sgeev(jobvl, jobvr, n, d1, n, d2, d3, d4, n, d5, n);\n    }\n\n    return [wr, vr];\n  } catch (err) {\n    const { data: d1 } = this;\n    const p = eye(n);\n\n    let max = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n\n    do {\n      // Find maximum off-diagonal element\n      for (i = 0; i < n; i += 1) {\n        for (j = i + 1; j < n; j += 1) {\n          if (Math.abs(d1[i * n + j]) >= max) {\n            max = Math.abs(d1[i * n + j]);\n            k = i;\n            l = j;\n          }\n        }\n      }\n\n      // Find c and s\n      let t;\n      if (Math.abs(d1[k * n + l]) < Math.abs(d1[l * n + l]) * 1e-36) {\n        t = d1[k * n + l] / d1[l * n + l];\n      } else {\n        const phi = d1[l * n + l] / 2 * d1[k * n + l];\n        t = 1 / (Math.abs(phi) + Math.sqrt(phi * phi + 1));\n      }\n\n      const c = 1 / Math.sqrt(t * t + 1);\n      const s = t * c;\n\n      const e = d1[k * n + l];\n      d1[k * n + l] = 0;\n      d1[k * n + k] -= t * e;\n      d1[l * n + l] += t * e;\n\n      // Rotate rows and columns k and l\n      for (i = 0; i < k; i += 1) {\n        rotate(this, c, s, i, k, i, l);\n      }\n\n      for (i = k + 1; i < l; i += 1) {\n        rotate(this, c, s, k, i, i, l);\n      }\n\n      for (i = l + 1; i < n; i += 1) {\n        rotate(this, c, s, k, i, l, i);\n      }\n\n      // Rotate eigenvectors\n      for (i = 0; i < n; i += 1) {\n        rotate(p, c, s, i, k, i, l);\n      }\n    } while (max >= 1e-9);\n\n    return [this.diagonal(), p];\n  }\n};\n", "import { NDArray } from './';\nimport { NDMultiIter } from '../iterator';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function equals\n * @description Checks if `x` and `y` are equal.\n * @param {NDArray} x\n * @param {NDArray} y\n * @param {Number} tolerance\n * @returns {Boolean}\n * @example\n * import { equals } from 'vectorious/core/equals';\n * \n * equals([1, 2, 3], [1, 2, 3]); // => true\n */\nexport const equals = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>, tolerance: number = 1e-6): boolean =>\n  array(x).equals(array(y), tolerance);\n\n/**\n * @function equals\n * @memberof NDArray.prototype\n * @description Checks if current array and `x` are equal.\n * @param {NDArray} x\n * @param {Number} tolerance\n * @returns {Boolean}\n * @example\n * import { equals } from 'vectorious/core/equals';\n * \n * array([1, 2, 3]).equals([1, 2, 3]); // => true\n */\nexport default function(this: NDArray, x: NDArray, tolerance: number = 1e-6): boolean {\n  const { data: d1 } = this;\n  const { data: d2 } = x;\n\n  const iter = new NDMultiIter(this, x);\n\n  for (const [i, j] of iter) {\n    if (Math.abs(d1[i] - d2[j]) > tolerance) {\n      return false;\n    }\n  }\n\n  return true;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @deprecated\n * @static\n * @memberof module:Globals\n * @function equidimensional\n * @description Asserts if `x` and `y` have the same shape\n * @param {NDArray} x\n * @param {NDArray} y\n * @throws {Error} shapes x and y do not match\n * @example\n * import { equidimensional } from 'vectorious/core/equidimensional';\n * \n * equidimensional([1, 2, 3], [1, 2]); // Error: shapes 3 and 2 do not match\n */\nexport const equidimensional = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): void => {\n  array(x).equidimensional(array(y));\n};\n\n/**\n * @deprecated\n * @function equidimensional\n * @memberof NDArray.prototype\n * @description Asserts if current array and `x` have the same shape\n * @param {NDArray} x\n * @throws {Error} shapes x and y do not match\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).equidimensional([1, 2]); // Error: shapes 3 and 2 do not match\n */\nexport default function(this: NDArray, x: NDArray): void {\n  const { shape: s1 } = this;\n  const { shape: s2 } = x;\n\n  if (!s1.every((dim: number, i: number) => dim === s2[i])) {\n    throw new Error(`shapes ${s1} and ${s2} do not match`);\n  }\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @deprecated\n * @static\n * @memberof module:Globals\n * @function equilateral\n * @description Asserts if `x` and `y` have the same length\n * @param {NDArray} x\n * @param {NDArray} y\n * @throws {Error} lengths x and y do not match\n * @example\n * import { equilateral } from 'vectorious/core/equilateral';\n * \n * equilateral([1, 2, 3], [1, 2]); // Error: lengths 3 and 2 do not match\n */\nexport const equilateral = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): void => {\n  array(x).equilateral(array(y));\n};\n\n/**\n * @deprecated\n * @function equilateral\n * @memberof NDArray.prototype\n * @description Asserts if current array and `x` have the same length\n * @param {NDArray} x\n * @throws {Error} lengths x and y do not match\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).equilateral([1, 2]); // Error: lengths 3 and 2 do not match\n */\nexport default function(this: NDArray, x: NDArray): void {\n  const { length: l1 } = this;\n  const { length: l2 } = x;\n\n  if (l1 !== l2) {\n    throw new Error(`lengths ${l1} and ${l2} do not match`);\n  }\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { exp: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function exp\n * @description\n * Returns e^x of each element of `x`, where x is the argument,\n * and e is Euler's constant (2.718\u2026), the base of the natural logarithm.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { exp } from 'vectorious/core/exp';\n * \n * exp([1, 2, 3]); // => array([2.7182817459106445, 7.389056205749512, 20.08553695678711])\n */\nexport const exp = (x: NDArray | ArrayLike<any>): NDArray => array(x).exp();\n\n/**\n * @function exp\n * @memberof NDArray.prototype\n * @description\n * Returns e^x of each element of current array, where x is the argument,\n * and e is Euler's constant (2.718\u2026), the base of the natural logarithm.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).exp(); // <=> array([2.7182817459106445, 7.389056205749512, 20.08553695678711])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { expm1: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function expm1\n * @description Returns subtracting 1 from exp(x) of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { expm1 } from 'vectorious/core/expm1';\n * \n * expm1([1, 2, 3]); // => array([1.7182817459106445, 6.389056205749512, 19.08553695678711])\n */\nexport const expm1 = (x: NDArray | ArrayLike<any>): NDArray => array(x).expm1();\n\n/**\n * @function expm1\n * @memberof NDArray.prototype\n * @description Returns subtracting 1 from exp(x) of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).expm1(); // <=> array([1.7182817459106445, 6.389056205749512, 19.08553695678711])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\n/**\n * @static\n * @memberof module:Globals\n * @function fill\n * @description Fills `x` with a scalar value\n * @param {NDArray} x\n * @param {Number} value\n * @returns {NDArray}\n * @example\n * import { fill } from 'vectorious/core/fill';\n * \n * fill([1, 2, 3], 0); // => array([0, 0, 0])\n */\nexport const fill = (\n  x: NDArray | ArrayLike<any>,\n  value: number | ((index: number) => number) = 0\n): NDArray =>\n  array(x).fill(value);\n\n/**\n * @function fill\n * @memberof NDArray.prototype\n * @description Fills the current array with a scalar value\n * @param {Number} value\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).fill(0); // <=> array([0, 0, 0])\n */\nexport default function(this: NDArray, value: number | ((index: number) => number) = 0): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = value instanceof Function ? value(iter.pos) : value;\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { floor: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function floor\n * @description Returns the largest integer less than or equal to a number of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { floor } from 'vectorious/core/floor';\n * \n * floor([1.5, 2.5, 3.5]); // => array([1, 2, 3])\n */\nexport const floor = (x: NDArray | ArrayLike<any>): NDArray => array(x).floor();\n\n/**\n * @function floor\n * @memberof NDArray.prototype\n * @description Returns the largest integer less than or equal to a number of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1.5, 2.5, 3.5]).floor(); // <=> array([1, 2, 3])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { TypedArray } from '../types';\n\nimport { NDArray } from './';\nimport { NDIter } from '../iterator';\n\n/**\n * @static\n * @memberof module:Globals\n * @function forEach\n * @description Equivalent to `TypedArray.prototype.forEach`.\n * @param {NDArray} x\n * @param {Function} f\n * @example\n * import { forEach } from 'vectorious/core/forEach';\n * \n * forEach([1, 2, 3], console.log);\n * // 1 0 [ 1, 2, 3 ]\n * // 2 1 [ 1, 2, 3 ]\n * // 3 2 [ 1, 2, 3 ]\n */\nexport const forEach = (\n  x: NDArray,\n  f: (value: number, i: number, src: TypedArray) => void\n): void => {\n  x.forEach(f);\n};\n\n/**\n * @function forEach\n * @memberof NDArray.prototype\n * @description Equivalent to `TypedArray.prototype.forEach`.\n * @param {Function} f\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).forEach(console.log);\n * // 1 0 [ 1, 2, 3 ]\n * // 2 1 [ 1, 2, 3 ]\n * // 3 2 [ 1, 2, 3 ]\n */\nexport default function(\n  this: NDArray,\n  f: (value: number, i: number, src: TypedArray) => void\n): void {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    f.call(this, d1[i!], i!, d1);\n  }\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { fround: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function fround\n * @description Returns the nearest single precision float representation of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { fround } from 'vectorious/core/fround';\n * \n * fround([-5.05, 5.05]); // => array([-5.050000190734863, 5.050000190734863])\n */\nexport const fround = (x: NDArray | ArrayLike<any>): NDArray => array(x).fround();\n\n/**\n * @function fround\n * @memberof NDArray.prototype\n * @description Returns the nearest single precision float representation of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([-5.05, 5.05]).fround(); // <=> array([-5.050000190734863, 5.050000190734863])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import {\n  TypedArray,\n  DType,\n} from './types';\n\nlet nlapack: any;\ntry {\n  nlapack = require('nlapack');\n} catch (err) {}\n\nexport function getrf(dtype: DType, m: number, n: number, x: TypedArray, ldx: number, ipiv: Int32Array) {\n  if (x.length !== m * n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nlapack.dgetrf(m, n, x, ldx, ipiv);\n    case 'float32':\n      return nlapack.sgetrf(m, n, x, ldx, ipiv);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function getri(dtype: DType, n: number, x: TypedArray, ldx: number, ipiv: Int32Array) {\n  if (x.length !== n * n) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nlapack.dgetri(n, x, ldx, ipiv);\n    case 'float32':\n      return nlapack.sgetri(n, x, ldx, ipiv);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n\nexport function gesv(dtype: DType, n: number, nrhs: number, x: TypedArray, ldx: number, ipiv: Int32Array, y: TypedArray, ldy: number) {\n  if (x.length !== ldx * n || y.length !== ldy * nrhs) {\n    throw new Error('lengths do not match');\n  }\n\n  switch (dtype) {\n    case 'float64':\n      return nlapack.dgesv(n, nrhs, x, ldx, ipiv, y, ldy);\n    case 'float32':\n      return nlapack.sgesv(n, nrhs, x, ldx, ipiv, y, ldy);\n    default:\n      throw new Error('wrong dtype');\n  }\n}\n", "import { NDArray } from './';\nimport { NDIter } from '../iterator';\nimport { array } from './array';\n// import { diagonal } from './diagonal';\nimport * as lapack from '../lapack';\n\n/**\n * @static\n * @memberof module:Globals\n * @function gauss\n * @description\n * Gauss-Jordan elimination (i.e. returns the reduced row echelon form) of `x`.\n * Accelerated with LAPACK `?getrf`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { gauss } from 'vectorious/core/gauss';\n * \n * gauss([[1, 2, 3], [4, 5, 6]]); // => array([[1, 0, -1], [-0, 1, 2]])\n */\nexport const gauss = (x: NDArray | ArrayLike<any>): NDArray => array(x).gauss();\n\n/**\n * @function gauss\n * @memberof NDArray.prototype\n * @description\n * Gauss-Jordan elimination (i.e. returns the reduced row echelon form) of the current matrix.\n * Accelerated with LAPACK `?getrf`.\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([[1, 2, 3], [4, 5, 6]]).gauss(); // <=> array([[1, 0, -1], [-0, 1, 2]])\n */\nexport default function(this: NDArray): NDArray {\n  const { shape: [r, c], data: d1, dtype } = this;\n\n  try {\n    const { data: d1 } = this;\n    const ipiv = new Int32Array(Math.min(r, c));\n\n    lapack.getrf(dtype, r, c, d1, c, ipiv);\n\n    const iter = new NDIter(this);\n\n    // Zero out lower triangular part of matrix\n    let [ci, cj] = iter.coords;\n    for (const i of iter) {\n      if (cj < ci) {\n        d1[i!] = 0;\n      }\n\n      [ci, cj] = iter.coords;\n    }\n  } catch (err) {\n    let lead: number = 0;\n    let leadValue: number;\n    let pivot: number;\n\n    let i: number;\n    let j: number;\n    let k: number;\n    for (i = 0; i < r; i += 1) {\n      if (c <= lead) {\n        return this;\n      }\n\n      j = i;\n      while (d1[j * c + lead] === 0) {\n        j += 1;\n        if (r === j) {\n          j = i;\n          lead += 1;\n\n          if (c === lead) {\n            return this;\n          }\n        }\n      }\n\n      if (i !== j) {\n        this.swap(i, j);\n      }\n\n      pivot = d1[i * c + lead];\n      if (pivot !== 0) {\n        for (k = 0; k < c; k += 1) {\n          d1[i * c + k] /= pivot;\n        }\n      }\n\n      for (j = 0; j < r; j += 1) {\n        leadValue = d1[j * c + lead];\n        if (j !== i) {\n          for (k = 0; k < c; k += 1) {\n            d1[j * c + k] -= d1[i * c + k] * leadValue;\n          }\n        }\n      }\n\n      lead += 1;\n    }\n\n    for (i = 0; i < r; i += 1) {\n      pivot = 0;\n      for (j = 0; j < c; j += 1) {\n        if (pivot === 0) {\n          pivot = d1[i * c + j];\n        }\n      }\n\n      if (pivot === 0) {\n        for (k = 0; k < c; k += 1) {\n          d1[i * c + k] /= pivot;\n        }\n      }\n    }\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function get\n * @description Gets the element at `i, j, ..., n` from `x`\n * @param {NDArray} x\n * @param {Number[]} ...indices\n * @returns {Number}\n * @example\n * import { get } from 'vectorious/core/get';\n * \n * get([1, 2, 3], 2); // 3\n */\nexport const get = (x: NDArray | ArrayLike<any>, ...indices: number[]): number =>\n  array(x).get(...indices);\n\n/**\n * @function get\n * @memberof NDArray.prototype\n * @description Gets the element at `i, j, ..., n` from current vector.\n * @param {Number[]} ...indices\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).get(2); // 3\n */\nexport default function(this: NDArray, ...indices: number[]): number {\n  this.check(...indices);\n\n  const { data: d1, shape: s1 } = this;\n  const { length: ndim } = s1;\n  let index: number = indices[ndim - 1];\n\n  let i: number;\n  let j: number;\n  for (i = 0; i < ndim - 1; i += 1) {\n    let p: number = 1;\n    for (j = i + 1; j < ndim; j += 1) {\n      p *= s1[j];\n    }\n\n    index += indices[i] * p;\n  }\n\n  return d1[index];\n};\n", "import { NDArray } from './';\nimport { NDIter } from '../iterator';\nimport { array } from './array';\nimport { eye } from './eye';\nimport { augment } from './augment';\nimport { zeros } from './zeros';\nimport * as lapack from '../lapack';\n\n/**\n * @static\n * @memberof module:Globals\n * @function inv\n * @description\n * Determines the inverse of `x`.\n * Accelerated with LAPACK `?getrf` and `?getri`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { inv } from 'vectorious/core/inv';\n * \n * inv([[2, -1, 0], [-1, 2, -1], [0, -1, 2]]); // => array([[0.75, 0.5, 0.25], [0.5, 1, 0.5], [0.25, 0.5, 0.75]])\n */\nexport const inv = (x: NDArray | ArrayLike<any>): NDArray => array(x).inv();\n\n/**\n * @function inv\n * @memberof NDArray.prototype\n * @description\n * Determines the inverse of current matrix using Gaussian elimination.\n * Accelerated with LAPACK `?getri`.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([[2, -1, 0], [-1, 2, -1], [0, -1, 2]]).inv(); // <=> array([[0.75, 0.5, 0.25], [0.5, 1, 0.5], [0.25, 0.5, 0.75]])\n */\nexport default function(this: NDArray): NDArray {\n  this.square();\n\n  const { shape: [n], dtype } = this;\n\n  try {\n    const { data: d1 } = this;\n    const ipiv = new Int32Array(n);\n\n    lapack.getrf(dtype, n, n, d1, n, ipiv);\n    lapack.getri(dtype, n, d1, n, ipiv);\n\n    return this;\n  } catch (err) {\n    const identity = eye(n);\n    const rref = augment(this, identity).gauss();\n    const left = zeros(n, n);\n    const right = zeros(n, n);\n\n    const { data: d1 } = rref;\n    const { data: d2 } = left;\n    const { data: d3 } = right;\n\n    const iter = new NDIter(rref);\n    let [ci, cj] = iter.coords;\n    for (const i of iter) {\n      if (cj < n) {\n        d2[ci * n + cj] = d1[i!];\n      } else {\n        d3[ci * n + (cj - n)] = d1[i!];\n      }\n\n      [ci, cj] = iter.coords;\n    }\n\n    if (!left.equals(identity)) {\n      throw new Error('matrix is not invertible');\n    }\n\n    return right;\n  }\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { log: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function log\n * @description Returns the natural logarithm (log_e, also ln) of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { log } from 'vectorious/core/log';\n * \n * log([1, 2, 3]); // => array([0, 0.6931471824645996, 1.0986123085021973])\n */\nexport const log = (x: NDArray | ArrayLike<any>): NDArray => array(x).log();\n\n/**\n * @function log\n * @memberof NDArray.prototype\n * @description Returns the natural logarithm (log_e, also ln) of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).log(); // <=> array([0, 0.6931471824645996, 1.0986123085021973])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { log10: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function log10\n * @description Returns the base 10 logarithm of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { log10 } from 'vectorious/core/log10';\n * \n * log10([10, 100, 1000]); // => array([1, 2, 3])\n */\nexport const log10 = (x: NDArray | ArrayLike<any>): NDArray => array(x).log10();\n\n/**\n * @function log10\n * @memberof NDArray.prototype\n * @description Returns the base 10 logarithm of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([10, 100, 1000]).log10(); // <=> array([1, 2, 3])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { log1p: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function log1p\n * @description Returns the natural logarithm (log_e, also ln) of 1 + x for each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { log1p } from 'vectorious/core/log1p';\n * \n * log1p([1, 2, 3]); // => array([0.6931471824645996, 1.0986123085021973, 1.3862943649291992])\n */\nexport const log1p = (x: NDArray | ArrayLike<any>): NDArray => array(x).log1p();\n\n/**\n * @function log1p\n * @memberof NDArray.prototype\n * @description Returns the natural logarithm (log_e, also ln) of 1 + x for each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]); // <=> array([0.6931471824645996, 1.0986123085021973, 1.3862943649291992])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { log2: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function log2\n * @description Returns the base 2 logarithm of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { log2 } from 'vectorious/core/log2';\n * \n * log2([1, 2, 4]); // => array([0, 1, 2])\n */\nexport const log2 = (x: NDArray | ArrayLike<any>): NDArray => array(x).log2();\n\n/**\n * @function log2\n * @memberof NDArray.prototype\n * @description Returns the base 2 logarithm of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 4]).log2(); // => array([0, 1, 2])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { NDIter } from '../iterator';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function lu\n * @description\n * Performs full LU decomposition on `x`.\n * Accelerated with LAPACK `?getrf`.\n * @param {NDArray} x\n * @returns {Array<NDArray, Int32Array>}\n * @example\n * import { lu } from 'vectorious/core/lu';\n * \n * lu([[1, 3, 5], [2, 4, 7], [1, 1, 0]]); // => [array([[1, 0, 0], [0.5, 1, 0], [0.5, -1, 1]]), array([[2, 4, 7], [0, 1, 1.5], [0, 0, -2]]), Int32Array([2, 2, 3])]\n */\nexport const lu = (x: NDArray | ArrayLike<any>): [NDArray, NDArray, Int32Array] =>\n  array(x).lu();\n\n/**\n * @function lu\n * @memberof NDArray.prototype\n * @description\n * Performs full LU decomposition on current matrix.\n * Accelerated with LAPACK `?getrf`.\n * @returns {Array<NDArray|Int32Array>}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([[1, 3, 5], [2, 4, 7], [1, 1, 0]]).lu(); // => [array([[1, 0, 0], [0.5, 1, 0], [0.5, -1, 1]]), array([[2, 4, 7], [0, 1, 1.5], [0, 0, -2]]), Int32Array([2, 2, 3])]\n */\nexport default function (this: NDArray): [NDArray, NDArray, Int32Array] {\n  const [LU, ipiv] = this.copy().lu_factor();\n  const L = LU.copy();\n  const U = LU.copy();\n  const { data: d1 } = L;\n  const { data: d2 } = U;\n\n  const iter = new NDIter(LU);\n\n  let [ci, cj] = iter.coords;\n  for (const i of iter) {\n    if (cj < ci) {\n      d2[i!] = 0;\n    } else {\n      d1[i!] = ci === cj ? 1 : 0;\n    }\n\n    [ci, cj] = iter.coords;\n  }\n\n  return [L, U, ipiv];\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport * as lapack from '../lapack';\n\n/**\n * @static\n * @memberof module:Globals\n * @function lu_factor\n * @description\n * Performs LU factorization on `x`.\n * Accelerated with LAPACK `?getrf`.\n * @param {NDArray} x\n * @returns {Array<NDArray|Int32Array>}\n * @example\n * import { lu_factor } from 'vectorious/core/lu_factor';\n * \n * lu_factor([[1, 3, 5], [2, 4, 7], [1, 1, 0]]); // => [array([[2, 4, 7], [0.5, 1, 1.5], [0.5, -1, -2]]), Int32Array([2, 2, 3])]\n */\nexport const lu_factor = (x: NDArray | ArrayLike<any>): [NDArray, Int32Array] =>\n  array(x).lu_factor();\n\n/**\n * @function lu_factor\n * @memberof NDArray.prototype\n * @description\n * Performs LU factorization on current matrix.\n * Accelerated with LAPACK `?getrf`.\n * @returns {Array<NDArray|Int32Array>}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([[1, 3, 5], [2, 4, 7], [1, 1, 0]]).lu_factor(); // <=> [array([[2, 4, 7], [0.5, 1, 1.5], [0.5, -1, -2]]), Int32Array([2, 2, 3])]\n */\nexport default function(this: NDArray): [NDArray, Int32Array] {\n  const { data: d1, shape: [n], dtype } = this;\n  const ipiv: Int32Array = new Int32Array(n);\n\n  try {\n    lapack.getrf(dtype, n, n, d1, n, ipiv);\n  } catch (err) {\n    let max: number;\n    let abs: number;\n    let diag: number;\n    let p: number;\n\n    let i: number;\n    let j: number;\n    let k: number;\n    for (k = 0; k < n; k += 1) {\n      p = k;\n      max = Math.abs(d1[k * n + k]);\n      for (j = k + 1; j < n; j += 1) {\n        abs = Math.abs(d1[j * n + k]);\n        if (max < abs) {\n          max = abs;\n          p = j;\n        }\n      }\n\n      ipiv[k] = p + 1;\n\n      if (p !== k) {\n        this.swap(k, p);\n      }\n\n      diag = d1[k * n + k];\n      for (i = k + 1; i < n; i += 1) {\n        d1[i * n + k] /= diag;\n      }\n\n      for (i = k + 1; i < n; i += 1) {\n        for (j = k + 1; j < n - 1; j += 2) {\n          d1[i * n + j] -= d1[i * n + k] * d1[k * n + j];\n          d1[i * n + j + 1] -= d1[i * n + k] * d1[k * n + j + 1];\n        }\n\n        if (j === n - 1) {\n          d1[i * n + j] -= d1[i * n + k] * d1[k * n + j];\n        }\n      }\n    }\n  }\n\n  return [this, ipiv];\n};\n", "import { TypedArray } from '../types';\n\nimport { NDArray } from './';\nimport { NDIter } from '../iterator';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function map\n * @description Equivalent to `TypedArray.prototype.map`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { map } from 'vectorious/core/map';\n * \n * map([1, 2, 3], value => -value); // => array([-1, -2, -3])\n */\nexport const map = (\n  x: NDArray | ArrayLike<any>,\n  f: (value: number, i: number, src: TypedArray) => number\n): NDArray => array(x).map(f);\n\n/**\n * @function map\n * @memberof NDArray.prototype\n * @description Equivalent to `TypedArray.prototype.map`.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).map(value => -value); // => array([-1, -2, -3])\n */\nexport default function(\n  this: NDArray,\n  f: (value: number, i: number, src: TypedArray) => number\n): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n  const map = f.bind(this);\n\n  const copy = this.copy();\n  const { data: d2 } = copy;\n\n  for (const i of iter) {\n    d2[i!] = map(d1[i!], i!, d1);\n  }\n\n  return copy;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\nimport * as blas from '../blas';\n\n/**\n * @static\n * @memberof module:Globals\n * @function max\n * @description\n * Gets the maximum value (largest) element of `x`.\n * Accelerated with BLAS `i?amax`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { max } from 'vectorious/core/max';\n * \n * max([1, 2, 3]); // => 3\n */\nexport const max = (x: NDArray | ArrayLike<any>): number => array(x).max();\n\n/**\n * @function max\n * @memberof NDArray.prototype\n * @description\n * Gets the maximum value (smallest) element of current array.\n * Accelerated with BLAS `i?amax`.\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).max(); // => 3\n */\nexport default function(this: NDArray): number {\n  const { data: d1, length: l1, dtype } = this;\n  let max: number = Number.NEGATIVE_INFINITY;\n\n  try {\n    max = d1[blas.iamax(dtype, l1, d1, 1)];\n  } catch (err) {\n    const iter = new NDIter(this);\n\n    for (const i of iter) {\n      const value = d1[i!];\n      if (max < value) {\n        max = value;\n      }\n    }\n  }\n\n  return max;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\n/**\n * @static\n * @memberof module:Globals\n * @function mean\n * @description Gets the arithmetic mean of `x`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { mean } from 'vectorious/core/mean';\n * \n * mean([1, 2, 3]); // => 2\n */\nexport const mean = (x: NDArray | ArrayLike<any>): number => array(x).mean();\n\n/**\n * @function mean\n * @memberof NDArray.prototype\n * @description Gets the arithmetic mean of current array.\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).mean(); // => 2\n */\nexport default function(this: NDArray): number {\n  const { data: d1, length: l1 } = this;\n  const iter = new NDIter(this);\n\n  let mean: number = 0;\n  for (const i of iter) {\n    mean += d1[i!];\n  }\n\n  return mean / l1;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\n/**\n * @static\n * @memberof module:Globals\n * @function min\n * @description Gets the minimum value (smallest) element of `x`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { min } from 'vectorious/core/min';\n * \n * min([1, 2, 3]); // => 1\n */\nexport const min = (x: NDArray | ArrayLike<any>): number => array(x).min();\n\n/**\n * @function min\n * @memberof NDArray.prototype\n * @description Gets the minimum value (smallest) element of current array.\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).min(); // 1\n */\nexport default function(this: NDArray): number {\n  const { data: d1 } = this;\n\n  const iter = new NDIter(this);\n\n  let min: number = Number.POSITIVE_INFINITY;\n  for (const i of iter) {\n    const value = d1[i!];\n    if (min > value) {\n      min = value;\n    }\n  }\n\n  return min;\n};\n", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function matrix\n * @description Creates a matrix of `r` rows and `c` columns.\n * @param {Number} r\n * @param {Number} c\n * @returns {NDArray}\n * @example\n * import { matrix } from 'vectorious/core/matrix';\n * \n * matrix(2, 2); // => array([[0, 0], [0, 0]])\n */\nexport const matrix = (r: number, c: number): NDArray =>\n  new NDArray(\n    new Float64Array(r * c),\n    { shape: [r, c] }\n  );\n", "import { NDArray } from './';\nimport { NDIter } from '../iterator';\nimport { array } from './array';\nimport { matrix } from './matrix';\nimport * as blas from '../blas';\n\n/**\n * @static\n * @memberof module:Globals\n * @function multiply\n * @description\n * Multiplies two matrices `x` and `y` of matching dimensions.\n * Accelerated with BLAS `?gemm`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { multiply } from 'vectorious/core/multiply';\n * \n * multiply([[1, 2]], [[1], [2]]); // => array([[5]])\n */\nexport const multiply = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).multiply(array(y));\n\n/**\n * @function multiply\n * @memberof NDArray.prototype\n * @description\n * Multiplies current matrix with `x`.\n * Accelerated with BLAS `?gemm`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([[1, 2]]).multiply([[1], [2]]); // <=> array([[5]])\n */\nexport default function(this: NDArray, x: NDArray): NDArray {\n  const { shape: [r1, c1], data: d1, dtype } = this;\n  const { shape: [r2, c2], data: d2 } = x;\n\n  if (c1 !== r2) {\n    throw new Error('sizes do not match');\n  }\n\n  const y = matrix(r1, c2);\n  const { data: d3 } = y;\n\n  try {\n    blas.gemm(dtype, blas.NoTrans, blas.NoTrans, r1, c2, c1, 1, d1, c1, d2, c2, 0, d3, c2);\n  } catch (err) {\n    const iter = new NDIter(y);\n\n    let k;\n    let [ci, cj] = iter.coords;\n    for (const i of iter) {\n      let sum = 0;\n      for (k = 0; k < c1; k += 1) {\n        sum += d1[ci * c1 + k] * d2[k * c2 + cj];\n      }\n\n      d3[i!] = sum;\n      [ci, cj] = iter.coords;\n    }\n  }\n\n  return y;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport * as blas from '../blas';\n\nconst { sqrt: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function norm\n * @description\n * Calculates the norm of current array (also called L2 norm or Euclidean length).\n * Accelerated with BLAS `?nrm2`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { norm } from 'vectorious/core/norm';\n * \n * norm([1, 2, 3]); // => 3.7416574954986572\n */\nexport const norm = (x: NDArray | ArrayLike<any>): number => array(x).norm();\n\n/**\n * @function norm\n * @memberof NDArray.prototype\n * @description\n * Calculates the norm of current array (also called L2 norm or Euclidean length).\n * Accelerated with BLAS `?nrm2`.\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).norm(); // => 3.7416574954986572\n */\nexport default function(this: NDArray): number {\n  const { data: d1, length: l1, dtype } = this;\n  let result: number = 0;\n\n  try {\n    result = blas.nrm2(dtype, l1, d1, 1);\n  } catch (err) {\n    result = f(this.dot(this));\n  }\n\n  return result;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function normalize\n * @description Normalizes `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { normalize } from 'vectorious/core/normalize';\n * \n * normalize([1, 2, 3]); // => array([0.26726123690605164, 0.5345224738121033, 0.8017836809158325])\n */\nexport const normalize = (x: NDArray | ArrayLike<any>): NDArray =>\n  array(x).normalize();\n\n/**\n * @function normalize\n * @memberof NDArray.prototype\n * @description Normalizes current vector.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).normalize(); // => array([0.26726123690605164, 0.5345224738121033, 0.8017836809158325])\n */\nexport default function(this: NDArray): NDArray {\n  return this.scale(1 / this.norm());\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { pow: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function pow\n * @description Returns each element of `x` to the exponent power, that is, element^exponent.\n * @param {NDArray} x\n * @param {Number} exponent\n * @returns {NDArray}\n * @example\n * import { pow } from 'vectorious/core/pow';\n * \n * pow([1, 2, 3], 2); // => array([1, 4, 9])\n */\nexport const pow = (x: NDArray | ArrayLike<any>, exponent: number): NDArray =>\n  array(x).pow(exponent);\n\n/**\n * @function pow\n * @memberof NDArray.prototype\n * @description Returns each element of current array to the exponent power, that is, element^exponent.\n * @param {Number} exponent\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).pow(2); // <=> array([1, 4, 9])\n */\nexport default function(this: NDArray, exponent: number): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!], exponent);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\n/**\n * @static\n * @memberof module:Globals\n * @function prod\n * @description Product of all elements of `x`.\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { prod } from 'vectorious/core/prod';\n * \n * prod([1, 2, 3]); // => 6\n */\nexport const prod = (x: NDArray | ArrayLike<any>): number => array(x).prod();\n\n/**\n * @function prod\n * @memberof NDArray.prototype\n * @description Product of all elements of current array\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).prod(); // => 6\n */\nexport default function(this: NDArray): number {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  let prod: number = 1;\n  for (const i of iter) {\n    prod *= d1[i!];\n  }\n\n  return prod;\n};\n", "import { NDArray } from './';\nimport { NDMultiIter } from '../iterator';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function product\n * @description Hadamard product of `x` and `y`\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { product } from 'vectorious/core/product';\n * \n * product([1, 2, 3], [4, 5, 6]); // => array([4, 10, 18])\n */\nexport const product = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).product(array(y));\n\n/**\n * @function product\n * @memberof NDArray.prototype\n * @description Hadamard product of current matrix and `x`\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).product([4, 5, 6]); // <=> array([4, 10, 18])\n */\nexport default function(this: NDArray, x: NDArray): NDArray {\n  const { data: d1 } = this;\n  const { data: d2 } = x;\n\n  const iter = new NDMultiIter(this, x);\n  for (const [i, j] of iter) {\n    d1[i!] *= d2[j!];\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function project\n * @description Projects the `y` onto `x` using the projection formula `(y * (x * y / y * y))`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { project } from 'vectorious/core/project';\n * \n * project([1, 2, 3], [4, 5, 6]); // => array([1.6623376607894897, 2.0779221057891846, 2.49350643157959])\n */\nexport const project = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).project(array(y));\n\n/**\n * @function project\n * @memberof NDArray.prototype\n * @description Projects the current vector onto `x` using the projection formula `(y * (x * y / y * y))`.\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).project([4, 5, 6]); // <=> array([1.6623376607894897, 2.0779221057891846, 2.49350643157959])\n */\nexport default function(this: NDArray, x: NDArray): NDArray {\n  return x.scale(this.dot(x) / x.dot(x));\n};\n", "import { TypedArray } from '../types';\nimport { get_type } from '../util';\n\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function push\n * @description Pushes a new `value` into `x`.\n * @param {NDArray} x\n * @param {Number} value\n * @returns {NDArray}\n * @example\n * import { push } from 'vectorious/core/push';\n * \n * push([1, 2, 3], 4); // => array([1, 2, 3, 4])\n */\nexport const push = (x: NDArray | ArrayLike<any>, value: number): NDArray =>\n  array(x).push(value);\n\n/**\n * @function push\n * @memberof NDArray.prototype\n * @description Pushes a new `value` into current vector.\n * @param {Number} value\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).push(4); // => array([1, 2, 3, 4])\n */\nexport default function(this: NDArray, value: number): NDArray {\n  if (this.shape.length !== 1) {\n    throw new Error('push operation not permitted for multidimensional arrays');\n  }\n\n  const { data: d1, length: l1 } = this;\n  const l2: number = l1 + 1;\n  const d2: TypedArray = new (get_type(this.dtype))(l2);\n\n  d2.set(d1);\n  d2[l1] = value;\n\n  this.data = d2;\n  this.length = l2;\n  this.shape = [l2];\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { NDIter } from '../iterator';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function rank\n * @description Finds the rank of `x` using gaussian elimination.\n * @param {NDArray} x\n * @param {Number} tolerance\n * @returns {Number}\n * @example\n * import { rank } from 'vectorious/core/rank';\n * \n * rank([[1, 1, 1], [2, 2, 2], [3, 3, 3]]); // => 1\n */\nexport const rank = (x: NDArray | ArrayLike<any>, tolerance: number = 1e-6): number => array(x).rank(tolerance);\n\n/**\n * @function rank\n * @memberof NDArray.prototype\n * @description Finds the rank of current matrix using gaussian elimination.\n * @param {Number} tolerance\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([[1, 1, 1], [2, 2, 2], [3, 3, 3]]).rank(); // => 1\n * @todo Switch to SVD algorithm\n */\nexport default function(this: NDArray, tolerance: number = 1e-6): number {\n  const { data: d1 } = this.copy().gauss();\n\n  const iter = new NDIter(this);\n\n  let rk: number = 0;\n  let [ci, cj] = iter.coords;\n  for (const i of iter) {\n    if (rk <= ci && cj >= ci && d1[i!] > tolerance) {\n      rk += 1;\n    }\n\n    [ci, cj] = iter.coords;\n  }\n\n  return rk;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\n/**\n * @static\n * @memberof module:Globals\n * @function reciprocal\n * @description Gets the element-wise reciprocal of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { reciprocal } from 'vectorious/core/reciprocal';\n * \n * reciprocal([1, 2, 3]); // => array([1, 0.5, 0.3333333432674408])\n */\nexport const reciprocal = (x: NDArray | ArrayLike<any>): NDArray =>\n  array(x).reciprocal();\n\n/**\n * @function reciprocal\n * @memberof NDArray.prototype\n * @description Gets the element-wise reciprocal of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]); // => array([1, 0.5, 0.3333333432674408])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = 1 / d1[i!];\n  }\n\n  return this;\n};\n", "import { TypedArray } from '../types';\n\nimport { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\n/**\n * @static\n * @memberof module:Globals\n * @function reduce\n * @description Equivalent to `TypedArray.prototype.reduce`.\n * @param {NDArray} x\n * @param {Function} f\n * @param {Number} initialValue\n * @returns {Number}\n * @example\n * import { reduce } from 'vectorious/core/reduce';\n * \n * reduce([1, 2, 3], (a, b) => a + b, 0); // => 6\n */\nexport const reduce = (\n  x: NDArray,\n  f: (acc: number, value: number, i: number, src: TypedArray) => number,\n  initialValue?: number\n): number => array(x).reduce(f, initialValue);\n\n/**\n * @function reduce\n * @memberof NDArray.prototype\n * @description Equivalent to `TypedArray.prototype.reduce`.\n * @param {Function} f\n * @param {Number} initialValue\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).reduce((a, b) => a + b, 0); // => 6\n */\nexport default function(\n  this: NDArray,\n  f: (acc: number, value: number, i: number, src: TypedArray) => number,\n  initialValue?: number\n): number {\n  const { data: d1, length: l1 } = this;\n  if (l1 === 0 && typeof initialValue === 'undefined') {\n    throw new Error('Reduce of empty array with no initial value.');\n  }\n\n  const iter = new NDIter(this);\n  const reduce = f.bind(this);\n\n  let value: number;\n\n  if (typeof initialValue === 'undefined') {\n    value = d1[0];\n    iter.next();\n  } else {\n    value = initialValue;\n  }\n\n  for (const i of iter) {\n    value = reduce(value, d1[i!], i!, d1);\n  }\n\n  return value;\n};\n", "import { get_strides } from '../util';\n\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function reshape\n * @description Reshapes `x`\n * @param {NDArray} x\n * @param {Number[]} ...shape\n * @returns {NDArray}\n * @example\n * import { reshape } from 'vectorious/core/reshape';\n * \n * reshape([1, 2, 3, 4], 2, 2); // => array([[1, 2], [3, 4]])\n */\nexport const reshape = (x: NDArray | ArrayLike<any>, ...shape: number[]): NDArray =>\n  array(x).reshape(...shape);\n\n/**\n * @function reshape\n * @memberof NDArray.prototype\n * @description Reshapes current array\n * @param {Number[]} ...shape\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3, 4]).reshape(2, 2); // <=> array([[1, 2], [3, 4]])\n */\nexport default function(this: NDArray, ...shape: number[]): NDArray {\n  const { length } = this;\n  if (shape.reduce((sum: number, dim: number) => sum * dim, 1) !== length) {\n    throw new Error(`shape ${shape} does not match length ${length}`);\n  }\n\n  this.shape = shape;\n  this.strides = get_strides(shape);\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { round: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function round\n * @description Returns the value of each element of `x` rounded to the nearest integer.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { round } from 'vectorious/core/round';\n * \n * round([1.2, 2.8, 3.5]); // => array([1, 3, 4])\n */\nexport const round = (x: NDArray | ArrayLike<any>): NDArray => array(x).round();\n\n/**\n * @function round\n * @memberof NDArray.prototype\n * @description Returns the value of each element of current array rounded to the nearest integer.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1.2, 2.8, 3.5]).round(); // <=> array([1, 3, 4])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function row_add\n * @description Adds a multiple of one row multiplied by `scalar` to another inside `x`.\n * @param {NDArray} x\n * @param {Number} dest\n * @param {Number} source\n * @param {Number} scalar\n * @returns {NDArray}\n * @example\n * import { row_add } from 'vectorious/core/row_add';\n * \n * row_add([[1, 2], [3, 4]], 1, 0, 2); // => array([[1, 2], [5, 8]])\n */\nexport const row_add = (\n  x: NDArray | ArrayLike<any>,\n  dest: number,\n  source: number,\n  scalar: number = 1\n): NDArray =>\n  array(x).row_add(dest, source, scalar);\n\n/**\n * @function row_add\n * @memberof NDArray.prototype\n * @description Adds a multiple of one row multiplied by `scalar` to another inside current matrix.\n * @param {Number} dest\n * @param {Number} source\n * @param {Number} scalar\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([[1, 2], [3, 4]]).row_add(1, 0, 2); // <=> array([[1, 2], [5, 8]])\n */\nexport default function(this: NDArray, dest: number, source: number, scalar: number = 1): NDArray {\n  this.check(dest, 0);\n  this.check(source, 0);\n\n  const [, c] = this.shape;\n  const { data: d1 } = this;\n\n  let j: number;\n  for (j = 0; j < c; j += 1) {\n    d1[dest * c + j] += d1[source * c + j] * scalar;\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\nimport * as blas from '../blas';\n\n/**\n * @static\n * @memberof module:Globals\n * @function scale\n * @description\n * Multiplies all elements of `x` with a specified `scalar`.\n * Accelerated with BLAS `?scal`.\n * @param {NDArray} x\n * @param {Number} scalar\n * @returns {NDArray}\n * @example\n * import { scale } from 'vectorious/core/scale';\n * \n * scale([1, 2, 3], 2); // => array([2, 4, 6])\n */\nexport const scale = (x: NDArray | ArrayLike<any>, scalar: number): NDArray =>\n  array(x).scale(scalar);\n\n/**\n * @function scale\n * @memberof NDArray.prototype\n * @description\n * Multiplies all elements of current array with a specified `scalar`.\n * Accelerated with BLAS `?scal`.\n * @param {Number} scalar\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).scale(2); // <=> array([2, 4, 6])\n */\nexport default function(this: NDArray, scalar: number): NDArray {\n  const { data: d1, length: l1, dtype } = this;\n\n  try {\n    blas.scal(dtype, l1, scalar, d1, 1);\n  } catch (err) {\n    const iter = new NDIter(this);\n\n    for (const i of iter) {\n      d1[i!] *= scalar;\n    }\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function set\n * @description Sets the element at `i, j, ..., n` to `value`.\n * @param {NDArray} x\n * @param {Number[]} ...indices\n * @param {Number} value\n * @returns {NDArray}\n * @example\n * import { set } from 'vectorious/core/set';\n * \n * set([1, 2, 3], 1, 0); // => array([1, 0, 3])\n */\nexport const set = (x: NDArray, ...args: number[]): void => {\n  x.set(...args);\n};\n\n/**\n * @function set\n * @memberof NDArray.prototype\n * @description Sets the element at `i, j, ..., n` to `value`.\n * @param {Number[]} ...indices\n * @param {Number} value\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).set(1, 0); // <=> array([1, 0, 3])\n */\nexport default function(this: NDArray, ...args: number[]): void {\n  const indices: number[] = args.slice(0, -1);\n  const value: number = args[args.length - 1];\n\n  this.check(...indices);\n\n  const { shape: s1 } = this;\n  let index: number = indices[indices.length - 1];\n\n  let i: number;\n  for (i = 0; i < indices.length - 1; i += 1) {\n    index += indices[i] * s1[i + 1];\n  }\n\n  this.data[index] = value;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { sign: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function sign\n * @description\n * Returns the sign of each element of `x`, indicating\n * whether it is positive, negative or zero.\n * @param {Number} x\n * @returns {NDArray}\n * @example\n * import { sign } from 'vectorious/core/sign';\n * \n * sign([1, 2, 3]); // => array([1, 1, 1])\n */\nexport const sign = (x: NDArray | ArrayLike<any>): NDArray => array(x).sign();\n\n/**\n * @function sign\n * @memberof NDArray.prototype\n * @description\n * Returns the sign of each element of current array, indicating\n * whether it is positive, negative or zero.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).sign(); // <=> array([1, 1, 1])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { sin: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function sin\n * @description Returns the sine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { sin } from 'vectorious/core/sin';\n * \n * sin([0, Math.PI / 2, Math.PI]); // => array([0, 1, 0])\n */\nexport const sin = (x: NDArray | ArrayLike<any>): NDArray => array(x).sin();\n\n/**\n * @function sin\n * @memberof NDArray.prototype\n * @description Returns the sine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([0, Math.PI / 2, Math.PI]).sin(); // <=> array([0, 1, 0])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { sinh: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function sinh\n * @description Returns the hyperbolic sine of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { sinh } from 'vectorious/core/sinh';\n * \n * sinh([1, 2, 3]); // => array([1.175201177597046, 3.6268603801727295, 10.017874717712402])\n */\nexport const sinh = (x: NDArray | ArrayLike<any>): NDArray => array(x).sinh();\n\n/**\n * @function sinh\n * @memberof NDArray.prototype\n * @description Returns the hyperbolic sine of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).sinh(); // <=> array([1.175201177597046, 3.6268603801727295, 10.017874717712402])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { get_strides } from '../util';\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function slice\n * @description Slices `x` in the corresponding dimension\n * @param {NDArray} x\n * @param {Number} begin\n * @param {Number} end\n * @param {Number} step\n * @returns {NDArray}\n * @example\n * import { slice } from 'vectorious/core/slice';\n * \n * slice([1, 2, 3, 4], 0, 4, 2); // => array([1, 3])\n */\nexport const slice = (\n  x: NDArray | ArrayLike<any>,\n  begin?: number,\n  end?: number,\n  step?: number\n): NDArray =>\n  array(x).slice(begin, end, step);\n\n/**\n * @function slice\n * @memberof NDArray.prototype\n * @description Slices the current array in the corresponding dimension\n * @param {Number} begin\n * @param {Number} end\n * @param {Number} step\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3, 4]).slice(0, 4, 2); // => array([1, 3])\n */\nexport default function(\n  this: NDArray,\n  begin: number = 0,\n  end: number = this.shape[0],\n  step: number = 1\n): NDArray {\n  const { shape: s1 } = this;\n  const nd = s1.length;\n\n  if (begin < 0 || end < 0) {\n    return this.slice(begin < 0 ? nd + begin : begin, end < 0 ? nd + end : end);\n  }\n\n  if (step === 0) {\n    throw new Error('step argument cannot be 0');\n  }\n\n  const s2: number[] = [Math.ceil((end - begin) / step), ...s1.slice(1)];\n  const l2: number = s2.reduce((sum: number, dim: number) => sum * dim, 1);\n  const st2: number[] = get_strides(s2);\n\n  this.shape = s2;\n  this.length = l2;\n  this.strides = st2;\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport * as lapack from '../lapack';\n\n/**\n * @static\n * @memberof module:Globals\n * @function solve\n * @description\n * Solves the equation AX = B (where A is `x` and B is `y`).\n * Accelerated with LAPACK `?gesv`.\n * @param {NDArray} x\n * @param {NDArray} y\n * @returns {NDArray}\n * @example\n * import { solve } from 'vectorious/core/solve';\n * \n * solve([[1, 3, 5], [2, 4, 7], [1, 1, 0]], [[1], [3], [5]]); // => array([[3.25], [1.75], [-1.5]])\n */\nexport const solve = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).solve(array(y));\n\n/**\n * @function solve\n * @memberof NDArray.prototype\n * @description\n * Solves the equation AX = B (where A is current matrix and B is `x`).\n * Accelerated with LAPACK `?gesv`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([[1, 3, 5], [2, 4, 7], [1, 1, 0]]).solve([[1], [3], [5]]); // => array([[3.25], [1.75], [-1.5]])\n */\nexport default function(this: NDArray, x: NDArray): NDArray {\n  const { data: d1, dtype } = this;\n  const { data: d2, shape: [n, nrhs] } = x;\n\n  try {\n    const ipiv: Int32Array = new Int32Array(n);\n    lapack.gesv(dtype, n, nrhs, d1, n, ipiv, d2, nrhs);\n  } catch (err) {\n    const [LU, ipiv] = this.lu_factor();\n    const { data: d1 } = LU;\n    const { data: d2 } = x;\n\n    let i: number;\n    let j: number;\n    let k: number;\n\n    for (i = 0; i < ipiv.length; i += 1) {\n      if (i !== ipiv[i] - 1) {\n        x.swap(i, ipiv[i] - 1);\n      }\n    }\n\n    for (k = 0; k < nrhs; k += 1) {\n      for (i = 0; i < n; i += 1) {\n        for (j = 0; j < i; j += 1) {\n          d2[i * nrhs + k] -= d1[i * n + j] * d2[j * nrhs + k];\n        }\n      }\n\n      for (i = n - 1; i >= 0; i -= 1) {\n        for (j = i + 1; j < n; j += 1) {\n         d2[i * nrhs + k] -= d1[i * n + j] * d2[j * nrhs + k];\n        }\n\n        d2[i * nrhs + k] /= d1[i * n + i];\n      }\n    }\n  }\n\n  return x;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { sqrt: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function sqrt\n * @description Returns the positive square root of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { sqrt } from 'vectorious/core/sqrt';\n * \n * sqrt([1, 4, 9]); // => array([1, 2, 3])\n */\nexport const sqrt = (x: NDArray | ArrayLike<any>): NDArray => array(x).sqrt();\n\n/**\n * @function sqrt\n * @memberof NDArray.prototype\n * @description Returns the positive square root of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 4, 9]); // <=> array([1, 2, 3])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function square\n * @description Asserts if `x` is square.\n * @param {NDArray} x\n * @throws {Error} matrix is not square\n * @example\n * import { square } from 'vectorious/core/square';\n * \n * square([1, 2, 3]); // Error: matrix is not square\n */\nexport const square = (x: NDArray | ArrayLike<any>): void => {\n  array(x).square();\n};\n\n/**\n * @function square\n * @memberof NDArray.prototype\n * @description Asserts if current matrix is square.\n * @throws {Error} matrix is not square\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).square(); // Error: matrix is not square\n */\nexport default function(this: NDArray): void {\n  const { length } = this.shape;\n  const [r, c] = this.shape;\n\n  if (length !== 2 || r !== c) {\n    throw new Error('matrix is not square');\n  }\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function subtract\n * @description\n * Subtracts `y` from `x`.\n * Accelerated with BLAS `?axpy`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { subtract } from 'vectorious/core/subtract';\n * \n * subtract([1, 2, 3], [1, 1, 1]); // => array([0, 1, 2])\n */\nexport const subtract = (x: NDArray | ArrayLike<any>, y: NDArray | ArrayLike<any>): NDArray =>\n  array(x).subtract(array(y));\n\n/**\n * @function subtract\n * @memberof NDArray.prototype\n * @description\n * Subtracts `x` from the current array.\n * Accelerated with BLAS `?axpy`.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).subtract([1, 1, 1]); // <=> array([0, 1, 2])\n */\nexport default function (this: NDArray, x: NDArray): NDArray {\n  return this.add(x, -1);\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\n/**\n * @static\n * @memberof module:Globals\n * @function sum\n * @description Sum of `x`\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { sum } from 'vectorious/core/sum';\n * \n * sum([1, 2, 3]); // => 6\n */\nexport const sum = (x: NDArray | ArrayLike<any>): number => array(x).sum();\n\n/**\n * @function sum\n * @memberof NDArray.prototype\n * @description Sum of array elements\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).sum(); // => 6\n */\nexport default function(this: NDArray): number {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  let sum: number = 0;\n  for (const i of iter) {\n    sum += d1[i!];\n  }\n\n  return sum;\n};\n", "import { TypedArray } from '../types';\n\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function swap\n * @description Swaps two rows `i` and `j` in `x`.\n * @param {NDArray} x\n * @param {Number} i\n * @param {Number} j\n * @returns {NDArray}\n * @example\n * import { swap } from 'vectorious/core/swap';\n * \n * swap([[1, 2], [3, 4]], 0, 1); // => array([[3, 4], [1, 2]])\n */\nexport const swap = (x: NDArray | ArrayLike<any>, i: number, j: number): NDArray =>\n  array(x).swap(i, j);\n\n/**\n * @function swap\n * @memberof NDArray.prototype\n * @description Swaps two rows `i` and `j` in current matrix\n * @param {Number} i\n * @param {Number} j\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([[1, 2], [3, 4]]); // <=> array([[3, 4], [1, 2]])\n */\nexport default function(this: NDArray, i: number, j: number): NDArray {\n  this.check(i, 0);\n  this.check(j, 0);\n\n  const { data: d1 } = this;\n  const [, c] = this.shape;\n  const d2: TypedArray = d1.slice(i * c, (i + 1) * c);\n\n  d1.copyWithin(i * c, j * c, (j + 1) * c);\n  d1.set(d2, j * c);\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { tan: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function tan\n * @description Returns the tangent of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { tan } from 'vectorious/core/tan';\n * \n * tan([1, 2, 3]); // => array([1.5574077367782593, -2.185039758682251, -0.14254654943943024])\n */\nexport const tan = (x: NDArray | ArrayLike<any>): NDArray => array(x).tan();\n\n/**\n * @function tan\n * @memberof NDArray.prototype\n * @description Returns the tangent of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).tan(); // <=> array([1.5574077367782593, -2.185039758682251, -0.14254654943943024])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { tanh: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function tanh\n * @description Returns the hyperbolic tangent of each element of `x`.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { tanh } from 'vectorious/core/tanh';\n * \n * tanh([1, 2, 3]); // => array([0.7615941762924194, 0.9640275835990906, 0.9950547814369202])\n */\nexport const tanh = (x: NDArray | ArrayLike<any>): NDArray => array(x).tanh();\n\n/**\n * @function tanh\n * @memberof NDArray.prototype\n * @description Returns the hyperbolic tangent of each element of current array.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).tanh(); // <=> array([0.7615941762924194, 0.9640275835990906, 0.9950547814369202])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { NDIter } from '../iterator';\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function toArray\n * @description Converts `x` into a JavaScript array.\n * @param {NDArray} x\n * @returns {Array}\n * @example\n * import { toArray } from 'vectorious/core/toArray';\n * \n * toArray([1, 2, 3]); // => [1, 2, 3]\n */\nexport const toArray = (x: NDArray | ArrayLike<any>): number[] => array(x).toArray();\n\n/**\n * @function toArray\n * @memberof NDArray.prototype\n * @description Converts current vector into a JavaScript array.\n * @returns {Array}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).toArray(); // => [1, 2, 3]\n */\nexport default function(this: NDArray): number[] {\n  const { shape: s1 } = this;\n  const { length: ndim } = s1;\n  const iter = new NDIter(this);\n\n  let res: any = [];\n  let j: number;\n  let k: number;\n\n  for (const i of iter) {\n    const indices: number[] = [];\n    for (j = 0; j < ndim; j += 1) {\n      let p: number = 1;\n      for (k = j + 1; k < ndim; k += 1) {\n        p *= s1[k];\n      }\n\n      let index: number = Math.floor(i / p);\n      if (j > 0) {\n        index %= s1[j];\n      }\n\n      indices.push(index);\n    }\n\n    let node: any = res;\n    for (j = 0; j < ndim; j += 1) {\n      const index: number = indices[j];\n      if (j < ndim - 1) {\n        if (!node[index]) {\n          node[index] = [];\n        }\n        node = node[index];\n      } else {\n        node[index] = this.get(...indices);\n      }\n    }\n  }\n\n  return res;\n};\n", "import { inspect } from 'util';\n\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function toString\n * @description Converts `x` into a readable formatted string.\n * @param {NDArray} x\n * @returns {String}\n * @example\n * import { toString } from 'vectorious/core/toString';\n * \n * toString([1, 2, 3]); // => '1,2,3'\n */\nexport const toString = (x: NDArray | ArrayLike<any>): string => array(x).toString();\n\n/**\n * @function toString\n * @memberof NDArray.prototype\n * @description Converts current vector into a readable formatted string.\n * @returns {String}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).toString(); // => '1,2,3'\n */\nexport default function (this: NDArray): string {\n  return `array(${inspect(this.toArray(), { depth: 10, breakLength: 40 })}, dtype=${this.dtype})`;\n};\n", "import { inspect } from 'util';\n\nimport { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function toString\n * @description Converts `x` into a readable formatted string.\n * @param {NDArray} x\n * @returns {String}\n * @example\n * import { toString } from 'vectorious/core/toString';\n * \n * toString([1, 2, 3]); // => '1,2,3'\n */\nexport const toString = (x: NDArray | ArrayLike<any>): string => array(x).toString();\n\n/**\n * @function toString\n * @memberof NDArray.prototype\n * @description Converts current vector into a readable formatted string.\n * @returns {String}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).toString(); // => '1,2,3'\n */\nexport default function (this: NDArray): string {\n  return `array(${inspect(this.toArray(), { depth: 10, breakLength: 40 })}, dtype=${this.dtype})`;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function trace\n * @description Gets the trace of `x` (the sum of all diagonal elements).\n * @param {NDArray} x\n * @returns {Number}\n * @example\n * import { trace } from 'vectorious/core/trace';\n * \n * trace([[1, 2], [3, 4]]); // => 5\n */\nexport const trace = (x: NDArray | ArrayLike<any>): number => array(x).trace();\n\n/**\n * @function trace\n * @memberof NDArray.prototype\n * @description Gets the trace of the matrix (the sum of all diagonal elements).\n * @returns {Number}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1, 2, 3]).trace(); // => 5\n */\nexport default function(this: NDArray): number {\n  const [r, c] = this.shape;\n  const { data: d1 } = this;\n  const n: number = Math.min(r, c);\n\n  let result: number = 0;\n\n  let j: number;\n  for (j = 0; j < n; j += 1) {\n    result += d1[j * c + j];\n  }\n\n  return result;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\n\n/**\n * @static\n * @memberof module:Globals\n * @function transpose\n * @description Transposes `x` (mirror across the diagonal).\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { transpose } from 'vectorious/core/transpose';\n * \n * transpose([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); // => array([[1, 4, 7], [2, 5, 8], [3, 6, 9]])\n */\nexport const transpose = (x: NDArray | ArrayLike<any>): NDArray =>\n  array(x).transpose();\n\n/**\n * @function transpose\n * @memberof NDArray.prototype\n * @description Transposes current matrix (mirror across the diagonal).\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); // <=> array([[1, 4, 7], [2, 5, 8], [3, 6, 9]])\n */\nexport default function(this: NDArray): NDArray {\n  if (this.shape.length < 2) {\n    return this;\n  }\n\n  let tmp = this.shape[0];\n  this.shape[0] = this.shape[1];\n  this.shape[1] = tmp;\n\n  tmp = this.strides[0];\n  this.strides[0] = this.strides[1];\n  this.strides[1] = tmp;\n\n  return this;\n};\n", "import { NDArray } from './';\nimport { array } from './array';\nimport { NDIter } from '../iterator';\n\nconst { trunc: f } = Math;\n\n/**\n * @static\n * @memberof module:Globals\n * @function trunc\n * @description\n * Returns the integer part of each element of `x`,\n * removing any fractional digits.\n * @param {NDArray} x\n * @returns {NDArray}\n * @example\n * import { trunc } from 'vectorious/core/trunc';\n * \n * trunc([1.2, 2.8, 3.5]); // => array([1, 2, 3])\n */\nexport const trunc = (x: NDArray | ArrayLike<any>): NDArray => array(x).trunc();\n\n/**\n * @function trunc\n * @memberof NDArray.prototype\n * @description\n * Returns the integer part of each element of current array,\n * removing any fractional digits.\n * @returns {this}\n * @example\n * import { array } from 'vectorious/core/array';\n * \n * array([1.2, 2.8, 3.5]).trunc(); // => array([1, 2, 3])\n */\nexport default function(this: NDArray): NDArray {\n  const { data: d1 } = this;\n  const iter = new NDIter(this);\n\n  for (const i of iter) {\n    d1[i!] = f(d1[i!]);\n  }\n\n  return this;\n};\n", "import { TypedArray } from '../types';\n\nimport { NDArray } from './';\nimport { NDIter } from '../iterator';\n\n/**\n * @static\n * @memberof module:Globals\n * @function magic\n * @description Creates a magic square matrix of size `n`\n * @param {Number} n\n * @returns {NDArray}\n * @example\n * import { magic } from 'vectorious/core/magic';\n * \n * magic(3); // => array([[8, 1, 6], [3, 5, 7], [4, 9, 2]])\n */\nexport const magic = (n: number): NDArray => {\n  if (n < 0) {\n    throw new Error('invalid n');\n  }\n\n  const d1: TypedArray = new Float64Array(n * n);\n  const magic = new NDArray(d1, { shape: [n, n] });\n  const iter = new NDIter(magic);\n\n  let [ci, cj] = iter.coords;\n  for (const i of iter) {\n    const a = n - ci - 1;\n    const b = n - cj - 1;\n\n    d1[i!] = ((cj + a * 2 + 1) % n) * n + ((b + a * 2 + 1) % n) + 1;\n    [ci, cj] = iter.coords;\n  }\n\n  return magic;\n};\n", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function ones\n * @description Creates an array containing ones (`1`) of shape `shape`\n * @param {Number[]} ...shape\n * @returns {NDArray}\n * @example\n * import { ones } from 'vectorious/core/ones';\n * \n * ones(3); // => array([1, 1, 1])\n */\nexport const ones = (...shape: number[]): NDArray =>\n  new NDArray(\n    new Float64Array(shape.reduce((sum: number, dim: number) => sum * dim, 1)),\n    { shape }\n  ).fill(1);\n", "import { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function random\n * @description Creates a vector containing random samples from a uniform distribution over `[0, 1)` of shape `shape`\n * @param {Number[]} ...shape\n * @returns {NDArray}\n * @example\n * import { random } from 'vectorious/core/random';\n * \n * random(3); // => array([0.27496153116226196, 0.7581521272659302, 0.3682245910167694])\n */\nexport const random = (...shape: number[]): NDArray =>\n  new NDArray(\n    new Float64Array(shape.reduce((sum: number, dim: number) => sum * dim, 1)),\n    { shape }\n  ).map(() => Math.random());\n", "import { TypedArray, TypedArrayConstructor } from '../types';\n\nimport { NDArray } from './';\n\n/**\n * @static\n * @memberof module:Globals\n * @function range\n * @description\n * Creates an array containing a range (can be either ascending or descending)\n * of numbers specified by the arguments provided (e.g. `NDArray.range(0, .5, 2)`\n * gives an array containing all numbers in the interval `[0, 2)` separated by\n * steps of `0.5`)\n * @param {Number} start\n * @param {Number} step\n * @param {Number} stop\n * @returns {NDArray}\n * @example\n * import { range } from 'vectorious/core/range';\n * \n * range(1, 2, 9); // => array([1, 3, 5, 7])\n */\nexport const range = (...args: number[]): NDArray => {\n  const type: TypedArrayConstructor = Float32Array;\n  let backwards: boolean = false;\n  let start: number;\n  let step: number;\n  let end: number;\n\n  switch (args.length) {\n    case 2:\n      end = args.pop() as number;\n      step = 1;\n      start = args.pop() as number;\n      break;\n    case 3:\n      end = args.pop() as number;\n      step = args.pop() as number;\n      start = args.pop() as number;\n      break;\n    default:\n      throw new Error('invalid range');\n  }\n\n  if (end - start < 0) {\n    const copy: number = end;\n    end = start;\n    start = copy;\n    backwards = true;\n  }\n\n  if (step > end - start) {\n    throw new Error('invalid range');\n  }\n\n  const data: TypedArray = new type(Math.ceil((end - start) / step));\n\n  let i: number = start;\n  let j: number = 0;\n\n  if (backwards) {\n    for (; i < end; i += step, j += 1) {\n      data[j] = end - i + start;\n    }\n  } else {\n    for (; i < end; i += step, j += 1) {\n      data[j] = i;\n    }\n  }\n\n  return new NDArray(data);\n};\n", "import {\n  DType,\n  INDArray,\n  TypedArray,\n} from '../types';\nimport {\n  flatten,\n  get_dtype,\n  get_length,\n  get_shape,\n  get_strides,\n  get_type,\n  is_typed_array,\n} from '../util';\nimport {\n  NDIter,\n} from '../iterator';\n\nimport { default as abs } from './abs';\nimport { default as acos } from './acos';\nimport { default as acosh } from './acosh';\nimport { default as add } from './add';\nimport { default as angle } from './angle';\nimport { default as asin } from './asin';\nimport { default as asinh } from './asinh';\nimport { default as atan } from './atan';\nimport { default as atanh } from './atanh';\nimport { default as augment } from './augment';\nimport { default as binOp } from './binOp';\nimport { default as cbrt } from './cbrt';\nimport { default as ceil } from './ceil';\nimport { default as check } from './check';\nimport { default as combine } from './combine';\nimport { default as copy } from './copy';\nimport { default as cos } from './cos';\nimport { default as cosh } from './cosh';\nimport { default as cross } from './cross';\nimport { default as det } from './det';\nimport { default as diagonal } from './diagonal';\nimport { default as dot } from './dot';\nimport { default as eig } from './eig';\nimport { default as equals } from './equals';\nimport { default as equidimensional } from './equidimensional';\nimport { default as equilateral } from './equilateral';\nimport { default as exp } from './exp';\nimport { default as expm1 } from './expm1';\nimport { default as fill } from './fill';\nimport { default as floor } from './floor';\nimport { default as forEach } from './forEach';\nimport { default as fround } from './fround';\nimport { default as gauss } from './gauss';\nimport { default as get } from './get';\nimport { default as inv } from './inv';\nimport { default as log } from './log';\nimport { default as log10 } from './log10';\nimport { default as log1p } from './log1p';\nimport { default as log2 } from './log2';\nimport { default as lu } from './lu';\nimport { default as lu_factor } from './lu_factor';\nimport { default as map } from './map';\nimport { default as max } from './max';\nimport { default as mean } from './mean';\nimport { default as min } from './min';\nimport { default as multiply } from './multiply';\nimport { default as norm } from './norm';\nimport { default as normalize } from './normalize';\nimport { default as pow } from './pow';\nimport { default as prod } from './prod';\nimport { default as product } from './product';\nimport { default as project } from './project';\nimport { default as push } from './push';\nimport { default as rank } from './rank';\nimport { default as reciprocal } from './reciprocal';\nimport { default as reduce } from './reduce';\nimport { default as reshape } from './reshape';\nimport { default as round } from './round';\nimport { default as row_add } from './row_add';\nimport { default as scale } from './scale';\nimport { default as set } from './set';\nimport { default as sign } from './sign';\nimport { default as sin } from './sin';\nimport { default as sinh } from './sinh';\nimport { default as slice } from './slice';\nimport { default as solve } from './solve';\nimport { default as sqrt } from './sqrt';\nimport { default as square } from './square';\nimport { default as subtract } from './subtract';\nimport { default as sum } from './sum';\nimport { default as swap } from './swap';\nimport { default as tan } from './tan';\nimport { default as tanh } from './tanh';\nimport { default as toArray } from './toArray';\nimport { default as toString } from './toString';\nimport { default as trace } from './trace';\nimport { default as transpose } from './transpose';\nimport { default as trunc } from './trunc';\n\nconst inspectSymbol: unique symbol = Symbol.for('nodejs.util.inspect.custom');\n\n/**\n * @class NDArray\n * @description Constructs or copies an NDArray instance.\n * @param data\n * @param {Object} [options]\n * @param {Number[]} [options.shape]\n * @param {Number} [options.length]\n * @param {Number[]} [options.strides]\n * @param {string} [options.dtype]\n * @example\n * import { NDArray } from 'vectorious';\n *\n * new NDArray() // => array([], dtype=float64)\n * new NDArray([]) // => array([], dtype=float64)\n * new NDArray([1, 2, 3]) // => array([1, 2, 3], dtype=float64)\n * new NDArray([[1, 2], [3, 4]]) // => array([ [ 1, 2 ], [ 3, 4 ] ], dtype=float64)\n * new NDArray(new Int32Array([1, 2, 3])) // => array([ 1, 2, 3 ], dtype=int32)\n * new NDArray([1, 2, 3, 4], {\n *   shape: [2, 2],\n *   dtype: 'uint32'\n * }) // => array([ [ 1, 2 ], [ 3, 4 ] ], dtype=uint32)\n */\nexport class NDArray implements INDArray {\n  /**\n   * @name data\n   * @memberof NDArray.prototype\n   * @type TypedArray\n   * @default new Float64Array(0)\n   */\n  public data: TypedArray = new Float64Array(0);\n  \n  /**\n   * @name dtype\n   * @memberof NDArray.prototype\n   * @type String\n   * @default 'float64'\n   */\n  public dtype: DType = 'float64';\n\n  /**\n   * @name length\n   * @memberof NDArray.prototype\n   * @type Number\n   * @default 0\n   */\n  public length: number = 0;\n\n  /**\n   * @name shape\n   * @memberof NDArray.prototype\n   * @type Number[]\n   * @default [0]\n   */\n  public shape: number[] = [0];\n\n  /**\n   * @name strides\n   * @memberof NDArray.prototype\n   * @type Number[]\n   * @default [0]\n   */\n  public strides: number[] = [0];\n\n  public [inspectSymbol]: () => string = toString;\n  public abs = abs;\n  public acos = acos;\n  public acosh = acosh;\n  public add = add;\n  public angle = angle;\n  public asin = asin;\n  public asinh = asinh;\n  public atan = atan;\n  public atanh = atanh;\n  public augment = augment;\n  public binOp = binOp;\n  public cbrt = cbrt;\n  public ceil = ceil;\n  public check = check;\n  public combine = combine;\n  public copy = copy;\n  public cos = cos;\n  public cosh = cosh;\n  public cross = cross;\n  public det = det;\n  public diagonal = diagonal;\n  public dot = dot;\n  public eig = eig;\n  public equals = equals;\n  public equidimensional = equidimensional;\n  public equilateral = equilateral;\n  public exp = exp;\n  public expm1 = expm1;\n  public fill = fill;\n  public floor = floor;\n  public forEach = forEach;\n  public fround = fround;\n  public gauss = gauss;\n  public get = get;\n  public inv = inv;\n  public log = log;\n  public log10 = log10;\n  public log1p = log1p;\n  public log2 = log2;\n  public lu = lu;\n  public lu_factor = lu_factor;\n  public map = map;\n  public max = max;\n  public mean = mean;\n  public min = min;\n  public multiply = multiply;\n  public norm = norm;\n  public normalize = normalize;\n  public pow = pow;\n  public prod = prod;\n  public product = product;\n  public project = project;\n  public push = push;\n  public rank = rank;\n  public reciprocal = reciprocal;\n  public reduce = reduce;\n  public reshape = reshape;\n  public round = round;\n  public row_add = row_add;\n  public scale = scale;\n  public set = set;\n  public sign = sign;\n  public sin = sin;\n  public sinh = sinh;\n  public slice = slice;\n  public solve = solve;\n  public sqrt = sqrt;\n  public square = square;\n  public subtract = subtract;\n  public sum = sum;\n  public swap = swap;\n  public tan = tan;\n  public tanh = tanh;\n  public toArray = toArray;\n  public toString = toString;\n  public trace = trace;\n  public transpose = transpose;\n  public trunc = trunc;\n\n  public constructor(\n    data?: any,\n    options?: {\n      shape?: number[];\n      length?: number;\n      strides?: number[];\n      dtype?: DType;\n    }\n  ) {\n    if (!data) {\n      return;\n    }\n\n    if (data instanceof NDArray) {\n      return data;\n    }\n\n    if (data instanceof NDIter) {\n      if (!options || !options.dtype) {\n        throw new Error('dtype is missing');\n      }\n\n      if (data.shape) {\n        options.shape = data.shape;\n      }\n\n      const length = data.length;\n      data = new (get_type(options.dtype))(length);\n    }\n\n    const {\n      shape = get_shape(data),\n      length = get_length(shape),\n      strides = get_strides(shape),\n      dtype = get_dtype(data),\n    } = options || {};\n\n    this.data = is_typed_array(data) ? data : new (get_type(dtype))(flatten(data));\n    this.shape = shape;\n    this.length = length;\n    this.dtype = dtype;\n    this.strides = strides;\n  }\n\n  /**\n   * @name x\n   * @memberof NDArray.prototype\n   * @description Gets or sets the value at index 0\n   * @type Number\n   */\n  public get x(): number {\n    return this.get(0);\n  }\n\n  public set x(value: number) {\n    this.set(0, value);\n  }\n\n  /**\n   * @name y\n   * @memberof NDArray.prototype\n   * @description Gets or sets the value at index 1\n   * @type Number\n   */\n  public get y(): number {\n    return this.get(1);\n  }\n\n  public set y(value: number) {\n    this.set(1, value);\n  }\n\n  /**\n   * @name z\n   * @memberof NDArray.prototype\n   * @description Gets or sets the value at index 2\n   * @type Number\n   */\n  public get z(): number {\n    return this.get(2);\n  }\n\n  public set z(value: number) {\n    this.set(2, value);\n  }\n\n  /**\n   * @name w\n   * @memberof NDArray.prototype\n   * @description Gets or sets the value at index 3\n   * @type Number\n   */\n  public get w(): number {\n    return this.get(3);\n  }\n\n  public set w(value: number) {\n    this.set(3, value);\n  }\n\n  /**\n   * @name T\n   * @memberof NDArray.prototype\n   * @description Short for this.copy().transpose()\n   * @type NDArray\n   */\n  public get T() {\n    return this.copy().transpose();\n  }\n}\n\nexport { abs } from './abs';\nexport { acos } from './acos';\nexport { acosh } from './acosh';\nexport { add } from './add';\nexport { angle } from './angle';\nexport { array } from './array';\nexport { asin } from './asin';\nexport { asinh } from './asinh';\nexport { atan } from './atan';\nexport { atanh } from './atanh';\nexport { augment } from './augment';\nexport { binOp } from './binOp';\nexport { cbrt } from './cbrt';\nexport { ceil } from './ceil';\nexport { check } from './check';\nexport { combine } from './combine';\nexport { copy } from './copy';\nexport { cos } from './cos';\nexport { cosh } from './cosh';\nexport { cross } from './cross';\nexport { det } from './det';\nexport { diagonal } from './diagonal';\nexport { dot } from './dot';\nexport { eig } from './eig';\nexport { equals } from './equals';\nexport { equidimensional } from './equidimensional';\nexport { equilateral } from './equilateral';\nexport { exp } from './exp';\nexport { expm1 } from './expm1';\nexport { eye } from './eye';\nexport { fill } from './fill';\nexport { floor } from './floor';\nexport { forEach } from './forEach';\nexport { fround } from './fround';\nexport { gauss } from './gauss';\nexport { get } from './get';\nexport { inv } from './inv';\nexport { log } from './log';\nexport { log10 } from './log10';\nexport { log1p } from './log1p';\nexport { log2 } from './log2';\nexport { lu } from './lu';\nexport { lu_factor } from './lu_factor';\nexport { magic } from './magic';\nexport { map } from './map';\nexport { matrix } from './matrix';\nexport { max } from './max';\nexport { mean } from './mean';\nexport { min } from './min';\nexport { multiply } from './multiply';\nexport { norm } from './norm';\nexport { normalize } from './normalize';\nexport { ones } from './ones';\nexport { pow } from './pow';\nexport { prod } from './prod';\nexport { product } from './product';\nexport { project } from './project';\nexport { push } from './push';\nexport { random } from './random';\nexport { range } from './range';\nexport { rank } from './rank';\nexport { reciprocal } from './reciprocal';\nexport { reduce } from './reduce';\nexport { reshape } from './reshape';\nexport { round } from './round';\nexport { row_add } from './row_add';\nexport { scale } from './scale';\nexport { set } from './set';\nexport { sign } from './sign';\nexport { sin } from './sin';\nexport { sinh } from './sinh';\nexport { slice } from './slice';\nexport { solve } from './solve';\nexport { sqrt } from './sqrt';\nexport { square } from './square';\nexport { subtract } from './subtract';\nexport { sum } from './sum';\nexport { swap } from './swap';\nexport { tan } from './tan';\nexport { tanh } from './tanh';\nexport { toArray } from './toArray';\nexport { toString } from './toString';\nexport { trace } from './trace';\nexport { transpose } from './transpose';\nexport { trunc } from './trunc';\nexport { zeros } from './zeros';\n\ntry {\n  (window as any).v = NDArray;\n} catch (error) {}\n"],
  "mappings": "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",
  "names": []
}
